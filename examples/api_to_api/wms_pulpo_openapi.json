{
  "basePath": "/api/v1",
  "definitions": {
    "AccessTokenRequest": {
      "description": "Body for requesting access token",
      "properties": {
        "grant_type": {
          "default": "password",
          "description": "use 'password' for authentication 'refresh_token' for exchange the token",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "scope": {
          "default": "default",
          "description": "Scope",
          "type": "string"
        },
        "username": {
          "description": "Username",
          "type": "string"
        }
      },
      "required": [
        "scope",
        "password",
        "username"
      ],
      "title": "Access Token Request",
      "type": "object"
    },
    "AccessTokenResponse": {
      "description": "Access Token Response",
      "properties": {
        "access_token": {
          "description": "JWT Token",
          "type": "string"
        },
        "expires_in": {
          "description": "Token expiration",
          "type": "integer"
        },
        "scope": {
          "default": "general",
          "description": "Auth scope",
          "type": "string"
        },
        "token_type": {
          "default": "bearer",
          "description": "Token type",
          "type": "string"
        }
      },
      "required": [
        "token_type",
        "scope",
        "expires_in",
        "access_token"
      ],
      "title": "Access Token Response",
      "type": "object"
    },
    "Address": {
      "description": "Address",
      "properties": {
        "address": {
          "$ref": "#/definitions/AddressDetail"
        },
        "company_name": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "address"
      ],
      "title": "Address",
      "type": "object"
    },
    "AddressDetail": {
      "description": "Address Detail",
      "properties": {
        "additional_info": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "house_nr": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      },
      "required": [
        "street"
      ],
      "title": "Address Detail",
      "type": "object"
    },
    "ApiRate": {
      "description": "Api Rate",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "threshold": {
          "type": "integer"
        },
        "unit_of_measure": {
          "type": "string"
        }
      },
      "title": "Api Rate",
      "type": "object"
    },
    "AssignStockStateRequest": {
      "description": "Assign Stock State Request",
      "properties": {
        "comment": {
          "description": "Comment",
          "type": "string"
        },
        "locations": {
          "description": "Locations",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "stock_state_id": {
          "description": "Stock State ID",
          "type": "integer"
        }
      },
      "required": [
        "comment",
        "locations",
        "stock_state_id"
      ],
      "title": "Assign Stock State Request",
      "type": "object"
    },
    "Attachment": {
      "description": "Attachment",
      "properties": {
        "container": {
          "type": "string"
        },
        "container_id": {
          "type": "integer"
        },
        "document_type": {
          "type": "string"
        },
        "extension": {
          "type": "string"
        },
        "file_type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Attachment",
      "type": "object"
    },
    "AttachmentMetadataRequest": {
      "description": "Packing box attachment metadata Request",
      "properties": {
        "extension": {
          "description": "Extension of the attachment",
          "type": "string"
        },
        "file_type": {
          "description": "File type of the attachment",
          "type": "string"
        },
        "filename": {
          "description": "The ID of the attachment in S3",
          "type": "string"
        },
        "packing_box_id": {
          "description": "Packing box to which the attachment belongs to",
          "type": "integer"
        },
        "packing_order_id": {
          "description": "Packing order to which the packing box belongs to",
          "type": "integer"
        },
        "type": {
          "description": "Type of the attachment",
          "type": "string"
        }
      },
      "required": [
        "extension",
        "type",
        "filename",
        "filename",
        "file_type",
        "packing_order_id",
        "packing_box_id"
      ],
      "title": "Packing box attachment metadata Request",
      "type": "object"
    },
    "AttachmentRequest": {
      "description": "Body for requesting attachment",
      "properties": {
        "content_type": {
          "description": "Format Document in MIME type",
          "type": "string"
        },
        "filename": {
          "description": "File name of file to attach",
          "type": "string"
        },
        "path": {
          "description": "Path of file to attach",
          "type": "string"
        },
        "type": {
          "description": "Type of document to be attached, can be photo or label",
          "type": "string"
        }
      },
      "required": [
        "content_type",
        "filename",
        "path"
      ],
      "title": "Attachment Request",
      "type": "object"
    },
    "AttachmentResponse": {
      "description": "Attachment response",
      "properties": {
        "attachments": {
          "description": {
            "$ref": "#/definitions/BasicAttachment"
          },
          "type": "array"
        },
        "packing_box_id": {
          "description": "Packing Box ID",
          "type": "integer"
        }
      },
      "title": "Attachment Response",
      "type": "object"
    },
    "AttachmentResponseList": {
      "items": {
        "$ref": "#/definitions/AttachmentResponse"
      },
      "type": "array"
    },
    "AuthError": {
      "description": "Auth error",
      "properties": {
        "errors": {
          "$ref": "#/definitions/AuthMessage",
          "description": "Error message"
        }
      },
      "title": "Auth error",
      "type": "object"
    },
    "AuthMessage": {
      "description": "Auth error message",
      "properties": {
        "message": {
          "default": "unauthorized",
          "description": "Error message",
          "type": "string"
        }
      },
      "title": "Auth error message",
      "type": "object"
    },
    "Availability": {
      "description": "availability of a product",
      "properties": {
        "available_quantity": {
          "description": "Available quantity of the product, calculated by the storage stock minus the stock reserved for sales order (in queue and picking) and replenishment orders (in queue and taken)",
          "type": "integer"
        },
        "product_id": {
          "description": "Id of the product",
          "type": "string"
        },
        "reception_quantity": {
          "description": "Quantity of the product in reception positions",
          "type": "integer"
        },
        "return_quantity": {
          "description": "Rejected quantity of the product, calculated by the sum of the stocks stored in return positions",
          "type": "integer"
        }
      },
      "title": "Availability",
      "type": "object"
    },
    "AvailabilityBatch": {
      "description": "Availability Batch",
      "properties": {
        "available_quantity": {
          "type": "integer"
        },
        "batch_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_type_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "reception_quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Availability Batch",
      "type": "object"
    },
    "AvailabilityBatch_ResponseList": {
      "items": {
        "$ref": "#/definitions/AvailabilityBatch"
      },
      "type": "array"
    },
    "Availability__ResponseList": {
      "items": {
        "$ref": "#/definitions/Availability"
      },
      "type": "array"
    },
    "Barcode": {
      "description": "Barcode",
      "properties": {
        "code": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Barcode",
      "type": "object"
    },
    "BasicAttachment": {
      "properties": {
        "type": {
          "description": "Type of document to be attached, can be photo or label",
          "type": "string"
        },
        "url": {
          "description": "Packing Box ID",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Batch": {
      "description": "Batch",
      "properties": {
        "client_id": {
          "type": "string"
        },
        "expiration_date": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "third_party_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Batch",
      "type": "object"
    },
    "BulkAttachmentMetadataRequest": {
      "description": "Body for attaching attachment metadata to a list of packing boxes",
      "properties": {
        "_json": {
          "description": "List of attachments metadata",
          "items": {
            "$ref": "#/definitions/AttachmentMetadataRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "_json"
      ],
      "title": "Bulk Attachment Metadata Request",
      "type": "object"
    },
    "BulkErrorsPackingResponse": {
      "description": "Updated packings list",
      "properties": {
        "errors": {
          "description": "Validation errors in packing process",
          "items": {
            "$ref": "#/definitions/ErrorPackingResponse"
          },
          "type": "array"
        },
        "updated": {
          "description": "Updated Packings",
          "items": {
            "$ref": "#/definitions/UpdatedPackingResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated packings list",
      "type": "object"
    },
    "BulkErrorsPickingResponse": {
      "description": "Created pickings list",
      "properties": {
        "created": {
          "description": "Created Pickings",
          "items": {
            "$ref": "#/definitions/CreatedPickingResponse"
          },
          "type": "array"
        },
        "errors": {
          "description": "Validation errors in picking creation",
          "items": {
            "$ref": "#/definitions/ErrorPickingResponse"
          },
          "type": "array"
        }
      },
      "title": "Created pickings list",
      "type": "object"
    },
    "BulkErrorsProductsResponse": {
      "description": "Created pickings list",
      "properties": {
        "created": {
          "description": "Created Products",
          "items": {
            "$ref": "#/definitions/BulkProductResponse"
          },
          "type": "array"
        },
        "errors": {
          "description": "Validation errors in product creation",
          "items": {
            "$ref": "#/definitions/ErrorsList"
          },
          "type": "array"
        }
      },
      "title": "Created pickings list",
      "type": "object"
    },
    "BulkErrorsPurchaseOrderResponse": {
      "description": "Created Purchase Orders and errors list",
      "properties": {
        "created": {
          "description": "Created Purchase Orders",
          "items": {
            "$ref": "#/definitions/PurchaseOrderResponse"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/ErrorPurchaseOrderResponse",
          "description": "List of validation errors in purchase orders creation for each order"
        }
      },
      "title": "Created Purchase Orders and errors list",
      "type": "object"
    },
    "BulkErrorsSalesOrderResponse": {
      "description": "Created Sales Orders and errors list",
      "properties": {
        "created": {
          "description": "Created Sales Orders",
          "items": {
            "$ref": "#/definitions/SalesOrderResponse"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/ErrorSalesOrderResponse",
          "description": "List of validation errors in sales orders creation for each order"
        }
      },
      "title": "Created Sales Orders and errors list",
      "type": "object"
    },
    "BulkErrorsThirdPartyResponse": {
      "description": "Created Third parties and errors list",
      "properties": {
        "created": {
          "description": "Created Third parties",
          "items": {
            "$ref": "#/definitions/ThirdPartyResponse"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/ErrorThirdPartyResponse",
          "description": "List of validation errors in third parties creation"
        }
      },
      "title": "Created Third parties and errors list",
      "type": "object"
    },
    "BulkPackingActionsRequest": {
      "description": "Body for requesting bulk creation of picking orders",
      "properties": {
        "actions": {
          "description": "Actions to execute",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "description": "List of params to execute the actions",
          "items": {
            "$ref": "#/definitions/ParamsActionRequest"
          },
          "type": "array"
        }
      },
      "required": [
        "params",
        "actions"
      ],
      "title": "Bulk Packing Actions Request",
      "type": "object"
    },
    "BulkPackingResponse": {
      "description": "Updated packings list",
      "properties": {
        "updated": {
          "description": "Updated Packings",
          "items": {
            "$ref": "#/definitions/UpdatedPackingResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated packings list",
      "type": "object"
    },
    "BulkPickingRequest": {
      "description": "Body for requesting bulk creation of picking orders",
      "properties": {
        "orders_count": {
          "default": 1,
          "description": "Amount of picking orders that will be created, it will split the given sales orders in picking orders with the same amount of items",
          "type": "integer"
        },
        "pickers": {
          "description": "List of picker ids that will be assigned to the picking orders",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "picking_orders": {
          "description": "List of picking orders that will be created",
          "items": {
            "$ref": "#/definitions/PickingOrderRequest"
          },
          "type": "array"
        },
        "sales_orders": {
          "description": "Validation error strings",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "turbo_label": {
          "default": false,
          "description": "If this is sent as true it will create a draft packing order and 1 packing box for each product unit, then it will attach a shipment label to each box",
          "type": "boolean"
        }
      },
      "required": [
        "picking_orders",
        "sales_orders"
      ],
      "title": "Bulk Picking Request",
      "type": "object"
    },
    "BulkPickingResponse": {
      "description": "Created pickings list",
      "properties": {
        "created": {
          "description": "Created Pickings",
          "items": {
            "$ref": "#/definitions/CreatedPickingResponse"
          },
          "type": "array"
        }
      },
      "title": "Created pickings list",
      "type": "object"
    },
    "BulkProductResponse": {
      "description": "Created Products list",
      "properties": {
        "created": {
          "description": "Created products",
          "items": {
            "$ref": "#/definitions/ProductResponse"
          },
          "type": "array"
        }
      },
      "title": "Created Products list",
      "type": "object"
    },
    "BulkPurchaseOrderResponse": {
      "description": "Created Purchase Orders list",
      "properties": {
        "created": {
          "description": "Created Purchase Orders",
          "items": {
            "$ref": "#/definitions/PurchaseOrderResponse"
          },
          "type": "array"
        }
      },
      "title": "Created Purchase Orders list",
      "type": "object"
    },
    "BulkSalesOrderResponse": {
      "description": "Created Sales Orders list",
      "properties": {
        "created": {
          "description": "Created Sales Orders",
          "items": {
            "$ref": "#/definitions/SalesOrderResponse"
          },
          "type": "array"
        }
      },
      "title": "Created Sales Orders list",
      "type": "object"
    },
    "BulkThirdPartyResponse": {
      "description": "Created Third parties list",
      "properties": {
        "created": {
          "description": "Created Third parties",
          "items": {
            "$ref": "#/definitions/ThirdPartyResponse"
          },
          "type": "array"
        }
      },
      "title": "Created Third parties list",
      "type": "object"
    },
    "BulkUpdateErrorsProductsResponse": {
      "description": "Updated pickings list",
      "properties": {
        "errors": {
          "description": "Validation errors in product update",
          "items": {
            "$ref": "#/definitions/ErrorsList"
          },
          "type": "array"
        },
        "updated": {
          "description": "Updated Products",
          "items": {
            "$ref": "#/definitions/ProductResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated pickings list",
      "type": "object"
    },
    "BulkUpdateErrorsPurchaseOrderResponse": {
      "description": "Updated Purchase Orders and errors list",
      "properties": {
        "errors": {
          "$ref": "#/definitions/ErrorPurchaseOrderResponse",
          "description": "List of validation errors in purchase orders creation for each order"
        },
        "updated": {
          "description": "Updated Purchase Orders",
          "items": {
            "$ref": "#/definitions/PurchaseOrderResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated Purchase Orders and errors list",
      "type": "object"
    },
    "BulkUpdateErrorsSalesOrderResponse": {
      "description": "Updated Sales Orders and errors list",
      "properties": {
        "errors": {
          "$ref": "#/definitions/ErrorSalesOrderResponse",
          "description": "List of validation errors in sales orders update for each order"
        },
        "updated": {
          "description": "Updated Sales Orders",
          "items": {
            "$ref": "#/definitions/SalesOrderResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated Sales Orders and errors list",
      "type": "object"
    },
    "BulkUpdateErrorsThirdPartyResponse": {
      "description": "Updated Third parties and errors list",
      "properties": {
        "errors": {
          "$ref": "#/definitions/ErrorThirdPartyResponse",
          "description": "List of validation errors in third parties update"
        },
        "updated": {
          "description": "Updated Third parties",
          "items": {
            "$ref": "#/definitions/ThirdPartyResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated Third parties and errors list",
      "type": "object"
    },
    "BulkUpdateLocationsResponse": {
      "description": "Updated locations and errors",
      "properties": {
        "errors": {
          "description": "Validation errors in locations update",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "updated": {
          "description": "Updated Locations",
          "items": {
            "$ref": "#/definitions/LocationResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated locations and errors",
      "type": "object"
    },
    "BulkUpdateProductResponse": {
      "description": "Updated Products list",
      "properties": {
        "updated": {
          "description": "Updated products",
          "items": {
            "$ref": "#/definitions/ProductResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated Products list",
      "type": "object"
    },
    "BulkUpdatePurchaseOrderResponse": {
      "description": "Updated Purchase Orders list",
      "properties": {
        "updated": {
          "description": "Updated Purchase Orders",
          "items": {
            "$ref": "#/definitions/PurchaseOrderResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated Purchase Orders list",
      "type": "object"
    },
    "BulkUpdateSalesOrderResponse": {
      "description": "Updated Sales Orders list",
      "properties": {
        "updated": {
          "description": "Updated Sales Orders",
          "items": {
            "$ref": "#/definitions/SalesOrderResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated Sales Orders list",
      "type": "object"
    },
    "BulkUpdateThirdPartyResponse": {
      "description": "Updated Third parties list",
      "properties": {
        "updated": {
          "description": "Updated Third parties",
          "items": {
            "$ref": "#/definitions/ThirdPartyResponse"
          },
          "type": "array"
        }
      },
      "title": "Updated Third parties list",
      "type": "object"
    },
    "CartBox": {
      "description": "Cart Box",
      "properties": {
        "barcode": {
          "type": "string"
        },
        "fulfillment_order_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "occupied": {
          "type": "boolean"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Cart Box",
      "type": "object"
    },
    "Channel": {
      "description": "Channel",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "city": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "full_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "merchant_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "site": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "zip_code": {
          "type": "string"
        }
      },
      "title": "Channel",
      "type": "object"
    },
    "ClientLogRequest": {
      "description": "Client Log Request",
      "properties": {
        "id": {
          "type": "integer"
        },
        "level": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      },
      "title": "Client Log Request",
      "type": "object"
    },
    "Connection": {
      "description": "Connection",
      "properties": {
        "destination_location_id": {
          "type": "integer"
        },
        "hallway": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "origin_location_id": {
          "type": "integer"
        },
        "row": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "weight": {
          "type": "number"
        }
      },
      "required": [
        "origin_location_id",
        "destination_location_id",
        "weight"
      ],
      "title": "Connection",
      "type": "object"
    },
    "CountingItem": {
      "description": "Counting Item",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "count_iteration": {
          "type": "integer"
        },
        "counter_id": {
          "type": "integer"
        },
        "counting_task_id": {
          "type": "integer"
        },
        "current_stock_quantity": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_valid": {
          "type": "boolean"
        },
        "location_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Counting Item",
      "type": "object"
    },
    "CountingItemReasonCode": {
      "description": "Counting Item Reason Code",
      "properties": {
        "counting_item_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "reason_code_id": {
          "type": "integer"
        },
        "reason_type": {
          "type": "string"
        }
      },
      "title": "Counting Item Reason Code",
      "type": "object"
    },
    "CountingReason": {
      "description": "Add a reason to accounting task",
      "properties": {
        "reason_code_id": {
          "description": "reason id",
          "type": "integer"
        },
        "reason_type": {
          "description": "reason_type",
          "type": "string"
        }
      },
      "required": [
        "reason_type",
        "reason_code_id"
      ],
      "title": "Counting reason",
      "type": "object"
    },
    "CountingReasons": {
      "items": {
        "$ref": "#/definitions/CountingReason"
      },
      "type": "array"
    },
    "CountingTask": {
      "description": "Counting Task",
      "properties": {
        "audited_at": {
          "type": "string"
        },
        "auditor_id": {
          "type": "integer"
        },
        "count_iteration": {
          "type": "integer"
        },
        "counter_id": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "inventory_id": {
          "type": "integer"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/CountingItem"
          },
          "type": "array"
        },
        "location_id": {
          "type": "integer"
        },
        "owner_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Counting Task",
      "type": "object"
    },
    "CountingTaskReasonCode": {
      "description": "Counting Task Reason Code",
      "properties": {
        "counting_task_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "reason_code_id": {
          "type": "integer"
        },
        "reason_type": {
          "type": "string"
        }
      },
      "title": "Counting Task Reason Code",
      "type": "object"
    },
    "Country": {
      "description": "Country",
      "properties": {
        "alpha_2": {
          "type": "string"
        },
        "alpha_3": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "country_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "intermediate_region": {
          "type": "string"
        },
        "iso_3166_2": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "sub_region": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Country",
      "type": "object"
    },
    "CountryAlias": {
      "description": "Country Alias",
      "properties": {
        "alias_name": {
          "type": "string"
        },
        "country_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Country Alias",
      "type": "object"
    },
    "CreatedPickingResponse": {
      "description": "Created Pickings Response",
      "properties": {
        "id": {
          "description": "Picking order's id",
          "type": "integer"
        },
        "order_num": {
          "description": "Origin sales order num",
          "type": "string"
        },
        "sequence_number": {
          "description": "Picking order's sequence number",
          "type": "string"
        }
      },
      "required": [
        "sequence_number",
        "order_num",
        "id"
      ],
      "title": "Created Pickings Response",
      "type": "object"
    },
    "CustomRouteRule": {
      "description": "Custom Route Rule",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Custom Route Rule",
      "type": "object"
    },
    "DailySummaryStat": {
      "description": "Daily Summary Stat",
      "properties": {
        "cumulative_value": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "merchant_id": {
          "type": "integer"
        },
        "origin_table": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "value": {
          "type": "number"
        },
        "value_date": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Daily Summary Stat",
      "type": "object"
    },
    "Device": {
      "description": "Device",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "instance_id": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Device",
      "type": "object"
    },
    "DocumentSequence": {
      "description": "Document Sequence",
      "properties": {
        "id": {
          "type": "integer"
        },
        "padding": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Document Sequence",
      "type": "object"
    },
    "EmptyLocationResponse": {
      "properties": {
        "empty": {
          "description": "Whether the location is empty or not",
          "type": "boolean"
        },
        "location_id": {
          "description": "Location id",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EmptyLocationsResponse": {
      "properties": {
        "locations": {
          "description": "Locations",
          "items": {
            "$ref": "#/definitions/EmptyLocationResponse"
          },
          "type": "array"
        }
      },
      "title": "Locations and whether they are empty or not",
      "type": "object"
    },
    "Error": {
      "description": "Validation error",
      "properties": {
        "column": {
          "description": "Error message (Key has column names, not \"column\")",
          "type": "string"
        }
      },
      "title": "Validation error",
      "type": "object"
    },
    "ErrorPackingResponse": {
      "description": "Validation error",
      "properties": {
        "error": {
          "description": "Validation error",
          "type": "string"
        },
        "packing_order_id": {
          "description": "Packing order id",
          "type": "integer"
        }
      },
      "title": "Validation error",
      "type": "object"
    },
    "ErrorPickingResponse": {
      "description": "Validation error",
      "properties": {
        "error": {
          "description": "Validation error",
          "type": "string"
        },
        "order_num": {
          "description": "Origin sales order num",
          "type": "string"
        }
      },
      "title": "Validation error",
      "type": "object"
    },
    "ErrorPurchaseOrderResponse": {
      "description": "Validation error",
      "properties": {
        "purchase_order_num": {
          "$ref": "#/definitions/Error",
          "description": "Purchase order num with associated validation errors"
        }
      },
      "required": [
        "purchase_order_num"
      ],
      "title": "Validation error",
      "type": "object"
    },
    "ErrorSalesOrderResponse": {
      "description": "Validation error",
      "properties": {
        "sales_order_num": {
          "$ref": "#/definitions/Error",
          "description": "Sales order num with associated validation errors"
        }
      },
      "required": [
        "sales_order_num"
      ],
      "title": "Validation error",
      "type": "object"
    },
    "ErrorThirdPartyResponse": {
      "description": "Validation error",
      "properties": {
        "identifier_number": {
          "$ref": "#/definitions/Error",
          "description": "Third party identifier number with associated validation errors"
        }
      },
      "required": [
        "identifier_number"
      ],
      "title": "Validation error",
      "type": "object"
    },
    "ErrorsList": {
      "description": "Validation errors list",
      "properties": {
        "errors": {
          "description": "Validation error strings",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "title": "Validation errors list",
      "type": "object"
    },
    "Event": {
      "description": "Event",
      "properties": {
        "data": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "pre_event_data": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Event",
      "type": "object"
    },
    "EventLog": {
      "description": "Event Log",
      "properties": {
        "code": {
          "type": "integer"
        },
        "event_id": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "response": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "webhook_id": {
          "type": "string"
        }
      },
      "title": "Event Log",
      "type": "object"
    },
    "FetchLocationStrategy": {
      "description": "Fetch Location Strategy",
      "properties": {
        "filters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "priority": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        }
      },
      "title": "Fetch Location Strategy",
      "type": "object"
    },
    "FinishPickingRequest": {
      "description": "Finish Picking Request",
      "properties": {
        "fulfillment_order_id": {
          "description": "Fulfillment order id",
          "type": "integer"
        },
        "packing_location_id": {
          "description": "Packing location where user will put the products of given sales order",
          "type": "integer"
        }
      },
      "required": [
        "fulfillment_order_id",
        "packing_location_id"
      ],
      "title": "Finish Picking Request",
      "type": "object"
    },
    "FulfillmentItem": {
      "description": "Fulfillment Item",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "fulfilled_quantity": {
          "type": "integer"
        },
        "fulfillment_order_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "line_order_id": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "required_date": {
          "type": "string"
        },
        "sales_item_id": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Fulfillment Item",
      "type": "object"
    },
    "FulfillmentItemBatch": {
      "description": "Fulfillment Item Batch",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "fulfillment_item_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "suggested_quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Fulfillment Item Batch",
      "type": "object"
    },
    "FulfillmentOrder": {
      "description": "Fulfillment Order",
      "properties": {
        "attachments": {
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "type": "array"
        },
        "attributes": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "client_name": {
          "type": "string"
        },
        "creator_id": {
          "type": "integer"
        },
        "criterium": {
          "type": "string"
        },
        "custom_route_rule_id": {
          "type": "integer"
        },
        "delivery_date": {
          "type": "string"
        },
        "destination_warehouse_id": {
          "type": "integer"
        },
        "estimated_total_volume": {
          "type": "number"
        },
        "estimated_total_weight": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_cart": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/FulfillmentItem"
          },
          "type": "array"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "missing_stock_items_cancelled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "order_num": {
          "type": "string"
        },
        "packing_location_id": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "process_information_id": {
          "type": "integer"
        },
        "purchase_order_id": {
          "type": "integer"
        },
        "return_labels": {
          "items": {
            "$ref": "#/definitions/ReturnLabel"
          },
          "type": "array"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "service_point_id": {
          "type": "string"
        },
        "ship_to": {
          "$ref": "#/definitions/Address"
        },
        "shipment_instructions": {
          "items": {
            "$ref": "#/definitions/SalesShipmentInstruction"
          },
          "type": "array"
        },
        "shipping_method_id": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "third_party_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Fulfillment Order",
      "type": "object"
    },
    "IncomingGood": {
      "description": "Incoming Good",
      "properties": {
        "criterium": {
          "type": "string"
        },
        "document_type": {
          "type": "string"
        },
        "end_date": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/IncomingGoodItem"
          },
          "type": "array"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "owner_id": {
          "type": "integer"
        },
        "purchase_order_id": {
          "type": "integer"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "third_party_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Incoming Good",
      "type": "object"
    },
    "IncomingGoodItem": {
      "description": "Incoming Good Item",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "destination_location_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "incoming_good_id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "reason_codes": {
          "items": {
            "$ref": "#/definitions/ReasonCode"
          },
          "type": "array"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Incoming Good Item",
      "type": "object"
    },
    "IncomingGoodItemPackaging": {
      "description": "Incoming Good Item Packaging",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "barcode": {
          "type": "string"
        },
        "barcode_agency": {
          "type": "string"
        },
        "batch_expiration_date": {
          "type": "string"
        },
        "batch_number": {
          "type": "string"
        },
        "dimensions_height": {
          "type": "number"
        },
        "dimensions_length": {
          "type": "number"
        },
        "dimensions_weight": {
          "type": "number"
        },
        "dimensions_width": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "incoming_good_item_id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_level_barcode": {
          "type": "string"
        },
        "packaging_level": {
          "type": "integer"
        },
        "packaging_type": {
          "type": "string"
        },
        "quantity_in_package": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Incoming Good Item Packaging",
      "type": "object"
    },
    "IncomingGoodItemPackingBox": {
      "description": "Incoming Good Item Packing Box",
      "properties": {
        "id": {
          "type": "integer"
        },
        "incoming_good_item_id": {
          "type": "integer"
        },
        "packing_box_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        }
      },
      "title": "Incoming Good Item Packing Box",
      "type": "object"
    },
    "Inventory": {
      "description": "Inventory",
      "properties": {
        "end_date": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "owner_id": {
          "type": "integer"
        },
        "start_date": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Inventory",
      "type": "object"
    },
    "Kit": {
      "description": "Kit",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/KitItem"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "tenant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Kit",
      "type": "object"
    },
    "KitItem": {
      "description": "Kit Item",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "kit_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Kit Item",
      "type": "object"
    },
    "KittingItem": {
      "description": "Kitting Item",
      "properties": {
        "assembled_quantity": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "kit_id": {
          "type": "integer"
        },
        "kitting_task_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Kitting Item",
      "type": "object"
    },
    "KittingReplenishment": {
      "description": "Kitting Replenishment",
      "properties": {
        "id": {
          "type": "integer"
        },
        "kitting_task_id": {
          "type": "integer"
        },
        "replenishment_order_id": {
          "type": "integer"
        }
      },
      "title": "Kitting Replenishment",
      "type": "object"
    },
    "KittingTask": {
      "description": "Kitting Task",
      "properties": {
        "destination_location_id": {
          "type": "integer"
        },
        "end_date": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/KittingItem"
          },
          "type": "array"
        },
        "owner_id": {
          "type": "integer"
        },
        "replenishment_orders": {
          "items": {
            "$ref": "#/definitions/ReplenishmentOrder"
          },
          "type": "array"
        },
        "sequence_number": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Kitting Task",
      "type": "object"
    },
    "LoadedShippingBox": {
      "description": "Loaded Shipping Box",
      "properties": {
        "end_date": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "owner_id": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "truck_info": {
          "type": "string"
        },
        "truck_license_plate": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Loaded Shipping Box",
      "type": "object"
    },
    "LoadedShippingBoxUserTransition": {
      "description": "Loaded Shipping Box User Transition",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "loaded_shipping_box_id": {
          "type": "integer"
        },
        "new_owner_id": {
          "type": "integer"
        },
        "performer_id": {
          "type": "integer"
        },
        "previous_owner_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Loaded Shipping Box User Transition",
      "type": "object"
    },
    "LoadingUnitTemplate": {
      "description": "Loading Unit Template",
      "properties": {
        "height": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "length": {
          "type": "number"
        },
        "merchant_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        },
        "weight": {
          "type": "number"
        },
        "width": {
          "type": "number"
        }
      },
      "title": "Loading Unit Template",
      "type": "object"
    },
    "Location": {
      "description": "Location",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "actual_location_id": {
          "type": "integer"
        },
        "attributes": {
          "type": "string"
        },
        "base_height": {
          "type": "integer"
        },
        "code": {
          "type": "string"
        },
        "current_location_control_id": {
          "type": "integer"
        },
        "deleted_at": {
          "type": "string"
        },
        "deleted_by": {
          "type": "integer"
        },
        "dimension_depth": {
          "type": "integer"
        },
        "dimension_height": {
          "type": "integer"
        },
        "dimension_weight": {
          "type": "number"
        },
        "dimension_width": {
          "type": "integer"
        },
        "hallway": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_defined": {
          "type": "boolean"
        },
        "is_volume": {
          "type": "boolean"
        },
        "level": {
          "type": "integer"
        },
        "location_type_id": {
          "type": "integer"
        },
        "module": {
          "type": "integer"
        },
        "position": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "product_categories": {
          "items": {
            "$ref": "#/definitions/ProductCategory"
          },
          "type": "array"
        },
        "rack_id": {
          "type": "integer"
        },
        "row": {
          "type": "integer"
        },
        "stock_state_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "warehouse_id": {
          "type": "integer"
        },
        "zone_id": {
          "type": "integer"
        }
      },
      "required": [
        "code",
        "location_type_id",
        "zone_id",
        "warehouse_id"
      ],
      "title": "Location",
      "type": "object"
    },
    "LocationControl": {
      "description": "Location Control",
      "properties": {
        "comment": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "new_stock_state_id": {
          "type": "integer"
        },
        "prev_stock_state_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Location Control",
      "type": "object"
    },
    "LocationProductCategory": {
      "description": "Location Product Category",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "product_category_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Location Product Category",
      "type": "object"
    },
    "LocationProductLock": {
      "description": "Location Product Lock",
      "properties": {
        "id": {
          "type": "integer"
        },
        "location_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        }
      },
      "title": "Location Product Lock",
      "type": "object"
    },
    "LocationResponse": {
      "description": "Created Location Response",
      "properties": {
        "code": {
          "description": "Location code",
          "type": "string"
        },
        "id": {
          "description": "Location id",
          "type": "integer"
        }
      },
      "required": [
        "code",
        "id"
      ],
      "title": "Created Location Response",
      "type": "object"
    },
    "LocationType": {
      "description": "Location Type",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Location Type",
      "type": "object"
    },
    "LocationZoneDistance": {
      "description": "Location Zone Distance",
      "properties": {
        "distance": {
          "type": "number"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "zone_id": {
          "type": "integer"
        }
      },
      "title": "Location Zone Distance",
      "type": "object"
    },
    "Merchant": {
      "description": "Merchant",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "city": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "fulfillment_warehouse_id": {
          "type": "integer"
        },
        "full_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "site": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array"
        },
        "zip_code": {
          "type": "string"
        }
      },
      "title": "Merchant",
      "type": "object"
    },
    "Message": {
      "description": "Message",
      "properties": {
        "body": {
          "type": "string"
        },
        "checked": {
          "type": "boolean"
        },
        "event": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Message",
      "type": "object"
    },
    "Metadata": {
      "description": "Metadata",
      "properties": {
        "app": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "last_url": {
          "type": "string"
        }
      },
      "title": "Metadata",
      "type": "object"
    },
    "MissingProduct": {
      "description": "Missing Product",
      "properties": {
        "cart_box_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        }
      },
      "title": "Missing Product",
      "type": "object"
    },
    "OrderState": {
      "description": "Order State",
      "properties": {
        "id": {
          "type": "integer"
        },
        "order_type": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        }
      },
      "title": "Order State",
      "type": "object"
    },
    "OwnerUser": {
      "properties": {
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "last_name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PackingBox": {
      "description": "Packing Box",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "box_number": {
          "type": "integer"
        },
        "height": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/PackingBoxItem"
          },
          "type": "array"
        },
        "length": {
          "type": "number"
        },
        "loaded_shipping_box_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "packing_order_id": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "weight": {
          "type": "number"
        },
        "width": {
          "type": "number"
        }
      },
      "title": "Packing Box",
      "type": "object"
    },
    "PackingBoxItem": {
      "description": "Packing Box Item",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "line_order_id": {
          "type": "string"
        },
        "packing_box_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Packing Box Item",
      "type": "object"
    },
    "PackingItem": {
      "description": "Packing Item",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "packed_quantity": {
          "type": "integer"
        },
        "packing_order_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "requested_quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Packing Item",
      "type": "object"
    },
    "PackingItemBatch": {
      "description": "Packing Item Batch",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "cart_box_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "packing_item_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Packing Item Batch",
      "type": "object"
    },
    "PackingOrder": {
      "description": "Packing Order",
      "properties": {
        "destination_location_id": {
          "type": "integer"
        },
        "end_date": {
          "type": "string"
        },
        "fulfillment_order_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/PackingItem"
          },
          "type": "array"
        },
        "origin_location_id": {
          "type": "integer"
        },
        "owner_id": {
          "type": "integer"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "sales_order_ref": {
          "type": "string"
        },
        "sequence_number": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Packing Order",
      "type": "object"
    },
    "PackingOrderStateTransition": {
      "description": "Packing Order State Transition",
      "properties": {
        "id": {
          "type": "integer"
        },
        "new_state": {
          "type": "string"
        },
        "packing_order_id": {
          "type": "integer"
        },
        "performer_id": {
          "type": "integer"
        },
        "previous_state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Packing Order State Transition",
      "type": "object"
    },
    "ParamsActionRequest": {
      "description": "Params Packing Actions Request",
      "properties": {
        "packing_order_id": {
          "description": "Packing order id",
          "type": "integer"
        },
        "shipping_location_id": {
          "description": "Shipping location id",
          "type": "integer"
        }
      },
      "required": [
        "shipping_location_id",
        "packing_order_id"
      ],
      "title": "Params Packing Actions Request",
      "type": "object"
    },
    "Patch": {
      "description": "Patch",
      "properties": {
        "id": {
          "type": "integer"
        },
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Patch",
      "type": "object"
    },
    "Permission": {
      "description": "Permission",
      "properties": {
        "action": {
          "type": "string"
        },
        "controller": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        }
      },
      "title": "Permission",
      "type": "object"
    },
    "PickingItem": {
      "description": "Picking Item",
      "properties": {
        "fulfillment_order_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "picked_quantity": {
          "type": "integer"
        },
        "picking_order_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "requested_quantity": {
          "type": "integer"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Picking Item",
      "type": "object"
    },
    "PickingItemBatch": {
      "description": "Picking Item Batch",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "cart_box_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "origin_location_id": {
          "type": "integer"
        },
        "picking_item_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Picking Item Batch",
      "type": "object"
    },
    "PickingItemRequest": {
      "description": "Picking Item Request",
      "properties": {
        "product_id": {
          "description": "Product id of the requested item",
          "type": "integer"
        },
        "requested_quantity": {
          "description": "Request item's quantity",
          "type": "integer"
        },
        "sales_order_id": {
          "description": "Origin sales order",
          "type": "integer"
        }
      },
      "required": [
        "sales_order_id",
        "requested_quantity"
      ],
      "title": "Picking Item Request",
      "type": "object"
    },
    "PickingOrder": {
      "description": "Picking Order",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "creator_id": {
          "type": "integer"
        },
        "end_date": {
          "type": "string"
        },
        "from_return_locations": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/PickingItem"
          },
          "type": "array"
        },
        "notes": {
          "type": "string"
        },
        "owner_id": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "turbo_label_standard_pick": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Picking Order",
      "type": "object"
    },
    "PickingOrderRequest": {
      "description": "Picking Order Request",
      "properties": {
        "items": {
          "description": "Items for the picking order",
          "items": {
            "$ref": "#/definitions/PickingItemRequest"
          },
          "type": "array"
        },
        "warehouse_id": {
          "description": "Origin warehouse to which the order belongs to",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "warehouse_id"
      ],
      "title": "Picking Order Request",
      "type": "object"
    },
    "PickingRequest": {
      "description": "Picking Request",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "creator_id": {
          "type": "integer"
        },
        "from_return_locations": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "items": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "owner_id": {
          "type": "integer"
        },
        "turbo_label_standard_pick": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Picking Request",
      "type": "object"
    },
    "PrintStation": {
      "description": "Print Station",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "mac_address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Print Station",
      "type": "object"
    },
    "Process": {
      "description": "Process",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reason_codes": {
          "items": {
            "$ref": "#/definitions/ReasonCode"
          },
          "type": "array"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Process",
      "type": "object"
    },
    "ProcessInformation": {
      "description": "Process Information",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "errors": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "process": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Process Information",
      "type": "object"
    },
    "Product": {
      "description": "Product",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "attributes": {
          "type": "string"
        },
        "barcodes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "batch_control": {
          "type": "boolean"
        },
        "cost_price": {
          "type": "number"
        },
        "deprecated_supplier_product_id": {
          "type": "string"
        },
        "height": {
          "type": "number"
        },
        "hs_code": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "length": {
          "type": "number"
        },
        "management_type": {
          "type": "string"
        },
        "merchant_id": {
          "type": "integer"
        },
        "minimum_purchase_unit": {
          "type": "integer"
        },
        "minimum_sales_unit": {
          "type": "integer"
        },
        "origin_country": {
          "type": "string"
        },
        "product_categories": {
          "items": {
            "$ref": "#/definitions/ProductCategory"
          },
          "type": "array"
        },
        "purchase_measure_units": {
          "type": "string"
        },
        "sales_measure_units": {
          "type": "string"
        },
        "stackable": {
          "type": "boolean"
        },
        "tenant_id": {
          "type": "integer"
        },
        "units_per_pallet": {
          "type": "integer"
        },
        "units_per_purchase_package": {
          "type": "integer"
        },
        "units_per_sales_package": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "volume": {
          "type": "number"
        },
        "weight": {
          "type": "number"
        },
        "width": {
          "type": "number"
        }
      },
      "title": "Product",
      "type": "object"
    },
    "ProductCategory": {
      "description": "Product Category",
      "properties": {
        "code": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Product Category",
      "type": "object"
    },
    "ProductListRequest": {
      "description": "list of products",
      "items": {
        "$ref": "#/definitions/Product"
      },
      "title": "Products Actions Request",
      "type": "array"
    },
    "ProductProductCategory": {
      "description": "Product Product Category",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "product_category_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Product Product Category",
      "type": "object"
    },
    "ProductQuantityAlert": {
      "description": "Product Quantity Alert",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        }
      },
      "title": "Product Quantity Alert",
      "type": "object"
    },
    "ProductReference": {
      "properties": {
        "id": {
          "description": "Product id",
          "type": "integer"
        },
        "sku": {
          "description": "Product sku",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductReferenceIdList": {
      "items": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      },
      "type": "array"
    },
    "ProductReferenceSkuList": {
      "items": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "array"
    },
    "ProductReferenceStructList": {
      "items": {
        "$ref": "#/definitions/ProductReference"
      },
      "type": "array"
    },
    "ProductReport": {
      "description": "Product Report",
      "properties": {
        "name": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "sku": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        }
      },
      "title": "Product Report",
      "type": "object"
    },
    "ProductResponse": {
      "description": "Created Product Response",
      "properties": {
        "id": {
          "description": "Product id",
          "type": "integer"
        },
        "sku": {
          "description": "Product SKU",
          "type": "string"
        }
      },
      "required": [
        "sku",
        "id"
      ],
      "title": "Created Product Response",
      "type": "object"
    },
    "ProductSku": {
      "description": "Product Sku",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "merchant_channel_ids": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "merchant_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "sku": {
          "type": "string"
        },
        "supplier_product_id": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "third_party_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Product Sku",
      "type": "object"
    },
    "ProductSkuChannel": {
      "description": "Product Sku Channel",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "sku_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Product Sku Channel",
      "type": "object"
    },
    "Profile": {
      "description": "Profile",
      "properties": {
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/Permission"
          },
          "type": "array"
        }
      },
      "title": "Profile",
      "type": "object"
    },
    "ProfilePermission": {
      "description": "Profile Permission",
      "properties": {
        "id": {
          "type": "integer"
        },
        "permission_id": {
          "type": "integer"
        },
        "profile_id": {
          "type": "integer"
        }
      },
      "title": "Profile Permission",
      "type": "object"
    },
    "PurchaseItem": {
      "description": "Purchase Item",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "checked_quantity": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "line_item_number": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "purchase_order_id": {
          "type": "integer"
        },
        "reason_codes": {
          "items": {
            "$ref": "#/definitions/ReasonCode"
          },
          "type": "array"
        },
        "requested_quantity": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Purchase Item",
      "type": "object"
    },
    "PurchaseItemPackaging": {
      "description": "Purchase Item Packaging",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "barcode": {
          "type": "string"
        },
        "barcode_agency": {
          "type": "string"
        },
        "batch_expiration_date": {
          "type": "string"
        },
        "batch_number": {
          "type": "string"
        },
        "dimensions_height": {
          "type": "number"
        },
        "dimensions_length": {
          "type": "number"
        },
        "dimensions_weight": {
          "type": "number"
        },
        "dimensions_width": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "line_item_number": {
          "type": "string"
        },
        "location_level_barcode": {
          "type": "string"
        },
        "packaging_level": {
          "type": "integer"
        },
        "packaging_type": {
          "type": "string"
        },
        "purchase_item_id": {
          "type": "integer"
        },
        "quantity_in_package": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Purchase Item Packaging",
      "type": "object"
    },
    "PurchaseOrder": {
      "properties": {
        "attributes": {
          "type": "string"
        },
        "criterium": {
          "type": "string"
        },
        "delivery_date": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/PurchaseItem"
          },
          "type": "array"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "notes": {
          "type": "string"
        },
        "number_finished_early_events": {
          "type": "integer"
        },
        "order_num": {
          "type": "string"
        },
        "order_state_id": {
          "type": "integer"
        },
        "packagings": {
          "items": {
            "$ref": "#/definitions/PurchaseItemPackaging"
          },
          "type": "array"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "supplier_id": {
          "type": "string"
        },
        "supplier_name": {
          "type": "string"
        },
        "third_party_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PurchaseOrderReference": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "order_num": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PurchaseOrderReferenceIdList": {
      "items": {
        "type": "integer"
      },
      "type": "array"
    },
    "PurchaseOrderReferenceOrderNumList": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "PurchaseOrderReferenceStructList": {
      "items": {
        "$ref": "#/definitions/PurchaseOrderReference"
      },
      "type": "array"
    },
    "PurchaseOrderResponse": {
      "description": "Purchase orders Response",
      "properties": {
        "id": {
          "description": "Purchase order id",
          "type": "integer"
        },
        "order_num": {
          "description": "Purchase order num",
          "type": "string"
        }
      },
      "required": [
        "order_num",
        "id"
      ],
      "title": "Purchase orders Response",
      "type": "object"
    },
    "Rack": {
      "description": "Rack",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "attributes": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "deleted_at": {
          "type": "string"
        },
        "deleted_by": {
          "type": "integer"
        },
        "hallway": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_defined": {
          "type": "boolean"
        },
        "position_height": {
          "type": "integer"
        },
        "position_left": {
          "type": "integer"
        },
        "position_top": {
          "type": "integer"
        },
        "position_width": {
          "type": "integer"
        },
        "row": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "zone_id": {
          "type": "integer"
        }
      },
      "required": [
        "position_left",
        "position_top",
        "position_width",
        "position_height",
        "is_defined",
        "zone_id"
      ],
      "title": "Rack",
      "type": "object"
    },
    "ReasonCode": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "allowed_processes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "code": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "internal_reason": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReasonCodeRequest": {
      "properties": {
        "id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReasonCodesProcesses": {
      "description": "Reason Codes Processes",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "process_id": {
          "type": "integer"
        },
        "reason_code_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Reason Codes Processes",
      "type": "object"
    },
    "ReplenishmentItem": {
      "description": "Replenishment Item",
      "properties": {
        "confirmed_quantity": {
          "type": "integer"
        },
        "destination_location_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "loading_unit_location_id": {
          "type": "integer"
        },
        "origin_location_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "replenishment_order_id": {
          "type": "integer"
        },
        "requested_quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Replenishment Item",
      "type": "object"
    },
    "ReplenishmentItemBatch": {
      "description": "Replenishment Item Batch",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "replenishment_item_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Replenishment Item Batch",
      "type": "object"
    },
    "ReplenishmentOrder": {
      "description": "Replenishment Order",
      "properties": {
        "end_date": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/ReplenishmentItem"
          },
          "type": "array"
        },
        "owner_id": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Replenishment Order",
      "type": "object"
    },
    "ReplenishmentRouteItem": {
      "description": "Replenishment Route Item",
      "properties": {
        "action": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "replenishment_item_id": {
          "type": "integer"
        },
        "stocks": {
          "type": "string"
        }
      },
      "title": "Replenishment Route Item",
      "type": "object"
    },
    "RequestList_Address": {
      "description": "Address Request List",
      "items": {
        "$ref": "#/definitions/Address"
      },
      "title": "Addresses Request List",
      "type": "array"
    },
    "RequestList_AddressDetail": {
      "description": "AddressDetail Request List",
      "items": {
        "$ref": "#/definitions/AddressDetail"
      },
      "title": "Address Details Request List",
      "type": "array"
    },
    "RequestList_ApiRate": {
      "description": "ApiRate Request List",
      "items": {
        "$ref": "#/definitions/ApiRate"
      },
      "title": "Api Rates Request List",
      "type": "array"
    },
    "RequestList_Attachment": {
      "description": "Attachment Request List",
      "items": {
        "$ref": "#/definitions/Attachment"
      },
      "title": "Attachments Request List",
      "type": "array"
    },
    "RequestList_AvailabilityBatch": {
      "description": "AvailabilityBatch Request List",
      "items": {
        "$ref": "#/definitions/AvailabilityBatch"
      },
      "title": "Availability Batches Request List",
      "type": "array"
    },
    "RequestList_Barcode": {
      "description": "Barcode Request List",
      "items": {
        "$ref": "#/definitions/Barcode"
      },
      "title": "Barcodes Request List",
      "type": "array"
    },
    "RequestList_Batch": {
      "description": "Batch Request List",
      "items": {
        "$ref": "#/definitions/Batch"
      },
      "title": "Batches Request List",
      "type": "array"
    },
    "RequestList_CartBox": {
      "description": "CartBox Request List",
      "items": {
        "$ref": "#/definitions/CartBox"
      },
      "title": "Cart Boxes Request List",
      "type": "array"
    },
    "RequestList_Channel": {
      "description": "Channel Request List",
      "items": {
        "$ref": "#/definitions/Channel"
      },
      "title": "Channels Request List",
      "type": "array"
    },
    "RequestList_ClientLogRequest": {
      "description": "ClientLogRequest Request List",
      "items": {
        "$ref": "#/definitions/ClientLogRequest"
      },
      "title": "Client Log Requests Request List",
      "type": "array"
    },
    "RequestList_Connection": {
      "description": "Connection Request List",
      "items": {
        "$ref": "#/definitions/Connection"
      },
      "title": "Connections Request List",
      "type": "array"
    },
    "RequestList_CountingItem": {
      "description": "CountingItem Request List",
      "items": {
        "$ref": "#/definitions/CountingItem"
      },
      "title": "Counting Items Request List",
      "type": "array"
    },
    "RequestList_CountingItemReasonCode": {
      "description": "CountingItemReasonCode Request List",
      "items": {
        "$ref": "#/definitions/CountingItemReasonCode"
      },
      "title": "Counting Item Reason Codes Request List",
      "type": "array"
    },
    "RequestList_CountingTask": {
      "description": "CountingTask Request List",
      "items": {
        "$ref": "#/definitions/CountingTask"
      },
      "title": "Counting Tasks Request List",
      "type": "array"
    },
    "RequestList_CountingTaskReasonCode": {
      "description": "CountingTaskReasonCode Request List",
      "items": {
        "$ref": "#/definitions/CountingTaskReasonCode"
      },
      "title": "Counting Task Reason Codes Request List",
      "type": "array"
    },
    "RequestList_Country": {
      "description": "Country Request List",
      "items": {
        "$ref": "#/definitions/Country"
      },
      "title": "Countries Request List",
      "type": "array"
    },
    "RequestList_CountryAlias": {
      "description": "CountryAlias Request List",
      "items": {
        "$ref": "#/definitions/CountryAlias"
      },
      "title": "Country Aliases Request List",
      "type": "array"
    },
    "RequestList_CustomRouteRule": {
      "description": "CustomRouteRule Request List",
      "items": {
        "$ref": "#/definitions/CustomRouteRule"
      },
      "title": "Custom Route Rules Request List",
      "type": "array"
    },
    "RequestList_DailySummaryStat": {
      "description": "DailySummaryStat Request List",
      "items": {
        "$ref": "#/definitions/DailySummaryStat"
      },
      "title": "Daily Summary Stats Request List",
      "type": "array"
    },
    "RequestList_Device": {
      "description": "Device Request List",
      "items": {
        "$ref": "#/definitions/Device"
      },
      "title": "Devices Request List",
      "type": "array"
    },
    "RequestList_DocumentSequence": {
      "description": "DocumentSequence Request List",
      "items": {
        "$ref": "#/definitions/DocumentSequence"
      },
      "title": "Document Sequences Request List",
      "type": "array"
    },
    "RequestList_Event": {
      "description": "Event Request List",
      "items": {
        "$ref": "#/definitions/Event"
      },
      "title": "Events Request List",
      "type": "array"
    },
    "RequestList_EventLog": {
      "description": "EventLog Request List",
      "items": {
        "$ref": "#/definitions/EventLog"
      },
      "title": "Event Logs Request List",
      "type": "array"
    },
    "RequestList_FetchLocationStrategy": {
      "description": "FetchLocationStrategy Request List",
      "items": {
        "$ref": "#/definitions/FetchLocationStrategy"
      },
      "title": "Fetch Location Strategies Request List",
      "type": "array"
    },
    "RequestList_FinishPickingRequest": {
      "description": "FinishPickingRequest Request List",
      "items": {
        "$ref": "#/definitions/FinishPickingRequest"
      },
      "title": "Finish Picking Requests Request List",
      "type": "array"
    },
    "RequestList_FulfillmentItem": {
      "description": "FulfillmentItem Request List",
      "items": {
        "$ref": "#/definitions/FulfillmentItem"
      },
      "title": "Fulfillment Items Request List",
      "type": "array"
    },
    "RequestList_FulfillmentItemBatch": {
      "description": "FulfillmentItemBatch Request List",
      "items": {
        "$ref": "#/definitions/FulfillmentItemBatch"
      },
      "title": "Fulfillment Item Batches Request List",
      "type": "array"
    },
    "RequestList_FulfillmentOrder": {
      "description": "FulfillmentOrder Request List",
      "items": {
        "$ref": "#/definitions/FulfillmentOrder"
      },
      "title": "Fulfillment Orders Request List",
      "type": "array"
    },
    "RequestList_IncomingGood": {
      "description": "IncomingGood Request List",
      "items": {
        "$ref": "#/definitions/IncomingGood"
      },
      "title": "Incoming Goods Request List",
      "type": "array"
    },
    "RequestList_IncomingGoodItem": {
      "description": "IncomingGoodItem Request List",
      "items": {
        "$ref": "#/definitions/IncomingGoodItem"
      },
      "title": "Incoming Good Items Request List",
      "type": "array"
    },
    "RequestList_IncomingGoodItemPackaging": {
      "description": "IncomingGoodItemPackaging Request List",
      "items": {
        "$ref": "#/definitions/IncomingGoodItemPackaging"
      },
      "title": "Incoming Good Item Packagings Request List",
      "type": "array"
    },
    "RequestList_IncomingGoodItemPackingBox": {
      "description": "IncomingGoodItemPackingBox Request List",
      "items": {
        "$ref": "#/definitions/IncomingGoodItemPackingBox"
      },
      "title": "Incoming Good Item Packing Boxes Request List",
      "type": "array"
    },
    "RequestList_Inventory": {
      "description": "Inventory Request List",
      "items": {
        "$ref": "#/definitions/Inventory"
      },
      "title": "Inventories Request List",
      "type": "array"
    },
    "RequestList_Kit": {
      "description": "Kit Request List",
      "items": {
        "$ref": "#/definitions/Kit"
      },
      "title": "Kits Request List",
      "type": "array"
    },
    "RequestList_KitItem": {
      "description": "KitItem Request List",
      "items": {
        "$ref": "#/definitions/KitItem"
      },
      "title": "Kit Items Request List",
      "type": "array"
    },
    "RequestList_KittingItem": {
      "description": "KittingItem Request List",
      "items": {
        "$ref": "#/definitions/KittingItem"
      },
      "title": "Kitting Items Request List",
      "type": "array"
    },
    "RequestList_KittingReplenishment": {
      "description": "KittingReplenishment Request List",
      "items": {
        "$ref": "#/definitions/KittingReplenishment"
      },
      "title": "Kitting Replenishments Request List",
      "type": "array"
    },
    "RequestList_KittingTask": {
      "description": "KittingTask Request List",
      "items": {
        "$ref": "#/definitions/KittingTask"
      },
      "title": "Kitting Tasks Request List",
      "type": "array"
    },
    "RequestList_LoadedShippingBox": {
      "description": "LoadedShippingBox Request List",
      "items": {
        "$ref": "#/definitions/LoadedShippingBox"
      },
      "title": "Loaded Shipping Boxes Request List",
      "type": "array"
    },
    "RequestList_LoadedShippingBoxUserTransition": {
      "description": "LoadedShippingBoxUserTransition Request List",
      "items": {
        "$ref": "#/definitions/LoadedShippingBoxUserTransition"
      },
      "title": "Loaded Shipping Box User Transitions Request List",
      "type": "array"
    },
    "RequestList_LoadingUnitTemplate": {
      "description": "LoadingUnitTemplate Request List",
      "items": {
        "$ref": "#/definitions/LoadingUnitTemplate"
      },
      "title": "Loading Unit Templates Request List",
      "type": "array"
    },
    "RequestList_Location": {
      "description": "Location Request List",
      "items": {
        "$ref": "#/definitions/Location"
      },
      "title": "Locations Request List",
      "type": "array"
    },
    "RequestList_LocationControl": {
      "description": "LocationControl Request List",
      "items": {
        "$ref": "#/definitions/LocationControl"
      },
      "title": "Location Controls Request List",
      "type": "array"
    },
    "RequestList_LocationProductCategory": {
      "description": "LocationProductCategory Request List",
      "items": {
        "$ref": "#/definitions/LocationProductCategory"
      },
      "title": "Location Product Categories Request List",
      "type": "array"
    },
    "RequestList_LocationProductLock": {
      "description": "LocationProductLock Request List",
      "items": {
        "$ref": "#/definitions/LocationProductLock"
      },
      "title": "Location Product Locks Request List",
      "type": "array"
    },
    "RequestList_LocationType": {
      "description": "LocationType Request List",
      "items": {
        "$ref": "#/definitions/LocationType"
      },
      "title": "Location Types Request List",
      "type": "array"
    },
    "RequestList_LocationZoneDistance": {
      "description": "LocationZoneDistance Request List",
      "items": {
        "$ref": "#/definitions/LocationZoneDistance"
      },
      "title": "Location Zone Distances Request List",
      "type": "array"
    },
    "RequestList_Merchant": {
      "description": "Merchant Request List",
      "items": {
        "$ref": "#/definitions/Merchant"
      },
      "title": "Merchants Request List",
      "type": "array"
    },
    "RequestList_Message": {
      "description": "Message Request List",
      "items": {
        "$ref": "#/definitions/Message"
      },
      "title": "Messages Request List",
      "type": "array"
    },
    "RequestList_Metadata": {
      "description": "Metadata Request List",
      "items": {
        "$ref": "#/definitions/Metadata"
      },
      "title": "Metadata Request List",
      "type": "array"
    },
    "RequestList_MissingProduct": {
      "description": "MissingProduct Request List",
      "items": {
        "$ref": "#/definitions/MissingProduct"
      },
      "title": "Missing Products Request List",
      "type": "array"
    },
    "RequestList_OrderState": {
      "description": "OrderState Request List",
      "items": {
        "$ref": "#/definitions/OrderState"
      },
      "title": "Order States Request List",
      "type": "array"
    },
    "RequestList_PackingBox": {
      "description": "PackingBox Request List",
      "items": {
        "$ref": "#/definitions/PackingBox"
      },
      "title": "Packing Boxes Request List",
      "type": "array"
    },
    "RequestList_PackingBoxItem": {
      "description": "PackingBoxItem Request List",
      "items": {
        "$ref": "#/definitions/PackingBoxItem"
      },
      "title": "Packing Box Items Request List",
      "type": "array"
    },
    "RequestList_PackingItem": {
      "description": "PackingItem Request List",
      "items": {
        "$ref": "#/definitions/PackingItem"
      },
      "title": "Packing Items Request List",
      "type": "array"
    },
    "RequestList_PackingItemBatch": {
      "description": "PackingItemBatch Request List",
      "items": {
        "$ref": "#/definitions/PackingItemBatch"
      },
      "title": "Packing Item Batches Request List",
      "type": "array"
    },
    "RequestList_PackingOrder": {
      "description": "PackingOrder Request List",
      "items": {
        "$ref": "#/definitions/PackingOrder"
      },
      "title": "Packing Orders Request List",
      "type": "array"
    },
    "RequestList_PackingOrderStateTransition": {
      "description": "PackingOrderStateTransition Request List",
      "items": {
        "$ref": "#/definitions/PackingOrderStateTransition"
      },
      "title": "Packing Order State Transitions Request List",
      "type": "array"
    },
    "RequestList_Patch": {
      "description": "Patch Request List",
      "items": {
        "$ref": "#/definitions/Patch"
      },
      "title": "Patches Request List",
      "type": "array"
    },
    "RequestList_Permission": {
      "description": "Permission Request List",
      "items": {
        "$ref": "#/definitions/Permission"
      },
      "title": "Permissions Request List",
      "type": "array"
    },
    "RequestList_PickingItem": {
      "description": "PickingItem Request List",
      "items": {
        "$ref": "#/definitions/PickingItem"
      },
      "title": "Picking Items Request List",
      "type": "array"
    },
    "RequestList_PickingItemBatch": {
      "description": "PickingItemBatch Request List",
      "items": {
        "$ref": "#/definitions/PickingItemBatch"
      },
      "title": "Picking Item Batches Request List",
      "type": "array"
    },
    "RequestList_PickingOrder": {
      "description": "PickingOrder Request List",
      "items": {
        "$ref": "#/definitions/PickingOrder"
      },
      "title": "Picking Orders Request List",
      "type": "array"
    },
    "RequestList_PickingRequest": {
      "description": "PickingRequest Request List",
      "items": {
        "$ref": "#/definitions/PickingRequest"
      },
      "title": "Picking Requests Request List",
      "type": "array"
    },
    "RequestList_PrintStation": {
      "description": "PrintStation Request List",
      "items": {
        "$ref": "#/definitions/PrintStation"
      },
      "title": "Print Stations Request List",
      "type": "array"
    },
    "RequestList_Process": {
      "description": "Process Request List",
      "items": {
        "$ref": "#/definitions/Process"
      },
      "title": "Processes Request List",
      "type": "array"
    },
    "RequestList_ProcessInformation": {
      "description": "ProcessInformation Request List",
      "items": {
        "$ref": "#/definitions/ProcessInformation"
      },
      "title": "Process Informations Request List",
      "type": "array"
    },
    "RequestList_Product": {
      "description": "Product Request List",
      "items": {
        "$ref": "#/definitions/Product"
      },
      "title": "Products Request List",
      "type": "array"
    },
    "RequestList_ProductCategory": {
      "description": "ProductCategory Request List",
      "items": {
        "$ref": "#/definitions/ProductCategory"
      },
      "title": "Product Categories Request List",
      "type": "array"
    },
    "RequestList_ProductProductCategory": {
      "description": "ProductProductCategory Request List",
      "items": {
        "$ref": "#/definitions/ProductProductCategory"
      },
      "title": "Product Product Categories Request List",
      "type": "array"
    },
    "RequestList_ProductQuantityAlert": {
      "description": "ProductQuantityAlert Request List",
      "items": {
        "$ref": "#/definitions/ProductQuantityAlert"
      },
      "title": "Product Quantity Alerts Request List",
      "type": "array"
    },
    "RequestList_ProductReport": {
      "description": "ProductReport Request List",
      "items": {
        "$ref": "#/definitions/ProductReport"
      },
      "title": "Product Reports Request List",
      "type": "array"
    },
    "RequestList_ProductSku": {
      "description": "ProductSku Request List",
      "items": {
        "$ref": "#/definitions/ProductSku"
      },
      "title": "Product Skus Request List",
      "type": "array"
    },
    "RequestList_ProductSkuChannel": {
      "description": "ProductSkuChannel Request List",
      "items": {
        "$ref": "#/definitions/ProductSkuChannel"
      },
      "title": "Product Sku Channels Request List",
      "type": "array"
    },
    "RequestList_Profile": {
      "description": "Profile Request List",
      "items": {
        "$ref": "#/definitions/Profile"
      },
      "title": "Profiles Request List",
      "type": "array"
    },
    "RequestList_ProfilePermission": {
      "description": "ProfilePermission Request List",
      "items": {
        "$ref": "#/definitions/ProfilePermission"
      },
      "title": "Profile Permissions Request List",
      "type": "array"
    },
    "RequestList_PurchaseItem": {
      "description": "PurchaseItem Request List",
      "items": {
        "$ref": "#/definitions/PurchaseItem"
      },
      "title": "Purchase Items Request List",
      "type": "array"
    },
    "RequestList_PurchaseItemPackaging": {
      "description": "PurchaseItemPackaging Request List",
      "items": {
        "$ref": "#/definitions/PurchaseItemPackaging"
      },
      "title": "Purchase Item Packagings Request List",
      "type": "array"
    },
    "RequestList_PurchaseOrder": {
      "description": "PurchaseOrder Request List",
      "items": {
        "$ref": "#/definitions/PurchaseOrder"
      },
      "title": "Purchase Orders Request List",
      "type": "array"
    },
    "RequestList_Rack": {
      "description": "Rack Request List",
      "items": {
        "$ref": "#/definitions/Rack"
      },
      "title": "Racks Request List",
      "type": "array"
    },
    "RequestList_ReasonCode": {
      "description": "ReasonCode Request List",
      "items": {
        "$ref": "#/definitions/ReasonCode"
      },
      "title": "Reason Codes Request List",
      "type": "array"
    },
    "RequestList_ReasonCodesProcesses": {
      "description": "ReasonCodesProcesses Request List",
      "items": {
        "$ref": "#/definitions/ReasonCodesProcesses"
      },
      "title": "Reason Codes Processes Request List",
      "type": "array"
    },
    "RequestList_ReplenishmentItem": {
      "description": "ReplenishmentItem Request List",
      "items": {
        "$ref": "#/definitions/ReplenishmentItem"
      },
      "title": "Replenishment Items Request List",
      "type": "array"
    },
    "RequestList_ReplenishmentItemBatch": {
      "description": "ReplenishmentItemBatch Request List",
      "items": {
        "$ref": "#/definitions/ReplenishmentItemBatch"
      },
      "title": "Replenishment Item Batches Request List",
      "type": "array"
    },
    "RequestList_ReplenishmentOrder": {
      "description": "ReplenishmentOrder Request List",
      "items": {
        "$ref": "#/definitions/ReplenishmentOrder"
      },
      "title": "Replenishment Orders Request List",
      "type": "array"
    },
    "RequestList_ReplenishmentRouteItem": {
      "description": "ReplenishmentRouteItem Request List",
      "items": {
        "$ref": "#/definitions/ReplenishmentRouteItem"
      },
      "title": "Replenishment Route Items Request List",
      "type": "array"
    },
    "RequestList_ReturnLabel": {
      "description": "ReturnLabel Request List",
      "items": {
        "$ref": "#/definitions/ReturnLabel"
      },
      "title": "Return Labels Request List",
      "type": "array"
    },
    "RequestList_RouteItem": {
      "description": "RouteItem Request List",
      "items": {
        "$ref": "#/definitions/RouteItem"
      },
      "title": "Route Items Request List",
      "type": "array"
    },
    "RequestList_SalesItem": {
      "description": "SalesItem Request List",
      "items": {
        "$ref": "#/definitions/SalesItem"
      },
      "title": "Sales Items Request List",
      "type": "array"
    },
    "RequestList_SalesItemBatch": {
      "description": "SalesItemBatch Request List",
      "items": {
        "$ref": "#/definitions/SalesItemBatch"
      },
      "title": "Sales Item Batches Request List",
      "type": "array"
    },
    "RequestList_SalesOrder": {
      "description": "SalesOrder Request List",
      "items": {
        "$ref": "#/definitions/SalesOrder"
      },
      "title": "Sales Orders Request List",
      "type": "array"
    },
    "RequestList_SalesOrderReasonCode": {
      "description": "SalesOrderReasonCode Request List",
      "items": {
        "$ref": "#/definitions/SalesOrderReasonCode"
      },
      "title": "Sales Order Reason Codes Request List",
      "type": "array"
    },
    "RequestList_SalesOrderStateTransition": {
      "description": "SalesOrderStateTransition Request List",
      "items": {
        "$ref": "#/definitions/SalesOrderStateTransition"
      },
      "title": "Sales Order State Transitions Request List",
      "type": "array"
    },
    "RequestList_SalesShipmentInstruction": {
      "description": "SalesShipmentInstruction Request List",
      "items": {
        "$ref": "#/definitions/SalesShipmentInstruction"
      },
      "title": "Sales Shipment Instructions Request List",
      "type": "array"
    },
    "RequestList_Setting": {
      "description": "Setting Request List",
      "items": {
        "$ref": "#/definitions/Setting"
      },
      "title": "Settings Request List",
      "type": "array"
    },
    "RequestList_ShipmentBoxTemplate": {
      "description": "ShipmentBoxTemplate Request List",
      "items": {
        "$ref": "#/definitions/ShipmentBoxTemplate"
      },
      "title": "Shipment Box Templates Request List",
      "type": "array"
    },
    "RequestList_ShipmentInstructionStop": {
      "description": "ShipmentInstructionStop Request List",
      "items": {
        "$ref": "#/definitions/ShipmentInstructionStop"
      },
      "title": "Shipment Instruction Stops Request List",
      "type": "array"
    },
    "RequestList_ShipmentTracking": {
      "description": "ShipmentTracking Request List",
      "items": {
        "$ref": "#/definitions/ShipmentTracking"
      },
      "title": "Shipment Trackings Request List",
      "type": "array"
    },
    "RequestList_ShippingItem": {
      "description": "ShippingItem Request List",
      "items": {
        "$ref": "#/definitions/ShippingItem"
      },
      "title": "Shipping Items Request List",
      "type": "array"
    },
    "RequestList_ShippingMethod": {
      "description": "ShippingMethod Request List",
      "items": {
        "$ref": "#/definitions/ShippingMethod"
      },
      "title": "Shipping Methods Request List",
      "type": "array"
    },
    "RequestList_ShippingOrder": {
      "description": "ShippingOrder Request List",
      "items": {
        "$ref": "#/definitions/ShippingOrder"
      },
      "title": "Shipping Orders Request List",
      "type": "array"
    },
    "RequestList_SocketPermission": {
      "description": "SocketPermission Request List",
      "items": {
        "$ref": "#/definitions/SocketPermission"
      },
      "title": "Socket Permissions Request List",
      "type": "array"
    },
    "RequestList_SocketProfile": {
      "description": "SocketProfile Request List",
      "items": {
        "$ref": "#/definitions/SocketProfile"
      },
      "title": "Socket Profiles Request List",
      "type": "array"
    },
    "RequestList_SocketProfileSocketPermission": {
      "description": "SocketProfileSocketPermission Request List",
      "items": {
        "$ref": "#/definitions/SocketProfileSocketPermission"
      },
      "title": "Socket Profile Socket Permissions Request List",
      "type": "array"
    },
    "RequestList_SplitReplenishmentItem": {
      "description": "SplitReplenishmentItem Request List",
      "items": {
        "$ref": "#/definitions/SplitReplenishmentItem"
      },
      "title": "Split Replenishment Items Request List",
      "type": "array"
    },
    "RequestList_Stock": {
      "description": "Stock Request List",
      "items": {
        "$ref": "#/definitions/Stock"
      },
      "title": "Stocks Request List",
      "type": "array"
    },
    "RequestList_StockCorrection": {
      "description": "StockCorrection Request List",
      "items": {
        "$ref": "#/definitions/StockCorrection"
      },
      "title": "Stock Corrections Request List",
      "type": "array"
    },
    "RequestList_StockCorrectionItem": {
      "description": "StockCorrectionItem Request List",
      "items": {
        "$ref": "#/definitions/StockCorrectionItem"
      },
      "title": "Stock Correction Items Request List",
      "type": "array"
    },
    "RequestList_StockLoadingUnit": {
      "description": "StockLoadingUnit Request List",
      "items": {
        "$ref": "#/definitions/StockLoadingUnit"
      },
      "title": "Stock Loading Units Request List",
      "type": "array"
    },
    "RequestList_StockModification": {
      "description": "StockModification Request List",
      "items": {
        "$ref": "#/definitions/StockModification"
      },
      "title": "Stock Modifications Request List",
      "type": "array"
    },
    "RequestList_StockMovement": {
      "description": "StockMovement Request List",
      "items": {
        "$ref": "#/definitions/StockMovement"
      },
      "title": "Stock Movements Request List",
      "type": "array"
    },
    "RequestList_StockRecord": {
      "description": "StockRecord Request List",
      "items": {
        "$ref": "#/definitions/StockRecord"
      },
      "title": "Stock Records Request List",
      "type": "array"
    },
    "RequestList_StockState": {
      "description": "StockState Request List",
      "items": {
        "$ref": "#/definitions/StockState"
      },
      "title": "Stock States Request List",
      "type": "array"
    },
    "RequestList_StockStockLoadingUnit": {
      "description": "StockStockLoadingUnit Request List",
      "items": {
        "$ref": "#/definitions/StockStockLoadingUnit"
      },
      "title": "Stock Stock Loading Units Request List",
      "type": "array"
    },
    "RequestList_StockThreshold": {
      "description": "StockThreshold Request List",
      "items": {
        "$ref": "#/definitions/StockThreshold"
      },
      "title": "Stock Thresholds Request List",
      "type": "array"
    },
    "RequestList_StockThresholdCategory": {
      "description": "StockThresholdCategory Request List",
      "items": {
        "$ref": "#/definitions/StockThresholdCategory"
      },
      "title": "Stock Threshold Categories Request List",
      "type": "array"
    },
    "RequestList_SuggestedBatch": {
      "description": "SuggestedBatch Request List",
      "items": {
        "$ref": "#/definitions/SuggestedBatch"
      },
      "title": "Suggested Batches Request List",
      "type": "array"
    },
    "RequestList_Tenant": {
      "description": "Tenant Request List",
      "items": {
        "$ref": "#/definitions/Tenant"
      },
      "title": "Tenants Request List",
      "type": "array"
    },
    "RequestList_ThirdParty": {
      "description": "ThirdParty Request List",
      "items": {
        "$ref": "#/definitions/ThirdParty"
      },
      "title": "Third Parties Request List",
      "type": "array"
    },
    "RequestList_User": {
      "description": "User Request List",
      "items": {
        "$ref": "#/definitions/User"
      },
      "title": "Users Request List",
      "type": "array"
    },
    "RequestList_UserProductCategory": {
      "description": "UserProductCategory Request List",
      "items": {
        "$ref": "#/definitions/UserProductCategory"
      },
      "title": "User Product Categories Request List",
      "type": "array"
    },
    "RequestList_UserProfile": {
      "description": "UserProfile Request List",
      "items": {
        "$ref": "#/definitions/UserProfile"
      },
      "title": "User Profiles Request List",
      "type": "array"
    },
    "RequestList_UserSession": {
      "description": "UserSession Request List",
      "items": {
        "$ref": "#/definitions/UserSession"
      },
      "title": "User Sessions Request List",
      "type": "array"
    },
    "RequestList_UserSocketProfile": {
      "description": "UserSocketProfile Request List",
      "items": {
        "$ref": "#/definitions/UserSocketProfile"
      },
      "title": "User Socket Profiles Request List",
      "type": "array"
    },
    "RequestList_UserWarehouse": {
      "description": "UserWarehouse Request List",
      "items": {
        "$ref": "#/definitions/UserWarehouse"
      },
      "title": "User Warehouses Request List",
      "type": "array"
    },
    "RequestList_Warehouse": {
      "description": "Warehouse Request List",
      "items": {
        "$ref": "#/definitions/Warehouse"
      },
      "title": "Warehouses Request List",
      "type": "array"
    },
    "RequestList_WarehouseAlias": {
      "description": "WarehouseAlias Request List",
      "items": {
        "$ref": "#/definitions/WarehouseAlias"
      },
      "title": "Warehouse Aliases Request List",
      "type": "array"
    },
    "RequestList_Webhook": {
      "description": "Webhook Request List",
      "items": {
        "$ref": "#/definitions/Webhook"
      },
      "title": "Webhooks Request List",
      "type": "array"
    },
    "RequestList_WebhookClient": {
      "description": "WebhookClient Request List",
      "items": {
        "$ref": "#/definitions/WebhookClient"
      },
      "title": "Webhook Clients Request List",
      "type": "array"
    },
    "RequestList_WebhookCredential": {
      "description": "WebhookCredential Request List",
      "items": {
        "$ref": "#/definitions/WebhookCredential"
      },
      "title": "Webhook Credentials Request List",
      "type": "array"
    },
    "RequestList_Zone": {
      "description": "Zone Request List",
      "items": {
        "$ref": "#/definitions/Zone"
      },
      "title": "Zones Request List",
      "type": "array"
    },
    "RequestList_ZoneSequence": {
      "description": "ZoneSequence Request List",
      "items": {
        "$ref": "#/definitions/ZoneSequence"
      },
      "title": "Zone Sequences Request List",
      "type": "array"
    },
    "ResponseList_Address": {
      "description": "Address Response List",
      "properties": {
        "addresses": {
          "items": {
            "$ref": "#/definitions/Address"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Addresses Response List",
      "type": "object"
    },
    "ResponseList_AddressDetail": {
      "description": "AddressDetail Response List",
      "properties": {
        "address_details": {
          "items": {
            "$ref": "#/definitions/AddressDetail"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Address Details Response List",
      "type": "object"
    },
    "ResponseList_ApiRate": {
      "description": "ApiRate Response List",
      "properties": {
        "api_rates": {
          "items": {
            "$ref": "#/definitions/ApiRate"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Api Rates Response List",
      "type": "object"
    },
    "ResponseList_Attachment": {
      "description": "Attachment Response List",
      "properties": {
        "attachments": {
          "items": {
            "$ref": "#/definitions/Attachment"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Attachments Response List",
      "type": "object"
    },
    "ResponseList_AvailabilityBatch": {
      "description": "AvailabilityBatch Response List",
      "properties": {
        "availability_batches": {
          "items": {
            "$ref": "#/definitions/AvailabilityBatch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Availability Batches Response List",
      "type": "object"
    },
    "ResponseList_Barcode": {
      "description": "Barcode Response List",
      "properties": {
        "barcodes": {
          "items": {
            "$ref": "#/definitions/Barcode"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Barcodes Response List",
      "type": "object"
    },
    "ResponseList_Batch": {
      "description": "Batch Response List",
      "properties": {
        "batches": {
          "items": {
            "$ref": "#/definitions/Batch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Batches Response List",
      "type": "object"
    },
    "ResponseList_CartBox": {
      "description": "CartBox Response List",
      "properties": {
        "cart_boxes": {
          "items": {
            "$ref": "#/definitions/CartBox"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Cart Boxes Response List",
      "type": "object"
    },
    "ResponseList_Channel": {
      "description": "Channel Response List",
      "properties": {
        "channels": {
          "items": {
            "$ref": "#/definitions/Channel"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Channels Response List",
      "type": "object"
    },
    "ResponseList_ClientLogRequest": {
      "description": "ClientLogRequest Response List",
      "properties": {
        "client_log_requests": {
          "items": {
            "$ref": "#/definitions/ClientLogRequest"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Client Log Requests Response List",
      "type": "object"
    },
    "ResponseList_Connection": {
      "description": "Connection Response List",
      "properties": {
        "connections": {
          "items": {
            "$ref": "#/definitions/Connection"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Connections Response List",
      "type": "object"
    },
    "ResponseList_CountingItem": {
      "description": "CountingItem Response List",
      "properties": {
        "counting_items": {
          "items": {
            "$ref": "#/definitions/CountingItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Counting Items Response List",
      "type": "object"
    },
    "ResponseList_CountingItemReasonCode": {
      "description": "CountingItemReasonCode Response List",
      "properties": {
        "counting_item_reason_codes": {
          "items": {
            "$ref": "#/definitions/CountingItemReasonCode"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Counting Item Reason Codes Response List",
      "type": "object"
    },
    "ResponseList_CountingTask": {
      "description": "CountingTask Response List",
      "properties": {
        "counting_tasks": {
          "items": {
            "$ref": "#/definitions/CountingTask"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Counting Tasks Response List",
      "type": "object"
    },
    "ResponseList_CountingTaskReasonCode": {
      "description": "CountingTaskReasonCode Response List",
      "properties": {
        "counting_task_reason_codes": {
          "items": {
            "$ref": "#/definitions/CountingTaskReasonCode"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Counting Task Reason Codes Response List",
      "type": "object"
    },
    "ResponseList_Country": {
      "description": "Country Response List",
      "properties": {
        "countries": {
          "items": {
            "$ref": "#/definitions/Country"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Countries Response List",
      "type": "object"
    },
    "ResponseList_CountryAlias": {
      "description": "CountryAlias Response List",
      "properties": {
        "country_aliases": {
          "items": {
            "$ref": "#/definitions/CountryAlias"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Country Aliases Response List",
      "type": "object"
    },
    "ResponseList_CustomRouteRule": {
      "description": "CustomRouteRule Response List",
      "properties": {
        "custom_route_rules": {
          "items": {
            "$ref": "#/definitions/CustomRouteRule"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Custom Route Rules Response List",
      "type": "object"
    },
    "ResponseList_DailySummaryStat": {
      "description": "DailySummaryStat Response List",
      "properties": {
        "daily_summary_stats": {
          "items": {
            "$ref": "#/definitions/DailySummaryStat"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Daily Summary Stats Response List",
      "type": "object"
    },
    "ResponseList_Device": {
      "description": "Device Response List",
      "properties": {
        "devices": {
          "items": {
            "$ref": "#/definitions/Device"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Devices Response List",
      "type": "object"
    },
    "ResponseList_DocumentSequence": {
      "description": "DocumentSequence Response List",
      "properties": {
        "document_sequences": {
          "items": {
            "$ref": "#/definitions/DocumentSequence"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Document Sequences Response List",
      "type": "object"
    },
    "ResponseList_Event": {
      "description": "Event Response List",
      "properties": {
        "events": {
          "items": {
            "$ref": "#/definitions/Event"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Events Response List",
      "type": "object"
    },
    "ResponseList_EventLog": {
      "description": "EventLog Response List",
      "properties": {
        "event_logs": {
          "items": {
            "$ref": "#/definitions/EventLog"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Event Logs Response List",
      "type": "object"
    },
    "ResponseList_FetchLocationStrategy": {
      "description": "FetchLocationStrategy Response List",
      "properties": {
        "fetch_location_strategies": {
          "items": {
            "$ref": "#/definitions/FetchLocationStrategy"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Fetch Location Strategies Response List",
      "type": "object"
    },
    "ResponseList_FinishPickingRequest": {
      "description": "FinishPickingRequest Response List",
      "properties": {
        "finish_picking_requests": {
          "items": {
            "$ref": "#/definitions/FinishPickingRequest"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Finish Picking Requests Response List",
      "type": "object"
    },
    "ResponseList_FulfillmentItem": {
      "description": "FulfillmentItem Response List",
      "properties": {
        "fulfillment_items": {
          "items": {
            "$ref": "#/definitions/FulfillmentItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Fulfillment Items Response List",
      "type": "object"
    },
    "ResponseList_FulfillmentItemBatch": {
      "description": "FulfillmentItemBatch Response List",
      "properties": {
        "fulfillment_item_batches": {
          "items": {
            "$ref": "#/definitions/FulfillmentItemBatch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Fulfillment Item Batches Response List",
      "type": "object"
    },
    "ResponseList_FulfillmentOrder": {
      "description": "FulfillmentOrder Response List",
      "properties": {
        "fulfillment_orders": {
          "items": {
            "$ref": "#/definitions/FulfillmentOrder"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Fulfillment Orders Response List",
      "type": "object"
    },
    "ResponseList_IncomingGood": {
      "description": "IncomingGood Response List",
      "properties": {
        "incoming_goods": {
          "items": {
            "$ref": "#/definitions/IncomingGood"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Incoming Goods Response List",
      "type": "object"
    },
    "ResponseList_IncomingGoodItem": {
      "description": "IncomingGoodItem Response List",
      "properties": {
        "incoming_good_items": {
          "items": {
            "$ref": "#/definitions/IncomingGoodItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Incoming Good Items Response List",
      "type": "object"
    },
    "ResponseList_IncomingGoodItemPackaging": {
      "description": "IncomingGoodItemPackaging Response List",
      "properties": {
        "incoming_good_item_packagings": {
          "items": {
            "$ref": "#/definitions/IncomingGoodItemPackaging"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Incoming Good Item Packagings Response List",
      "type": "object"
    },
    "ResponseList_IncomingGoodItemPackingBox": {
      "description": "IncomingGoodItemPackingBox Response List",
      "properties": {
        "incoming_good_item_packing_boxes": {
          "items": {
            "$ref": "#/definitions/IncomingGoodItemPackingBox"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Incoming Good Item Packing Boxes Response List",
      "type": "object"
    },
    "ResponseList_Inventory": {
      "description": "Inventory Response List",
      "properties": {
        "inventories": {
          "items": {
            "$ref": "#/definitions/Inventory"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Inventories Response List",
      "type": "object"
    },
    "ResponseList_Kit": {
      "description": "Kit Response List",
      "properties": {
        "kits": {
          "items": {
            "$ref": "#/definitions/Kit"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Kits Response List",
      "type": "object"
    },
    "ResponseList_KitItem": {
      "description": "KitItem Response List",
      "properties": {
        "kit_items": {
          "items": {
            "$ref": "#/definitions/KitItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Kit Items Response List",
      "type": "object"
    },
    "ResponseList_KittingItem": {
      "description": "KittingItem Response List",
      "properties": {
        "kitting_items": {
          "items": {
            "$ref": "#/definitions/KittingItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Kitting Items Response List",
      "type": "object"
    },
    "ResponseList_KittingReplenishment": {
      "description": "KittingReplenishment Response List",
      "properties": {
        "kitting_replenishments": {
          "items": {
            "$ref": "#/definitions/KittingReplenishment"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Kitting Replenishments Response List",
      "type": "object"
    },
    "ResponseList_KittingTask": {
      "description": "KittingTask Response List",
      "properties": {
        "kitting_tasks": {
          "items": {
            "$ref": "#/definitions/KittingTask"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Kitting Tasks Response List",
      "type": "object"
    },
    "ResponseList_LoadedShippingBox": {
      "description": "LoadedShippingBox Response List",
      "properties": {
        "loaded_shipping_boxes": {
          "items": {
            "$ref": "#/definitions/LoadedShippingBox"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Loaded Shipping Boxes Response List",
      "type": "object"
    },
    "ResponseList_LoadedShippingBoxUserTransition": {
      "description": "LoadedShippingBoxUserTransition Response List",
      "properties": {
        "loaded_shipping_box_user_transitions": {
          "items": {
            "$ref": "#/definitions/LoadedShippingBoxUserTransition"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Loaded Shipping Box User Transitions Response List",
      "type": "object"
    },
    "ResponseList_LoadingUnitTemplate": {
      "description": "LoadingUnitTemplate Response List",
      "properties": {
        "loading_unit_templates": {
          "items": {
            "$ref": "#/definitions/LoadingUnitTemplate"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Loading Unit Templates Response List",
      "type": "object"
    },
    "ResponseList_Location": {
      "description": "Location Response List",
      "properties": {
        "locations": {
          "items": {
            "$ref": "#/definitions/Location"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Locations Response List",
      "type": "object"
    },
    "ResponseList_LocationControl": {
      "description": "LocationControl Response List",
      "properties": {
        "location_controls": {
          "items": {
            "$ref": "#/definitions/LocationControl"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Location Controls Response List",
      "type": "object"
    },
    "ResponseList_LocationProductCategory": {
      "description": "LocationProductCategory Response List",
      "properties": {
        "location_product_categories": {
          "items": {
            "$ref": "#/definitions/LocationProductCategory"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Location Product Categories Response List",
      "type": "object"
    },
    "ResponseList_LocationProductLock": {
      "description": "LocationProductLock Response List",
      "properties": {
        "location_product_locks": {
          "items": {
            "$ref": "#/definitions/LocationProductLock"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Location Product Locks Response List",
      "type": "object"
    },
    "ResponseList_LocationType": {
      "description": "LocationType Response List",
      "properties": {
        "location_types": {
          "items": {
            "$ref": "#/definitions/LocationType"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Location Types Response List",
      "type": "object"
    },
    "ResponseList_LocationZoneDistance": {
      "description": "LocationZoneDistance Response List",
      "properties": {
        "location_zone_distances": {
          "items": {
            "$ref": "#/definitions/LocationZoneDistance"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Location Zone Distances Response List",
      "type": "object"
    },
    "ResponseList_Merchant": {
      "description": "Merchant Response List",
      "properties": {
        "merchants": {
          "items": {
            "$ref": "#/definitions/Merchant"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Merchants Response List",
      "type": "object"
    },
    "ResponseList_Message": {
      "description": "Message Response List",
      "properties": {
        "messages": {
          "items": {
            "$ref": "#/definitions/Message"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Messages Response List",
      "type": "object"
    },
    "ResponseList_Metadata": {
      "description": "Metadata Response List",
      "properties": {
        "metadata": {
          "items": {
            "$ref": "#/definitions/Metadata"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Metadata Response List",
      "type": "object"
    },
    "ResponseList_MissingProduct": {
      "description": "MissingProduct Response List",
      "properties": {
        "missing_products": {
          "items": {
            "$ref": "#/definitions/MissingProduct"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Missing Products Response List",
      "type": "object"
    },
    "ResponseList_OrderState": {
      "description": "OrderState Response List",
      "properties": {
        "order_states": {
          "items": {
            "$ref": "#/definitions/OrderState"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Order States Response List",
      "type": "object"
    },
    "ResponseList_PackingBox": {
      "description": "PackingBox Response List",
      "properties": {
        "packing_boxes": {
          "items": {
            "$ref": "#/definitions/PackingBox"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Packing Boxes Response List",
      "type": "object"
    },
    "ResponseList_PackingBoxItem": {
      "description": "PackingBoxItem Response List",
      "properties": {
        "packing_box_items": {
          "items": {
            "$ref": "#/definitions/PackingBoxItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Packing Box Items Response List",
      "type": "object"
    },
    "ResponseList_PackingItem": {
      "description": "PackingItem Response List",
      "properties": {
        "packing_items": {
          "items": {
            "$ref": "#/definitions/PackingItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Packing Items Response List",
      "type": "object"
    },
    "ResponseList_PackingItemBatch": {
      "description": "PackingItemBatch Response List",
      "properties": {
        "packing_item_batches": {
          "items": {
            "$ref": "#/definitions/PackingItemBatch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Packing Item Batches Response List",
      "type": "object"
    },
    "ResponseList_PackingOrder": {
      "description": "PackingOrder Response List",
      "properties": {
        "packing_orders": {
          "items": {
            "$ref": "#/definitions/PackingOrder"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Packing Orders Response List",
      "type": "object"
    },
    "ResponseList_PackingOrderStateTransition": {
      "description": "PackingOrderStateTransition Response List",
      "properties": {
        "packing_order_state_transitions": {
          "items": {
            "$ref": "#/definitions/PackingOrderStateTransition"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Packing Order State Transitions Response List",
      "type": "object"
    },
    "ResponseList_Patch": {
      "description": "Patch Response List",
      "properties": {
        "patches": {
          "items": {
            "$ref": "#/definitions/Patch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Patches Response List",
      "type": "object"
    },
    "ResponseList_Permission": {
      "description": "Permission Response List",
      "properties": {
        "permissions": {
          "items": {
            "$ref": "#/definitions/Permission"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Permissions Response List",
      "type": "object"
    },
    "ResponseList_PickingItem": {
      "description": "PickingItem Response List",
      "properties": {
        "picking_items": {
          "items": {
            "$ref": "#/definitions/PickingItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Picking Items Response List",
      "type": "object"
    },
    "ResponseList_PickingItemBatch": {
      "description": "PickingItemBatch Response List",
      "properties": {
        "picking_item_batches": {
          "items": {
            "$ref": "#/definitions/PickingItemBatch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Picking Item Batches Response List",
      "type": "object"
    },
    "ResponseList_PickingOrder": {
      "description": "PickingOrder Response List",
      "properties": {
        "picking_orders": {
          "items": {
            "$ref": "#/definitions/PickingOrder"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Picking Orders Response List",
      "type": "object"
    },
    "ResponseList_PickingRequest": {
      "description": "PickingRequest Response List",
      "properties": {
        "picking_requests": {
          "items": {
            "$ref": "#/definitions/PickingRequest"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Picking Requests Response List",
      "type": "object"
    },
    "ResponseList_PrintStation": {
      "description": "PrintStation Response List",
      "properties": {
        "print_stations": {
          "items": {
            "$ref": "#/definitions/PrintStation"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Print Stations Response List",
      "type": "object"
    },
    "ResponseList_Process": {
      "description": "Process Response List",
      "properties": {
        "processes": {
          "items": {
            "$ref": "#/definitions/Process"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Processes Response List",
      "type": "object"
    },
    "ResponseList_ProcessInformation": {
      "description": "ProcessInformation Response List",
      "properties": {
        "process_informations": {
          "items": {
            "$ref": "#/definitions/ProcessInformation"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Process Informations Response List",
      "type": "object"
    },
    "ResponseList_Product": {
      "description": "Product Response List",
      "properties": {
        "products": {
          "items": {
            "$ref": "#/definitions/Product"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Products Response List",
      "type": "object"
    },
    "ResponseList_ProductCategory": {
      "description": "ProductCategory Response List",
      "properties": {
        "product_categories": {
          "items": {
            "$ref": "#/definitions/ProductCategory"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Product Categories Response List",
      "type": "object"
    },
    "ResponseList_ProductProductCategory": {
      "description": "ProductProductCategory Response List",
      "properties": {
        "product_product_categories": {
          "items": {
            "$ref": "#/definitions/ProductProductCategory"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Product Product Categories Response List",
      "type": "object"
    },
    "ResponseList_ProductQuantityAlert": {
      "description": "ProductQuantityAlert Response List",
      "properties": {
        "product_quantity_alerts": {
          "items": {
            "$ref": "#/definitions/ProductQuantityAlert"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Product Quantity Alerts Response List",
      "type": "object"
    },
    "ResponseList_ProductReport": {
      "description": "ProductReport Response List",
      "properties": {
        "product_reports": {
          "items": {
            "$ref": "#/definitions/ProductReport"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Product Reports Response List",
      "type": "object"
    },
    "ResponseList_ProductSku": {
      "description": "ProductSku Response List",
      "properties": {
        "product_skus": {
          "items": {
            "$ref": "#/definitions/ProductSku"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Product Skus Response List",
      "type": "object"
    },
    "ResponseList_ProductSkuChannel": {
      "description": "ProductSkuChannel Response List",
      "properties": {
        "product_sku_channels": {
          "items": {
            "$ref": "#/definitions/ProductSkuChannel"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Product Sku Channels Response List",
      "type": "object"
    },
    "ResponseList_Profile": {
      "description": "Profile Response List",
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/Profile"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Profiles Response List",
      "type": "object"
    },
    "ResponseList_ProfilePermission": {
      "description": "ProfilePermission Response List",
      "properties": {
        "profile_permissions": {
          "items": {
            "$ref": "#/definitions/ProfilePermission"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Profile Permissions Response List",
      "type": "object"
    },
    "ResponseList_PurchaseItem": {
      "description": "PurchaseItem Response List",
      "properties": {
        "purchase_items": {
          "items": {
            "$ref": "#/definitions/PurchaseItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Purchase Items Response List",
      "type": "object"
    },
    "ResponseList_PurchaseItemPackaging": {
      "description": "PurchaseItemPackaging Response List",
      "properties": {
        "purchase_item_packagings": {
          "items": {
            "$ref": "#/definitions/PurchaseItemPackaging"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Purchase Item Packagings Response List",
      "type": "object"
    },
    "ResponseList_PurchaseOrder": {
      "description": "PurchaseOrder Response List",
      "properties": {
        "purchase_orders": {
          "items": {
            "$ref": "#/definitions/PurchaseOrder"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Purchase Orders Response List",
      "type": "object"
    },
    "ResponseList_Rack": {
      "description": "Rack Response List",
      "properties": {
        "racks": {
          "items": {
            "$ref": "#/definitions/Rack"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Racks Response List",
      "type": "object"
    },
    "ResponseList_ReasonCode": {
      "description": "ReasonCode Response List",
      "properties": {
        "reason_codes": {
          "items": {
            "$ref": "#/definitions/ReasonCode"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Reason Codes Response List",
      "type": "object"
    },
    "ResponseList_ReasonCodesProcesses": {
      "description": "ReasonCodesProcesses Response List",
      "properties": {
        "reason_codes_processes": {
          "items": {
            "$ref": "#/definitions/ReasonCodesProcesses"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Reason Codes Processes Response List",
      "type": "object"
    },
    "ResponseList_ReplenishmentItem": {
      "description": "ReplenishmentItem Response List",
      "properties": {
        "replenishment_items": {
          "items": {
            "$ref": "#/definitions/ReplenishmentItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Replenishment Items Response List",
      "type": "object"
    },
    "ResponseList_ReplenishmentItemBatch": {
      "description": "ReplenishmentItemBatch Response List",
      "properties": {
        "replenishment_item_batches": {
          "items": {
            "$ref": "#/definitions/ReplenishmentItemBatch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Replenishment Item Batches Response List",
      "type": "object"
    },
    "ResponseList_ReplenishmentOrder": {
      "description": "ReplenishmentOrder Response List",
      "properties": {
        "replenishment_orders": {
          "items": {
            "$ref": "#/definitions/ReplenishmentOrder"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Replenishment Orders Response List",
      "type": "object"
    },
    "ResponseList_ReplenishmentRouteItem": {
      "description": "ReplenishmentRouteItem Response List",
      "properties": {
        "replenishment_route_items": {
          "items": {
            "$ref": "#/definitions/ReplenishmentRouteItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Replenishment Route Items Response List",
      "type": "object"
    },
    "ResponseList_ReturnLabel": {
      "description": "ReturnLabel Response List",
      "properties": {
        "return_labels": {
          "items": {
            "$ref": "#/definitions/ReturnLabel"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Return Labels Response List",
      "type": "object"
    },
    "ResponseList_RouteItem": {
      "description": "RouteItem Response List",
      "properties": {
        "route_items": {
          "items": {
            "$ref": "#/definitions/RouteItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Route Items Response List",
      "type": "object"
    },
    "ResponseList_SalesItem": {
      "description": "SalesItem Response List",
      "properties": {
        "sales_items": {
          "items": {
            "$ref": "#/definitions/SalesItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Sales Items Response List",
      "type": "object"
    },
    "ResponseList_SalesItemBatch": {
      "description": "SalesItemBatch Response List",
      "properties": {
        "sales_item_batches": {
          "items": {
            "$ref": "#/definitions/SalesItemBatch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Sales Item Batches Response List",
      "type": "object"
    },
    "ResponseList_SalesOrder": {
      "description": "SalesOrder Response List",
      "properties": {
        "sales_orders": {
          "items": {
            "$ref": "#/definitions/SalesOrder"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Sales Orders Response List",
      "type": "object"
    },
    "ResponseList_SalesOrderReasonCode": {
      "description": "SalesOrderReasonCode Response List",
      "properties": {
        "sales_order_reason_codes": {
          "items": {
            "$ref": "#/definitions/SalesOrderReasonCode"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Sales Order Reason Codes Response List",
      "type": "object"
    },
    "ResponseList_SalesOrderStateTransition": {
      "description": "SalesOrderStateTransition Response List",
      "properties": {
        "sales_order_state_transitions": {
          "items": {
            "$ref": "#/definitions/SalesOrderStateTransition"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Sales Order State Transitions Response List",
      "type": "object"
    },
    "ResponseList_SalesShipmentInstruction": {
      "description": "SalesShipmentInstruction Response List",
      "properties": {
        "sales_shipment_instructions": {
          "items": {
            "$ref": "#/definitions/SalesShipmentInstruction"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Sales Shipment Instructions Response List",
      "type": "object"
    },
    "ResponseList_Setting": {
      "description": "Setting Response List",
      "properties": {
        "settings": {
          "items": {
            "$ref": "#/definitions/Setting"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Settings Response List",
      "type": "object"
    },
    "ResponseList_ShipmentBoxTemplate": {
      "description": "ShipmentBoxTemplate Response List",
      "properties": {
        "shipment_box_templates": {
          "items": {
            "$ref": "#/definitions/ShipmentBoxTemplate"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Shipment Box Templates Response List",
      "type": "object"
    },
    "ResponseList_ShipmentInstructionStop": {
      "description": "ShipmentInstructionStop Response List",
      "properties": {
        "shipment_instruction_stops": {
          "items": {
            "$ref": "#/definitions/ShipmentInstructionStop"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Shipment Instruction Stops Response List",
      "type": "object"
    },
    "ResponseList_ShipmentTracking": {
      "description": "ShipmentTracking Response List",
      "properties": {
        "shipment_trackings": {
          "items": {
            "$ref": "#/definitions/ShipmentTracking"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Shipment Trackings Response List",
      "type": "object"
    },
    "ResponseList_ShippingItem": {
      "description": "ShippingItem Response List",
      "properties": {
        "shipping_items": {
          "items": {
            "$ref": "#/definitions/ShippingItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Shipping Items Response List",
      "type": "object"
    },
    "ResponseList_ShippingMethod": {
      "description": "ShippingMethod Response List",
      "properties": {
        "shipping_methods": {
          "items": {
            "$ref": "#/definitions/ShippingMethod"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Shipping Methods Response List",
      "type": "object"
    },
    "ResponseList_ShippingOrder": {
      "description": "ShippingOrder Response List",
      "properties": {
        "shipping_orders": {
          "items": {
            "$ref": "#/definitions/ShippingOrder"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Shipping Orders Response List",
      "type": "object"
    },
    "ResponseList_SocketPermission": {
      "description": "SocketPermission Response List",
      "properties": {
        "socket_permissions": {
          "items": {
            "$ref": "#/definitions/SocketPermission"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Socket Permissions Response List",
      "type": "object"
    },
    "ResponseList_SocketProfile": {
      "description": "SocketProfile Response List",
      "properties": {
        "socket_profiles": {
          "items": {
            "$ref": "#/definitions/SocketProfile"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Socket Profiles Response List",
      "type": "object"
    },
    "ResponseList_SocketProfileSocketPermission": {
      "description": "SocketProfileSocketPermission Response List",
      "properties": {
        "socket_profile_socket_permissions": {
          "items": {
            "$ref": "#/definitions/SocketProfileSocketPermission"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Socket Profile Socket Permissions Response List",
      "type": "object"
    },
    "ResponseList_SplitReplenishmentItem": {
      "description": "SplitReplenishmentItem Response List",
      "properties": {
        "split_replenishment_items": {
          "items": {
            "$ref": "#/definitions/SplitReplenishmentItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Split Replenishment Items Response List",
      "type": "object"
    },
    "ResponseList_Stock": {
      "description": "Stock Response List",
      "properties": {
        "stocks": {
          "items": {
            "$ref": "#/definitions/Stock"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stocks Response List",
      "type": "object"
    },
    "ResponseList_StockCorrection": {
      "description": "StockCorrection Response List",
      "properties": {
        "stock_corrections": {
          "items": {
            "$ref": "#/definitions/StockCorrection"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Corrections Response List",
      "type": "object"
    },
    "ResponseList_StockCorrectionItem": {
      "description": "StockCorrectionItem Response List",
      "properties": {
        "stock_correction_items": {
          "items": {
            "$ref": "#/definitions/StockCorrectionItem"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Correction Items Response List",
      "type": "object"
    },
    "ResponseList_StockLoadingUnit": {
      "description": "StockLoadingUnit Response List",
      "properties": {
        "stock_loading_units": {
          "items": {
            "$ref": "#/definitions/StockLoadingUnit"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Loading Units Response List",
      "type": "object"
    },
    "ResponseList_StockModification": {
      "description": "StockModification Response List",
      "properties": {
        "stock_modifications": {
          "items": {
            "$ref": "#/definitions/StockModification"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Modifications Response List",
      "type": "object"
    },
    "ResponseList_StockMovement": {
      "description": "StockMovement Response List",
      "properties": {
        "stock_movements": {
          "items": {
            "$ref": "#/definitions/StockMovement"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Movements Response List",
      "type": "object"
    },
    "ResponseList_StockRecord": {
      "description": "StockRecord Response List",
      "properties": {
        "stock_records": {
          "items": {
            "$ref": "#/definitions/StockRecord"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Records Response List",
      "type": "object"
    },
    "ResponseList_StockState": {
      "description": "StockState Response List",
      "properties": {
        "stock_states": {
          "items": {
            "$ref": "#/definitions/StockState"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock States Response List",
      "type": "object"
    },
    "ResponseList_StockStockLoadingUnit": {
      "description": "StockStockLoadingUnit Response List",
      "properties": {
        "stock_stock_loading_units": {
          "items": {
            "$ref": "#/definitions/StockStockLoadingUnit"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Stock Loading Units Response List",
      "type": "object"
    },
    "ResponseList_StockThreshold": {
      "description": "StockThreshold Response List",
      "properties": {
        "stock_thresholds": {
          "items": {
            "$ref": "#/definitions/StockThreshold"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Thresholds Response List",
      "type": "object"
    },
    "ResponseList_StockThresholdCategory": {
      "description": "StockThresholdCategory Response List",
      "properties": {
        "stock_threshold_categories": {
          "items": {
            "$ref": "#/definitions/StockThresholdCategory"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Stock Threshold Categories Response List",
      "type": "object"
    },
    "ResponseList_SuggestedBatch": {
      "description": "SuggestedBatch Response List",
      "properties": {
        "suggested_batches": {
          "items": {
            "$ref": "#/definitions/SuggestedBatch"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Suggested Batches Response List",
      "type": "object"
    },
    "ResponseList_Tenant": {
      "description": "Tenant Response List",
      "properties": {
        "tenants": {
          "items": {
            "$ref": "#/definitions/Tenant"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Tenants Response List",
      "type": "object"
    },
    "ResponseList_ThirdParty": {
      "description": "ThirdParty Response List",
      "properties": {
        "third_parties": {
          "items": {
            "$ref": "#/definitions/ThirdParty"
          },
          "type": "array"
        },
        "total_results": {
          "type": "integer"
        }
      },
      "title": "Third Parties Response List",
      "type": "object"
    },
    "ResponseList_User": {
      "description": "User Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array"
        }
      },
      "title": "Users Response List",
      "type": "object"
    },
    "ResponseList_UserProductCategory": {
      "description": "UserProductCategory Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "user_product_categories": {
          "items": {
            "$ref": "#/definitions/UserProductCategory"
          },
          "type": "array"
        }
      },
      "title": "User Product Categories Response List",
      "type": "object"
    },
    "ResponseList_UserProfile": {
      "description": "UserProfile Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "user_profiles": {
          "items": {
            "$ref": "#/definitions/UserProfile"
          },
          "type": "array"
        }
      },
      "title": "User Profiles Response List",
      "type": "object"
    },
    "ResponseList_UserSession": {
      "description": "UserSession Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "user_sessions": {
          "items": {
            "$ref": "#/definitions/UserSession"
          },
          "type": "array"
        }
      },
      "title": "User Sessions Response List",
      "type": "object"
    },
    "ResponseList_UserSocketProfile": {
      "description": "UserSocketProfile Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "user_socket_profiles": {
          "items": {
            "$ref": "#/definitions/UserSocketProfile"
          },
          "type": "array"
        }
      },
      "title": "User Socket Profiles Response List",
      "type": "object"
    },
    "ResponseList_UserWarehouse": {
      "description": "UserWarehouse Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "user_warehouses": {
          "items": {
            "$ref": "#/definitions/UserWarehouse"
          },
          "type": "array"
        }
      },
      "title": "User Warehouses Response List",
      "type": "object"
    },
    "ResponseList_Warehouse": {
      "description": "Warehouse Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "warehouses": {
          "items": {
            "$ref": "#/definitions/Warehouse"
          },
          "type": "array"
        }
      },
      "title": "Warehouses Response List",
      "type": "object"
    },
    "ResponseList_WarehouseAlias": {
      "description": "WarehouseAlias Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "warehouse_aliases": {
          "items": {
            "$ref": "#/definitions/WarehouseAlias"
          },
          "type": "array"
        }
      },
      "title": "Warehouse Aliases Response List",
      "type": "object"
    },
    "ResponseList_Webhook": {
      "description": "Webhook Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "webhooks": {
          "items": {
            "$ref": "#/definitions/Webhook"
          },
          "type": "array"
        }
      },
      "title": "Webhooks Response List",
      "type": "object"
    },
    "ResponseList_WebhookClient": {
      "description": "WebhookClient Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "webhook_clients": {
          "items": {
            "$ref": "#/definitions/WebhookClient"
          },
          "type": "array"
        }
      },
      "title": "Webhook Clients Response List",
      "type": "object"
    },
    "ResponseList_WebhookCredential": {
      "description": "WebhookCredential Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "webhook_credentials": {
          "items": {
            "$ref": "#/definitions/WebhookCredential"
          },
          "type": "array"
        }
      },
      "title": "Webhook Credentials Response List",
      "type": "object"
    },
    "ResponseList_Zone": {
      "description": "Zone Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "zones": {
          "items": {
            "$ref": "#/definitions/Zone"
          },
          "type": "array"
        }
      },
      "title": "Zones Response List",
      "type": "object"
    },
    "ResponseList_ZoneSequence": {
      "description": "ZoneSequence Response List",
      "properties": {
        "total_results": {
          "type": "integer"
        },
        "zone_sequences": {
          "items": {
            "$ref": "#/definitions/ZoneSequence"
          },
          "type": "array"
        }
      },
      "title": "Zone Sequences Response List",
      "type": "object"
    },
    "ReturnLabel": {
      "description": "Return Label",
      "properties": {
        "id": {
          "type": "integer"
        },
        "return_code": {
          "type": "string"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "tenant_id": {
          "type": "integer"
        }
      },
      "title": "Return Label",
      "type": "object"
    },
    "ReturnLabelCodes": {
      "description": "A list of return label code",
      "items": {
        "type": "string"
      },
      "title": "Return Label codes",
      "type": "array"
    },
    "RouteItem": {
      "description": "Route Item",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "picking_item_id": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "requested_quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Route Item",
      "type": "object"
    },
    "SalesItem": {
      "properties": {
        "attributes": {
          "type": "string"
        },
        "batches": {
          "items": {
            "$ref": "#/definitions/SalesItemBatch"
          },
          "type": "array"
        },
        "fulfilled_quantity": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "line_order_id": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "required_date": {
          "type": "string"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SalesItemBatch": {
      "description": "Sales Item Batch",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "sales_item_id": {
          "type": "integer"
        },
        "suggested_quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "required": [
        "suggested_quantity",
        "batch_id"
      ],
      "title": "Sales Item Batch",
      "type": "object"
    },
    "SalesItemBatchRequest": {
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "suggested_quantity": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesItemBodyRequest": {
      "properties": {
        "attributes": {
          "type": "string"
        },
        "batches": {
          "items": {
            "$ref": "#/definitions/SalesItemBatchRequest"
          },
          "type": "array"
        },
        "line_order_id": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "required_date": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SalesOrder": {
      "properties": {
        "attributes": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "client_name": {
          "type": "string"
        },
        "creator_id": {
          "type": "integer"
        },
        "criterium": {
          "type": "string"
        },
        "custom_route_rule_id": {
          "type": "integer"
        },
        "delivery_date": {
          "type": "string"
        },
        "destination_warehouse_id": {
          "type": "integer"
        },
        "estimated_total_volume": {
          "type": "number"
        },
        "estimated_total_weight": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_cart": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/SalesItem"
          },
          "type": "array"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "missing_stock_items_cancelled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "order_num": {
          "type": "string"
        },
        "packing_location_id": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "process_information_id": {
          "type": "integer"
        },
        "purchase_order_id": {
          "type": "integer"
        },
        "service_point_id": {
          "type": "string"
        },
        "ship_to": {
          "$ref": "#/definitions/Address"
        },
        "shipment_instructions": {
          "items": {
            "$ref": "#/definitions/SalesShipmentInstruction"
          },
          "type": "array"
        },
        "shipping_method_id": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "third_party_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesOrderBodyRequest": {
      "properties": {
        "attributes": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "client_name": {
          "type": "string"
        },
        "criterium": {
          "type": "string"
        },
        "custom_route_rule_id": {
          "type": "integer"
        },
        "delivery_date": {
          "type": "string"
        },
        "destination_warehouse_id": {
          "type": "integer"
        },
        "estimated_total_volume": {
          "type": "number"
        },
        "estimated_total_weight": {
          "type": "number"
        },
        "is_cart": {
          "type": "boolean"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/SalesItemBodyRequest"
          },
          "type": "array"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "missing_stock_items_cancelled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "order_num": {
          "type": "string"
        },
        "packing_location_id": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "purchase_order_id": {
          "type": "integer"
        },
        "return_labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "service_point_id": {
          "type": "string"
        },
        "ship_to": {
          "$ref": "#/definitions/Address"
        },
        "shipment_instructions": {
          "$ref": "#/definitions/SalesShipmentInstructionBodyRequest"
        },
        "shipping_method_id": {
          "type": "integer"
        },
        "third_party_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesOrderBodyRequestList": {
      "items": {
        "$ref": "#/definitions/SalesOrderBodyRequest"
      },
      "type": "array"
    },
    "SalesOrderPostSearch": {
      "description": "Sales Order search request body",
      "properties": {
        "attributes": {
          "description": "The map with extra attributes that sales order could need",
          "type": "string"
        },
        "client_id": {
          "description": "Customer ID to which are sold the items",
          "type": "string"
        },
        "client_name": {
          "description": "Customer name",
          "type": "string"
        },
        "custom_route_rule_id": {
          "description": "The rule id with the strategy to be picked",
          "type": "string"
        },
        "delivery_date": {
          "description": "Date of delivery YYYY-MM-DD",
          "type": "string"
        },
        "destination_warehouse_id": {
          "description": "The warehouse the order arrives in in case it's of type `warehouse_movement`",
          "type": "string"
        },
        "id": {
          "description": "unique ID of the sales order",
          "type": "string"
        },
        "inserted_at": {
          "description": "Date of creation YYYY-MM-DD hh:mm:ss",
          "type": "string"
        },
        "is_cart": {
          "description": "`true` if the sales order will be picked in cart",
          "type": "boolean"
        },
        "limit": {
          "description": "Limit value to pagination",
          "type": "integer"
        },
        "missing_stock_items_cancelled": {
          "description": "True if items were removed from sales order for missing stock",
          "type": "boolean"
        },
        "not_product_id": {
          "description": "Sales orders that NOT contains the product ID",
          "type": "string"
        },
        "notes": {
          "description": "Notes or observations about the sales order",
          "type": "string"
        },
        "offset": {
          "description": "Offset value to pagination",
          "type": "integer"
        },
        "order_items_count": {
          "description": "Total number of sales items per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
          "type": "integer"
        },
        "order_num": {
          "description": "Unique Identifier for Sales Order",
          "type": "string"
        },
        "order_products_qty": {
          "description": "Total number of products per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value`, `between:min_value,max_value` or `value` (for exact value)",
          "type": "integer"
        },
        "packing_location_id": {
          "description": "Packing location where sales order will be moved",
          "type": "string"
        },
        "priority": {
          "description": "Determines priority of picking",
          "type": "string"
        },
        "product_id": {
          "description": "Sales orders that contains the product ID",
          "type": "string"
        },
        "return_labels": {
          "description": "List of return labels to add to a sales order. Does not accept duplicate return codes",
          "type": "array"
        },
        "shipping_method_id": {
          "description": "Shipping method id for shipping method when have to delivered sales order",
          "type": "string"
        },
        "state": {
          "description": "The available states are `queue`, `picking`, `packing`, `ended`, `cancelled`",
          "type": "string"
        },
        "third_party_id": {
          "description": "Unique ID of the third party",
          "type": "string"
        },
        "type": {
          "description": "The available types are `sales_order`, `warehouse_movement`, `return`, `POS_external`",
          "type": "string"
        },
        "updated_at": {
          "description": "Date of last update YYYY-MM-DD hh:mm:ss",
          "type": "string"
        },
        "view_attributes": {
          "description": "List of attributes to show in the response. No associations supported. An empty list shows all attributes",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "warehouse_id": {
          "description": "Unique ID of the warehouse",
          "type": "string"
        }
      },
      "title": "Sales order search",
      "type": "object"
    },
    "SalesOrderReasonCode": {
      "description": "Sales Order Reason Code",
      "properties": {
        "id": {
          "type": "integer"
        },
        "reason_code_id": {
          "type": "integer"
        },
        "reason_type": {
          "type": "string"
        },
        "sales_order_id": {
          "type": "integer"
        }
      },
      "title": "Sales Order Reason Code",
      "type": "object"
    },
    "SalesOrderReference": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "order_num": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SalesOrderReferenceIdList": {
      "items": {
        "type": "integer"
      },
      "type": "array"
    },
    "SalesOrderReferenceOrderNumList": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "SalesOrderReferenceStructList": {
      "items": {
        "$ref": "#/definitions/SalesOrderReference"
      },
      "type": "array"
    },
    "SalesOrderResponse": {
      "description": "Sales orders Response",
      "properties": {
        "id": {
          "description": "Sales order id",
          "type": "integer"
        },
        "order_num": {
          "description": "Sales order num",
          "type": "string"
        }
      },
      "required": [
        "order_num",
        "id"
      ],
      "title": "Sales orders Response",
      "type": "object"
    },
    "SalesOrderReturnLabelReference": {
      "properties": {
        "return_label_codes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sales_order_id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesOrderReturnLabelReferenceStructList": {
      "items": {
        "$ref": "#/definitions/SalesOrderReturnLabelReference"
      },
      "type": "array"
    },
    "SalesOrderStateTransition": {
      "description": "Sales Order State Transition",
      "properties": {
        "id": {
          "type": "integer"
        },
        "new_state": {
          "type": "string"
        },
        "performer_id": {
          "type": "integer"
        },
        "previous_state": {
          "type": "string"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Sales Order State Transition",
      "type": "object"
    },
    "SalesShipmentInstruction": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "shipment_terms_code": {
          "type": "string"
        },
        "shipment_terms_location": {
          "type": "string"
        },
        "shipping_method_id": {
          "type": "integer"
        },
        "stops": {
          "items": {
            "$ref": "#/definitions/ShipmentInstructionStop"
          },
          "type": "array"
        },
        "trip_number": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SalesShipmentInstructionBodyRequest": {
      "properties": {
        "sales_order_id": {
          "type": "integer"
        },
        "shipment_terms_code": {
          "type": "string"
        },
        "shipment_terms_location": {
          "type": "string"
        },
        "shipping_method_id": {
          "type": "integer"
        },
        "stops": {
          "items": {
            "$ref": "#/definitions/ShipmentInstructionStop"
          },
          "type": "array"
        },
        "trip_number": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Setting": {
      "description": "Setting",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "required": [
        "key",
        "value",
        "enabled",
        "tenant_id"
      ],
      "title": "Setting",
      "type": "object"
    },
    "ShipmentBoxTemplate": {
      "description": "Shipment Box Template",
      "properties": {
        "height": {
          "type": "number"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_default": {
          "type": "boolean"
        },
        "length": {
          "type": "number"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        },
        "weight": {
          "type": "number"
        },
        "width": {
          "type": "number"
        }
      },
      "title": "Shipment Box Template",
      "type": "object"
    },
    "ShipmentInstructionStop": {
      "description": "Shipment Instruction Stop",
      "properties": {
        "address": {
          "$ref": "#/definitions/AddressDetail"
        },
        "name": {
          "type": "string"
        },
        "stop_number": {
          "type": "string"
        },
        "stop_type": {
          "type": "string"
        }
      },
      "title": "Shipment Instruction Stop",
      "type": "object"
    },
    "ShipmentTracking": {
      "description": "Shipment Tracking",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "carrier_code": {
          "type": "string"
        },
        "error_message": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "packing_box_id": {
          "type": "integer"
        },
        "printed": {
          "type": "boolean"
        },
        "service_point_id": {
          "type": "string"
        },
        "shipment_cost": {
          "type": "number"
        },
        "status": {
          "type": "string"
        },
        "tracking_code": {
          "type": "string"
        },
        "tracking_url": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Shipment Tracking",
      "type": "object"
    },
    "ShippingItem": {
      "description": "Shipping Item",
      "properties": {
        "id": {
          "type": "integer"
        },
        "packing_box_id": {
          "type": "integer"
        },
        "shipping_order_id": {
          "type": "integer"
        }
      },
      "title": "Shipping Item",
      "type": "object"
    },
    "ShippingMethod": {
      "description": "Shipping Method",
      "properties": {
        "carrier": {
          "type": "string"
        },
        "fetch_label": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Shipping Method",
      "type": "object"
    },
    "ShippingOrder": {
      "description": "Shipping Order",
      "properties": {
        "fulfillment_order_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/ShippingItem"
          },
          "type": "array"
        },
        "owner_id": {
          "type": "integer"
        },
        "sales_order_id": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "shipping_location_id": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Shipping Order",
      "type": "object"
    },
    "SocketPermission": {
      "description": "Socket Permission",
      "properties": {
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "subtopic": {
          "type": "string"
        },
        "topic": {
          "type": "string"
        }
      },
      "title": "Socket Permission",
      "type": "object"
    },
    "SocketProfile": {
      "description": "Socket Profile",
      "properties": {
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "socket_permissions": {
          "items": {
            "$ref": "#/definitions/SocketPermission"
          },
          "type": "array"
        }
      },
      "title": "Socket Profile",
      "type": "object"
    },
    "SocketProfileSocketPermission": {
      "description": "Socket Profile Socket Permission",
      "properties": {
        "id": {
          "type": "integer"
        },
        "socket_permission_id": {
          "type": "integer"
        },
        "socket_profile_id": {
          "type": "integer"
        }
      },
      "title": "Socket Profile Socket Permission",
      "type": "object"
    },
    "SplitReplenishmentItem": {
      "description": "Split Replenishment Item",
      "properties": {
        "id": {
          "type": "integer"
        },
        "performer_id": {
          "type": "integer"
        },
        "replenishment_item_id": {
          "type": "integer"
        },
        "replenishment_order_id": {
          "type": "integer"
        },
        "splits": {
          "type": "string"
        }
      },
      "title": "Split Replenishment Item",
      "type": "object"
    },
    "Stock": {
      "description": "Stock",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "stock_state_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Stock",
      "type": "object"
    },
    "StockCorrection": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/StockCorrectionItem"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/OwnerUser"
        },
        "owner_id": {
          "type": "integer"
        },
        "reason_codes": {
          "items": {
            "$ref": "#/definitions/ReasonCode"
          },
          "type": "array"
        },
        "sequence_number": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "StockCorrectionItem": {
      "description": "Stock Correction Item",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "stock_correction_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Stock Correction Item",
      "type": "object"
    },
    "StockCorrectionItemBatchRequest": {
      "properties": {
        "batch_id": {
          "description": "Id of the lot or serial that will be corrected",
          "type": "integer"
        },
        "quantity": {
          "description": "The number to be added or removed from the batch (use negative value for removal)",
          "type": "integer"
        }
      },
      "required": [
        "quantity",
        "batch_id"
      ],
      "title": "Stock Correction Item Batch Request",
      "type": "object"
    },
    "StockCorrectionItemRequest": {
      "properties": {
        "item_batches": {
          "description": "Add them if the product has lots or serials, the sum of the quantities must match",
          "items": {
            "$ref": "#/definitions/StockCorrectionItemBatchRequest"
          },
          "type": "array"
        },
        "location_id": {
          "description": "Id of the location where the correction is executed",
          "type": "integer"
        },
        "product_id": {
          "description": "Id of the product that will be corrected",
          "type": "integer"
        },
        "quantity": {
          "description": "The number to be added or removed from the product (use negative value for removal)",
          "type": "integer"
        }
      },
      "required": [
        "quantity",
        "product_id",
        "location_id"
      ],
      "title": "Stock Correction Item Request",
      "type": "object"
    },
    "StockCorrectionRequest": {
      "description": "Model for creating a new stock request",
      "properties": {
        "items": {
          "description": "Items that will be corrected",
          "items": {
            "$ref": "#/definitions/StockCorrectionItemRequest"
          },
          "type": "array"
        },
        "reason_codes": {
          "description": "Add them if some reason code must be reported",
          "items": {
            "$ref": "#/definitions/ReasonCodeRequest"
          },
          "type": "array"
        },
        "warehouse_id": {
          "description": "Warehouse id of the stock correction",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "warehouse_id"
      ],
      "title": "Stock Correction Request",
      "type": "object"
    },
    "StockLoadingUnit": {
      "description": "Stock Loading Unit",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "packaging_level": {
          "type": "integer"
        },
        "packaging_type": {
          "type": "string"
        },
        "products_quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Stock Loading Unit",
      "type": "object"
    },
    "StockModification": {
      "description": "Stock Modification",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "owner_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Stock Modification",
      "type": "object"
    },
    "StockMovement": {
      "description": "Stock Movement",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "destination_location_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "origin_location_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        }
      },
      "title": "Stock Movement",
      "type": "object"
    },
    "StockRecord": {
      "description": "Stock Record",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_control_id": {
          "type": "integer"
        },
        "location_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "operated_at": {
          "type": "string"
        },
        "previous_quantity": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "string"
        },
        "stock_state_id": {
          "type": "integer"
        },
        "task_id": {
          "type": "integer"
        },
        "tenant_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Stock Record",
      "type": "object"
    },
    "StockState": {
      "description": "Stock State",
      "properties": {
        "available": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Stock State",
      "type": "object"
    },
    "StockStockLoadingUnit": {
      "description": "Stock Stock Loading Unit",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "partial_quantity": {
          "type": "integer"
        },
        "stock_id": {
          "type": "integer"
        },
        "stock_loading_unit_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Stock Stock Loading Unit",
      "type": "object"
    },
    "StockSummary": {
      "description": "Stock summary for a product",
      "properties": {
        "available": {
          "description": "Available quantity of the product, calculated by the storage stock minus the stock reserved for sales order (in queue and picking) and replenishment orders (in queue and taken)",
          "type": "integer"
        },
        "last_movement": {
          "description": "Last stock movement date for the product",
          "type": "string"
        },
        "name": {
          "description": "Name of the product",
          "type": "string"
        },
        "product_id": {
          "description": "Id of the product",
          "type": "string"
        },
        "rejected": {
          "description": "Rejected quantity of the product, calculated by the sum of the stocks stored in return positions",
          "type": "integer"
        },
        "sku": {
          "description": "Sku of the product",
          "type": "string"
        },
        "total": {
          "description": "Available quantity of the product, calculated by the sum of the stocks stored in storage, kitting, reception, packing, shipping and unavailable positions",
          "type": "integer"
        },
        "unavailable": {
          "description": "Unavailable quantity of the product, calculated by the sum of reserved stock, kitting stock and unavailable positions stock",
          "type": "integer"
        }
      },
      "title": "Stock summary",
      "type": "object"
    },
    "StockSummary_ResponseList": {
      "items": {
        "$ref": "#/definitions/StockSummary"
      },
      "type": "array"
    },
    "StockThreshold": {
      "description": "Stock Threshold",
      "properties": {
        "categories": {
          "items": {
            "$ref": "#/definitions/ProductCategory"
          },
          "type": "array"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "location_id": {
          "type": "integer"
        },
        "max": {
          "type": "integer"
        },
        "min": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "product_id": {
          "type": "integer"
        },
        "round_option": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Stock Threshold",
      "type": "object"
    },
    "StockThresholdCategory": {
      "description": "Stock Threshold Category",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "product_category_id": {
          "type": "integer"
        },
        "stock_threshold_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Stock Threshold Category",
      "type": "object"
    },
    "SuggestedBatch": {
      "description": "Suggested Batch",
      "properties": {
        "batch_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "packing_item_id": {
          "type": "integer"
        },
        "picking_item_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Suggested Batch",
      "type": "object"
    },
    "Tenant": {
      "description": "Tenant",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "api_rate_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "industry": {
          "type": "string"
        },
        "inserted_at": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "title": "Tenant",
      "type": "object"
    },
    "ThirdParty": {
      "description": "Third Party",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "attributes": {
          "type": "string"
        },
        "deleted_at": {
          "type": "string"
        },
        "deleted_by": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "erp_code": {
          "type": "string"
        },
        "erp_id": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "identifier_number": {
          "type": "string"
        },
        "identifier_type": {
          "type": "string"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "third_type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "required": [
        "identifier_type",
        "identifier_number",
        "name",
        "third_type",
        "tenant_id"
      ],
      "title": "Third Party",
      "type": "object"
    },
    "ThirdPartyReference": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "identifier_number": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ThirdPartyReferenceIdList": {
      "items": {
        "type": "integer"
      },
      "type": "array"
    },
    "ThirdPartyReferenceOrderNumList": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "ThirdPartyReferenceStructList": {
      "items": {
        "$ref": "#/definitions/ThirdPartyReference"
      },
      "type": "array"
    },
    "ThirdPartyResponse": {
      "description": "Third parties Response",
      "properties": {
        "id": {
          "description": "Third party id",
          "type": "integer"
        },
        "identifier_number": {
          "description": "Third party identifier number",
          "type": "string"
        }
      },
      "required": [
        "identifier_number",
        "id"
      ],
      "title": "Third parties Response",
      "type": "object"
    },
    "UpdatedPackingResponse": {
      "description": "Updated Packings Response",
      "properties": {
        "id": {
          "description": "Packing order ID",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "title": "Updated Packings Response",
      "type": "object"
    },
    "User": {
      "description": "User",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "deleted_at": {
          "type": "string"
        },
        "deleted_by": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "employee_id": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "merchants": {
          "items": {
            "$ref": "#/definitions/Merchant"
          },
          "type": "array"
        },
        "password": {
          "type": "string"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/Permission"
          },
          "type": "array"
        },
        "product_categories": {
          "items": {
            "$ref": "#/definitions/ProductCategory"
          },
          "type": "array"
        },
        "profiles": {
          "items": {
            "$ref": "#/definitions/Profile"
          },
          "type": "array"
        },
        "socket_permissions": {
          "items": {
            "$ref": "#/definitions/SocketPermission"
          },
          "type": "array"
        },
        "socket_profiles": {
          "items": {
            "$ref": "#/definitions/SocketProfile"
          },
          "type": "array"
        },
        "tenant_id": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "warehouses": {
          "items": {
            "$ref": "#/definitions/Warehouse"
          },
          "type": "array"
        }
      },
      "title": "User",
      "type": "object"
    },
    "UserProductCategory": {
      "description": "User Product Category",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "product_category_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        }
      },
      "title": "User Product Category",
      "type": "object"
    },
    "UserProfile": {
      "description": "User Profile",
      "properties": {
        "id": {
          "type": "integer"
        },
        "profile_id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        }
      },
      "title": "User Profile",
      "type": "object"
    },
    "UserSession": {
      "description": "User Session",
      "properties": {
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "login_source": {
          "type": "string"
        },
        "login_timestamp": {
          "type": "string"
        },
        "resolution": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "tenant_name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      },
      "title": "User Session",
      "type": "object"
    },
    "UserSocketProfile": {
      "description": "User Socket Profile",
      "properties": {
        "id": {
          "type": "integer"
        },
        "socket_profile_id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        }
      },
      "title": "User Socket Profile",
      "type": "object"
    },
    "UserWarehouse": {
      "description": "User Warehouse",
      "properties": {
        "id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "User Warehouse",
      "type": "object"
    },
    "Warehouse": {
      "description": "Warehouse",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "city": {
          "type": "string"
        },
        "company_name": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "site": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "tenant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "zip_code": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "active",
        "line1",
        "tenant_id"
      ],
      "title": "Warehouse",
      "type": "object"
    },
    "WarehouseAlias": {
      "description": "Warehouse Alias",
      "properties": {
        "alias": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Warehouse Alias",
      "type": "object"
    },
    "Webhook": {
      "description": "Webhook",
      "properties": {
        "allowed_types": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "client_id": {
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "method": {
          "type": "string"
        },
        "request_module": {
          "type": "string"
        },
        "response_module": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Webhook",
      "type": "object"
    },
    "WebhookClient": {
      "description": "Webhook Client",
      "properties": {
        "credentials": {
          "items": {
            "$ref": "#/definitions/WebhookCredential"
          },
          "type": "array"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "merchant_channel_id": {
          "type": "integer"
        },
        "merchant_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "title": "Webhook Client",
      "type": "object"
    },
    "WebhookCredential": {
      "description": "Webhook Credential",
      "properties": {
        "client_id": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Webhook Credential",
      "type": "object"
    },
    "Zone": {
      "description": "Zone",
      "properties": {
        "attributes": {
          "type": "string"
        },
        "client_zone": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "inserted_at": {
          "type": "string"
        },
        "is_defined": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "position_height": {
          "type": "integer"
        },
        "position_left": {
          "type": "integer"
        },
        "position_top": {
          "type": "integer"
        },
        "position_width": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "required": [
        "name",
        "code",
        "priority",
        "warehouse_id"
      ],
      "title": "Zone",
      "type": "object"
    },
    "ZoneSequence": {
      "description": "Zone Sequence",
      "properties": {
        "id": {
          "type": "integer"
        },
        "sequence_number": {
          "type": "integer"
        },
        "warehouse_id": {
          "type": "integer"
        }
      },
      "title": "Zone Sequence",
      "type": "object"
    }
  },
  "host": "https://eu.pulpo.co",
  "info": {
    "title": "Pulpo WMS",
    "version": "2.9.2-v2-9-2+f7e6d9d"
  },
  "paths": {
    "/": {
      "get": {
        "description": "Checks server availability",
        "operationId": "Wms.Auth.AuthController.head_status",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Checks server availability",
        "tags": [
          "Auth"
        ]
      }
    },
    "/attachment/{id}": {
      "get": {
        "description": "Show an attachment through its URL\n",
        "operationId": "Wms.Attachment.AttachmentController.show",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show an attachment through its URL\n",
        "tags": [
          "Attachment"
        ]
      }
    },
    "/auth": {
      "post": {
        "description": "Generates a new JWT token for the asked user, Implements OAuht2.0 request token action to perform users login and retrieve users session data",
        "operationId": "Wms.Auth.AuthController.request_token",
        "parameters": [
          {
            "description": "Auth request",
            "in": "body",
            "name": "access_token_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessTokenRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccessTokenResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "summary": "Generates a new JWT token for the asked user, Implements OAuht2.0 request token action to perform users login and retrieve users session data",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "description": "Revokes token for the asked user",
        "operationId": "Wms.Auth.AuthController.revoke_token",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Revokes token for the asked user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/counting/tasks": {
      "get": {
        "description": "Searches a list of counting task given a counting task params",
        "operationId": "Wms.Counting.CountingTaskController.search",
        "parameters": [
          {
            "description": "`product`, `location`, `product_location`",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "`open`, `finished`, `cancelled`, `in_progress`, `closed`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Description of counting task",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Text to grouping the counting task, works like a tag",
            "in": "query",
            "name": "group",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product ID that counting task belongs",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID that counting task belongs",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Owner ID of counting task",
            "in": "query",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ID of counting task",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User ID of counter that counting task",
            "in": "query",
            "name": "counter_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sequence number of counting task",
            "in": "query",
            "name": "sequence_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date with format YYYY-MM-DD",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of counting task given a counting task params",
        "tags": [
          "Counting"
        ]
      },
      "post": {
        "description": "Create a counting task",
        "operationId": "Wms.Counting.CountingTaskController.create",
        "parameters": [
          {
            "description": "Counting tasks to create",
            "in": "body",
            "name": "counting_tasks_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/CountingTask"
              },
              "type": "array"
            }
          },
          {
            "description": "A single counting task to create",
            "in": "body",
            "name": "counting_task",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create a counting task",
        "tags": [
          "Counting"
        ]
      }
    },
    "/counting/tasks/assign": {
      "post": {
        "description": "Assign a valid counting id in counting task.",
        "operationId": "Wms.Counting.CountingTaskController.assign",
        "parameters": [
          {
            "description": "User ID of counter that counting task",
            "in": "form_data",
            "name": "counter_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting Tasks ids to be assigned by the user",
            "in": "form_data",
            "name": "counting_tasks_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a valid counting id in counting task.",
        "tags": [
          "Counting"
        ]
      }
    },
    "/counting/tasks/{id}": {
      "get": {
        "description": "Searches a counting task by ID",
        "operationId": "Wms.Counting.CountingTaskController.show",
        "parameters": [
          {
            "description": "Counting task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a counting task by ID",
        "tags": [
          "Counting"
        ]
      },
      "patch": {
        "description": "Updates a specific field on counting task. Can update the state of counting task\nor the counter_id to assign a counter to counting task",
        "operationId": "Wms.Counting.CountingTaskController.update",
        "parameters": [
          {
            "description": "`replace`",
            "in": "form_data",
            "name": "op",
            "required": false,
            "type": "string"
          },
          {
            "description": "Can be `/state` or `/counter_id`",
            "in": "form_data",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "Value for state, can be `open`, `finished`, `cancelled`",
            "in": "form_data",
            "name": "value",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a specific field on counting task. Can update the state of counting task\nor the counter_id to assign a counter to counting task",
        "tags": [
          "Counting"
        ]
      }
    },
    "/counting/tasks/{id}/cancel": {
      "post": {
        "description": "Cancel a counting task, with a list of valid items",
        "operationId": "Wms.Counting.CountingTaskController.cancel",
        "parameters": [
          {
            "description": "Counting task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Cancel a counting task, with a list of valid items",
        "tags": [
          "Counting"
        ]
      }
    },
    "/counting/tasks/{id}/finish": {
      "post": {
        "description": "Close a counting task, with a list of valid items",
        "operationId": "Wms.Counting.CountingTaskController.finish",
        "parameters": [
          {
            "description": "Counting task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Close a counting task, with a list of valid items",
        "tags": [
          "Counting"
        ]
      }
    },
    "/counting/tasks/{id}/items": {
      "post": {
        "description": "Adds an item for a counting task",
        "operationId": "Wms.Counting.CountingTaskController.add_item",
        "parameters": [
          {
            "description": "Counting task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Counting item quantity",
            "in": "form_data",
            "name": "quantity",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item product ID",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item batch ID",
            "in": "form_data",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item location ID",
            "in": "form_data",
            "name": "location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Adds an item for a counting task",
        "tags": [
          "Counting"
        ]
      }
    },
    "/counting/tasks/{id}/items/{item_id}": {
      "delete": {
        "description": "Deletes an item for a counting task",
        "operationId": "Wms.Counting.CountingTaskController.delete_item",
        "parameters": [
          {
            "description": "Counting task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Counting item ID",
            "in": "path",
            "name": "item_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Counting item quantity",
            "in": "form_data",
            "name": "quantity",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item product ID",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item batch ID",
            "in": "form_data",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item location ID",
            "in": "form_data",
            "name": "location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes an item for a counting task",
        "tags": [
          "Counting"
        ]
      },
      "put": {
        "description": "Updates an item for a counting task",
        "operationId": "Wms.Counting.CountingTaskController.update_item",
        "parameters": [
          {
            "description": "Counting task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Counting item ID",
            "in": "path",
            "name": "item_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Counting item quantity",
            "in": "form_data",
            "name": "quantity",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item product ID",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item batch ID",
            "in": "form_data",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Counting item location ID",
            "in": "form_data",
            "name": "location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates an item for a counting task",
        "tags": [
          "Counting"
        ]
      }
    },
    "/counting/tasks/{id}/items/{item_id}/attach": {
      "post": {
        "description": "Attach a file with a counting task",
        "operationId": "Wms.Counting.CountingTaskController.upload_item_attachment",
        "parameters": [
          {
            "description": "Counting Task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Counting Item ID",
            "in": "path",
            "name": "item_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Path to document file",
            "in": "form_data",
            "name": "attachment",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of the attachment",
            "in": "form_data",
            "name": "filename",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the attachment",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Attach a file with a counting task",
        "tags": [
          "Counting"
        ]
      }
    },
    "/counting/tasks/{id}/reasons": {
      "post": {
        "description": "Replaces reason codes associated to a counting task.\nThe body includes the following:",
        "operationId": "Wms.Counting.CountingTaskController.upsert_reason_codes",
        "parameters": [
          {
            "description": "`auditor` or `counter`",
            "in": "form_data",
            "name": "reason_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of reason code ids",
            "in": "form_data",
            "name": "reason_code_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Replaces reason codes associated to a counting task.\nThe body includes the following:",
        "tags": [
          "Counting"
        ]
      }
    },
    "/countries/": {
      "get": {
        "description": "Lists countries with its regional codes",
        "operationId": "Wms.Country.CountryController.search",
        "parameters": [
          {
            "description": "Country name",
            "in": "query",
            "name": "country_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country code in alpha_2 format",
            "in": "query",
            "name": "alpha_2",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country code in alpha_3 format",
            "in": "query",
            "name": "alpha_3",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country code",
            "in": "query",
            "name": "country_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country code in iso_3166-2",
            "in": "query",
            "name": "iso_3166_2",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country sub region",
            "in": "query",
            "name": "sub_region",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country intermediate region",
            "in": "query",
            "name": "intermediate_region",
            "required": false,
            "type": "string"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Country"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists countries with its regional codes",
        "tags": [
          "Country"
        ]
      }
    },
    "/countries/{id}/aliases": {
      "get": {
        "description": "Lists the event logs from a tenant",
        "operationId": "Wms.Country.CountryAliasController.search",
        "parameters": [
          {
            "description": "Country ID",
            "in": "path",
            "name": "country_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Country alias name",
            "in": "query",
            "name": "alias_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_CountryAlias"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the event logs from a tenant",
        "tags": [
          "Country"
        ]
      }
    },
    "/device/": {
      "post": {
        "description": "creates a device",
        "operationId": "Wms.Device.DeviceController.create",
        "parameters": [
          {
            "description": "Serial of the device",
            "in": "form_data",
            "name": "serial",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the device",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Instance ID of Google",
            "in": "form_data",
            "name": "instance_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "creates a device",
        "tags": [
          "Device"
        ]
      }
    },
    "/device/{id}": {
      "get": {
        "description": "Shows a device by given ID",
        "operationId": "Wms.Device.DeviceController.show",
        "parameters": [
          {
            "description": "Device ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows a device by given ID",
        "tags": [
          "Device"
        ]
      },
      "put": {
        "description": "updates a device by given ID",
        "operationId": "Wms.Device.DeviceController.update",
        "parameters": [
          {
            "description": "Device ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "updates a device by given ID",
        "tags": [
          "Device"
        ]
      }
    },
    "/iam/bulk/third_parties": {
      "post": {
        "description": "This endpoint works as bulk, it means that if any third party creation fails it will continue with the others until the end.",
        "operationId": "Wms.Iam.Bulk.BulkThirdPartyController.bulk_create",
        "parameters": [
          {
            "description": "List of third parties maps to be created",
            "in": "body",
            "name": "third_party_request_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ThirdParty"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkThirdPartyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkErrorsThirdPartyResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create third parties in bulk.",
        "tags": [
          "Iam"
        ]
      },
      "put": {
        "description": "This endpoint works as bulk, it means that if any third party update fails it will continue with the others until the end.",
        "operationId": "Wms.Iam.Bulk.BulkThirdPartyController.bulk_update",
        "parameters": [
          {
            "description": "List of third parties maps to be updated",
            "in": "body",
            "name": "third_parties_request_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ThirdParty"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkThirdPartyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkUpdateErrorsThirdPartyResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Update third parties in bulk.",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/tenants": {
      "get": {
        "description": "Searches a list of users given a sku and barcode",
        "operationId": "Wms.Iam.TenantController.search",
        "parameters": [
          {
            "description": "Name of Tenant",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of industry",
            "in": "query",
            "name": "industry",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a Tenant is valid or not",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of users given a sku and barcode",
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "description": "Create a tenant",
        "operationId": "Wms.Iam.TenantController.create",
        "parameters": [
          {
            "description": "Tenant",
            "in": "body",
            "name": "single_tenant",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Tenant"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create a tenant",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/tenants/profiles": {
      "get": {
        "description": "Searches a list of profiles given an id(s), key(s)\nThe parameters are optional",
        "operationId": "Wms.Iam.IamController.search_profiles",
        "parameters": [
          {
            "description": "Profile ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Key of profile",
            "in": "query",
            "name": "key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Profile"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of profiles given an id(s), key(s)\nThe parameters are optional",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/tenants/profiles/{id}": {
      "get": {
        "description": "Show a profile data from given ID",
        "operationId": "Wms.Iam.IamController.show_profile",
        "parameters": [
          {
            "description": "Profile ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a profile data from given ID",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/tenants/socket_profiles": {
      "get": {
        "description": "Searches a list of socket profiles given an id(s), key(s)",
        "operationId": "Wms.Iam.IamController.search_socket_profiles",
        "parameters": [
          {
            "description": "Socket profile ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Key of socket profile",
            "in": "query",
            "name": "key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of socket profiles given an id(s), key(s)",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/tenants/socket_profiles/{id}": {
      "get": {
        "description": "Show a socket profile data from given ID",
        "operationId": "Wms.Iam.IamController.show_socket_profile",
        "parameters": [
          {
            "description": "Socket profile ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SocketProfile"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a socket profile data from given ID",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/tenants/{id}": {
      "get": {
        "description": "Show a tenant given ID",
        "operationId": "Wms.Iam.TenantController.show",
        "parameters": [
          {
            "description": "Tenant ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a tenant given ID",
        "tags": [
          "Iam"
        ]
      },
      "put": {
        "description": "update a tenant given ID",
        "operationId": "Wms.Iam.TenantController.update",
        "parameters": [
          {
            "description": "Tenant ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Name of Tenant",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of industry",
            "in": "form_data",
            "name": "industry",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a Tenant is valid or not",
            "in": "form_data",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Limit value for pagination",
            "in": "form_data",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "form_data",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "update a tenant given ID",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/third_parties": {
      "get": {
        "description": "Searches a list of third parties by given parameters. The parameters are optional",
        "operationId": "Wms.Iam.ThirdPartyController.search",
        "parameters": [
          {
            "description": "Type of identifier of third party",
            "in": "query",
            "name": "identifier_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Alphanumerical code to identify the third party",
            "in": "query",
            "name": "identifier_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of third party",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type can be `S` for supplier or `C` for customer",
            "in": "query",
            "name": "third_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a third party is active or not",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "string"
          },
          {
            "description": "Extra attributes",
            "in": "query",
            "name": "attributes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Code of third party in ERP",
            "in": "query",
            "name": "erp_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "ID of third party in ERP",
            "in": "query",
            "name": "erp_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Delivery date of related orders for customers. Available filters are `gte:date`, `gt:date`, `lte:date`, `lt:date`, `between:date1,date2` or `date`\n `gte: grater than or equal`, gt: `greater than`, lte: `less than or equal`, lt: `less than`",
            "in": "query",
            "name": "related_orders_delivery_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of the related orders for customers",
            "in": "query",
            "name": "related_orders_state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by a given merchant else use the default merchant_id",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_ThirdParty"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of third parties by given parameters. The parameters are optional",
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "description": "Creates a third party",
        "operationId": "Wms.Iam.ThirdPartyController.create",
        "parameters": [
          {
            "description": "Third party body request",
            "in": "body",
            "name": "third_party",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ThirdParty"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ThirdParty"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a third party",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/third_parties/upload": {
      "post": {
        "description": "Create multiple Third Party from a CSV file",
        "operationId": "Wms.Iam.ThirdPartyController.upload",
        "parameters": [
          {
            "description": "Path to CSV file",
            "in": "form_data",
            "name": "file",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create multiple Third Party from a CSV file",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/third_parties/{id}": {
      "delete": {
        "description": "Deletes a third party given Id",
        "operationId": "Wms.Iam.ThirdPartyController.delete",
        "parameters": [
          {
            "description": "Third Party ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ThirdParty"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a third party given Id",
        "tags": [
          "Iam"
        ]
      },
      "get": {
        "description": "Shows a third party given ID",
        "operationId": "Wms.Iam.ThirdPartyController.show",
        "parameters": [
          {
            "description": "Third party ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ThirdParty"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows a third party given ID",
        "tags": [
          "Iam"
        ]
      },
      "put": {
        "description": "updates a third party given ID",
        "operationId": "Wms.Iam.ThirdPartyController.update",
        "parameters": [
          {
            "description": "Third party ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Third party body request",
            "in": "body",
            "name": "third_party",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ThirdParty"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ThirdParty"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "updates a third party given ID",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users": {
      "get": {
        "description": "Searches a list of users given params",
        "operationId": "Wms.Iam.UserController.search",
        "parameters": [
          {
            "description": "User ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User username",
            "in": "query",
            "name": "username",
            "required": false,
            "type": "string"
          },
          {
            "description": "User employee ID",
            "in": "query",
            "name": "employee_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User email",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "User firstname",
            "in": "query",
            "name": "first_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "User lastname",
            "in": "query",
            "name": "last_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "User profiles",
            "in": "query",
            "name": "profile",
            "required": false,
            "type": "string"
          },
          {
            "description": "User permissions",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "User active status",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "string"
          },
          {
            "description": "User categories",
            "in": "query",
            "name": "product_categories",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of users given params",
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "description": "Create an user",
        "operationId": "Wms.Iam.UserController.create",
        "parameters": [
          {
            "description": "User nickname",
            "in": "form_data",
            "name": "username",
            "required": false,
            "type": "string"
          },
          {
            "description": "Password",
            "in": "form_data",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "The id for the employee within the company",
            "in": "form_data",
            "name": "employee_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "the email for the user",
            "in": "form_data",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "First name",
            "in": "form_data",
            "name": "first_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Last name",
            "in": "form_data",
            "name": "last_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type option: user admin root",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Id for tenant",
            "in": "form_data",
            "name": "tenant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Determines if an user can access to the system",
            "in": "form_data",
            "name": "active",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create an user",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/me": {
      "get": {
        "description": "Returns logged in user data",
        "operationId": "Wms.Iam.UserController.me",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Returns logged in user data",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/name": {
      "get": {
        "description": "Searches a list of users with no embed objects according to given params",
        "operationId": "Wms.Iam.UserController.search_basic_info",
        "parameters": [
          {
            "description": "User ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User username",
            "in": "query",
            "name": "username",
            "required": false,
            "type": "string"
          },
          {
            "description": "User employee ID",
            "in": "query",
            "name": "employee_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User email",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "User firstname",
            "in": "query",
            "name": "first_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "User lastname",
            "in": "query",
            "name": "last_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "User profiles",
            "in": "query",
            "name": "profile",
            "required": false,
            "type": "string"
          },
          {
            "description": "User permissions",
            "in": "query",
            "name": "permission",
            "required": false,
            "type": "string"
          },
          {
            "description": "User active status",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "string"
          },
          {
            "description": "User categories",
            "in": "query",
            "name": "product_categories",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of users with no embed objects according to given params",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/session/{id}": {
      "put": {
        "description": "Updates user session",
        "operationId": "Wms.Iam.UserController.update_session",
        "parameters": [
          {
            "description": "Session ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "UserSession to update",
            "in": "body",
            "name": "user_session",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserSession"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSession"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates user session",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/{id}": {
      "delete": {
        "description": "Delete a user given ID",
        "operationId": "Wms.Iam.UserController.delete",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete a user given ID",
        "tags": [
          "Iam"
        ]
      },
      "get": {
        "description": "Shows an user given ID",
        "operationId": "Wms.Iam.UserController.show",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows an user given ID",
        "tags": [
          "Iam"
        ]
      },
      "put": {
        "description": "updates an user given ID",
        "operationId": "Wms.Iam.UserController.update",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "User nickname",
            "in": "form_data",
            "name": "username",
            "required": false,
            "type": "string"
          },
          {
            "description": "Password",
            "in": "form_data",
            "name": "password",
            "required": false,
            "type": "string"
          },
          {
            "description": "The id for the employee within the company",
            "in": "form_data",
            "name": "employee_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "the email for the user",
            "in": "form_data",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "First name",
            "in": "form_data",
            "name": "first_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Last name",
            "in": "form_data",
            "name": "last_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type option: user admin root",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Id for tenant",
            "in": "form_data",
            "name": "tenant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Determines if an user can access to the system",
            "in": "form_data",
            "name": "active",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "updates an user given ID",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/{id}/categories": {
      "post": {
        "description": "Assign a list of categories ids to an given user\n",
        "operationId": "Wms.Iam.UserController.assign_categories",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a list of categories ids to an given user\n",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/{id}/device": {
      "post": {
        "description": "Associates a device to a created user\n",
        "operationId": "Wms.Iam.UserController.assign_device",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Associates a device to a created user\n",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/{id}/merchants": {
      "get": {
        "description": "Shows an user and the merchants related by given user id",
        "operationId": "Wms.Iam.UserController.merchants",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows an user and the merchants related by given user id",
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "description": "Assign a list of merchants ids to an given user",
        "operationId": "Wms.Iam.UserController.assign_merchants",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a list of merchants ids to an given user",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/{id}/notification_profiles": {
      "get": {
        "description": "Assign a list of socket profile ids to an given user\n",
        "operationId": "Wms.Iam.UserController.list_socket_profiles",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a list of socket profile ids to an given user\n",
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "description": "Assign a list of socket profile ids to an given user\n",
        "operationId": "Wms.Iam.UserController.assign_socket_profiles",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a list of socket profile ids to an given user\n",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/{id}/profiles": {
      "get": {
        "description": "Assign a list of socket profile ids to an given user\n",
        "operationId": "Wms.Iam.UserController.list_profiles",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a list of socket profile ids to an given user\n",
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "description": "Assign a list of profile ids to an given user\n",
        "operationId": "Wms.Iam.UserController.assign_profiles",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a list of profile ids to an given user\n",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/{id}/tasks": {
      "get": {
        "description": "shows all pending tasks related to an user",
        "operationId": "Wms.Iam.UserController.pending_tasks",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "shows all pending tasks related to an user",
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/users/{id}/warehouses": {
      "get": {
        "description": "shows an user and the warehouses allowed by given user id",
        "operationId": "Wms.Iam.UserController.allowed_warehouses",
        "parameters": [
          {
            "description": "User ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "shows an user and the warehouses allowed by given user id",
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "description": "Assign a list of warehouse ids to an given user\n",
        "operationId": "Wms.Iam.UserController.assign_warehouses",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a list of warehouse ids to an given user\n",
        "tags": [
          "Iam"
        ]
      }
    },
    "/inventory/": {
      "get": {
        "description": "Searches a list of inventories given a list of criteria",
        "operationId": "Wms.Inventory.InventoryController.search",
        "parameters": [
          {
            "description": "Inventory ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Title of Inventory",
            "in": "query",
            "name": "title",
            "required": false,
            "type": "string"
          },
          {
            "description": "Note of inventory",
            "in": "query",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start date of inventory in YYYY-MM-DD",
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "End Date of inventory in YYYY-MM-DD",
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of the inventory `queue`, `in_progress`, `finished`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "ID of the Owner of inventory",
            "in": "query",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Warehouse ID",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of inventories given a list of criteria",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Create a inventory",
        "operationId": "Wms.Inventory.InventoryController.create",
        "parameters": [
          {
            "description": "Title of Inventory",
            "in": "form_data",
            "name": "title",
            "required": false,
            "type": "string"
          },
          {
            "description": "Note of inventory",
            "in": "form_data",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start date of inventory in YYYY-MM-DD",
            "in": "form_data",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "End Date of inventory in YYYY-MM-DD",
            "in": "form_data",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of the inventory `queue`, `in_progress`, `finished`",
            "in": "form_data",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "ID of the Owner of inventory",
            "in": "form_data",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create a inventory",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/bulk/products": {
      "delete": {
        "description": "Deletion payload have multiple formats due to different ways to specify which products should be deleted:\n* A list of structs with sku: E.G. `[%{sku: \"sku1\"}, ...]`\n* A list of skus: E.G. `[\"sku1\", ...]`\n* A list of structs with id: E.G. `[%{id: 1}, ...]`\n* A list of ids: E.G. `[1, ...]`",
        "operationId": "Wms.Inventory.Bulk.BulkProductController.bulk_delete",
        "parameters": [
          {
            "description": "product reference structs",
            "in": "body",
            "name": "product_reference_struct_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductReferenceStructList"
            }
          },
          {
            "description": "ids list",
            "in": "body",
            "name": "product_reference_id_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductReferenceIdList"
            }
          },
          {
            "description": "skus list",
            "in": "body",
            "name": "product_reference_sku_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductReferenceSkuList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete products in bulk.",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Create products in bulk. This endpoint works as bulk, it means that if any product creation fails it will continue with the others until the end.",
        "operationId": "Wms.Inventory.Bulk.BulkProductController.bulk_create",
        "parameters": [
          {
            "description": "List of products map to be created",
            "in": "body",
            "name": "product_list_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductListRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkProductResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkErrorsProductsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create products in bulk. This endpoint works as bulk, it means that if any product creation fails it will continue with the others until the end.",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "Updates products in bulk. This endpoint works as bulk, it means that if any product update fails it will continue with the others until the end.",
        "operationId": "Wms.Inventory.Bulk.BulkProductController.bulk_update",
        "parameters": [
          {
            "description": "List of products map to be created",
            "in": "body",
            "name": "products_request_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkUpdateProductResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkUpdateErrorsProductsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates products in bulk. This endpoint works as bulk, it means that if any product update fails it will continue with the others until the end.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/kits": {
      "get": {
        "description": "Searches a list of kits",
        "operationId": "Wms.Inventory.KitController.search",
        "parameters": [
          {
            "description": "Kit ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product id",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location id",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of kits",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Creates a Kit according to given params",
        "operationId": "Wms.Inventory.KitController.create",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a Kit according to given params",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/kits/{id}": {
      "get": {
        "description": "Fetch a kit by given id",
        "operationId": "Wms.Inventory.KitController.show",
        "parameters": [
          {
            "description": "Kit ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch a kit by given id",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/kits/{id}/deactivate": {
      "post": {
        "description": "Deactivates a kit by given id",
        "operationId": "Wms.Inventory.KitController.deactivate",
        "parameters": [
          {
            "description": "Kit ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deactivates a kit by given id",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/loading_unit_templates": {
      "get": {
        "description": "Searches loading unit templates",
        "operationId": "Wms.Inventory.LoadingUnitTemplateController.search",
        "parameters": [
          {
            "description": "ID of the loading unit template",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Warehouse ID",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Merchant ID",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Name of the loading unit template",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the loading unit template",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_LoadingUnitTemplate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches loading unit templates",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Creates a loading unit template",
        "operationId": "Wms.Inventory.LoadingUnitTemplateController.create",
        "parameters": [
          {
            "description": "Loading unit template Name",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the loading unit template, valid ones are `bag`, `bin`, `box`, `mix_container`, `pallet`",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Weight of an empty loading unit template",
            "in": "form_data",
            "name": "weight",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Height of loading unit template",
            "in": "form_data",
            "name": "height",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Width of loading unit template",
            "in": "form_data",
            "name": "width",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Length of loading unit template",
            "in": "form_data",
            "name": "length",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Merchant ID",
            "in": "form_data",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Is default loading unit template",
            "in": "form_data",
            "name": "is_default",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoadingUnitTemplate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a loading unit template",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/loading_unit_templates/{id}": {
      "delete": {
        "description": "Deletes a loading unit template according to the given id",
        "operationId": "Wms.Inventory.LoadingUnitTemplateController.delete",
        "parameters": [
          {
            "description": "Loading unit template ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoadingUnitTemplate"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a loading unit template according to the given id",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "Updates a loading unit template with the given ID",
        "operationId": "Wms.Inventory.LoadingUnitTemplateController.update",
        "parameters": [
          {
            "description": "Loading unit template ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Loading unit template Name",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the loading unit template, valid ones are `bag`, `bin`, `box`, `mix_container`, `pallet`",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Weight of an empty loading unit template",
            "in": "form_data",
            "name": "weight",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Height of loading unit template",
            "in": "form_data",
            "name": "height",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Width of loading unit template",
            "in": "form_data",
            "name": "width",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Length of loading unit template",
            "in": "form_data",
            "name": "length",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Is default loading unit template",
            "in": "form_data",
            "name": "is_default",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoadingUnitTemplate"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a loading unit template with the given ID",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products": {
      "get": {
        "description": "Searches a list of products",
        "operationId": "Wms.Inventory.ProductController.search",
        "parameters": [
          {
            "description": "Product ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product SKU",
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product Barcode",
            "in": "query",
            "name": "barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product Name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Description of product",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of management `serial`, `lot` or `none`",
            "in": "query",
            "name": "management_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Third party unique ID",
            "in": "query",
            "name": "third_party_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a product is active or not",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Delivery date of related orders of products. Available filters are `gte:date`, `gt:date`, `lte:date`, `lt:date`, `between:date1,date2` or `date`\n `gte: grater than or equal`, gt: `greater than`, lte: `less than or equal`, lt: `less than`",
            "in": "query",
            "name": "related_orders_delivery_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of related orders of products",
            "in": "query",
            "name": "related_orders_state",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Product"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of products",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Creates a new product with its bar codes and its product categories",
        "operationId": "Wms.Inventory.ProductController.create",
        "parameters": [
          {
            "description": "Product body request",
            "in": "body",
            "name": "product",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a new product with its bar codes and its product categories",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "Updates a list of product",
        "operationId": "Wms.Inventory.ProductController.batch_update",
        "parameters": [
          {
            "description": "List of products map to be updated",
            "in": "body",
            "name": "product_list_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductListRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Product"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a list of product",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/batches": {
      "get": {
        "description": "Searches batches given an optional criteria list",
        "operationId": "Wms.Inventory.BatchController.search",
        "parameters": [
          {
            "description": "Product ID",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical number of batch",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of batch `lot`, `serial`, `none`",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Expiration Date of batch, Format YYYY-MM-DD",
            "in": "query",
            "name": "expiration_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Client Identifier associated to batch",
            "in": "query",
            "name": "client_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit number for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset number for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If true returns only batches with existing stock in available locations",
            "in": "query",
            "name": "existing_stock",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If true includes batches with stock in unavailable locations",
            "in": "query",
            "name": "show_unavailable_stock",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches batches given an optional criteria list",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/batches/search": {
      "post": {
        "description": "Searches batches given an optional criteria list",
        "operationId": "Wms.Inventory.BatchController.post_search",
        "parameters": [
          {
            "description": "Product ID",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical number of batch",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of batch `lot`, `serial`, `none`",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Expiration Date of batch, Format YYYY-MM-DD",
            "in": "query",
            "name": "expiration_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Client Identifier associated to batch",
            "in": "query",
            "name": "client_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit number for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset number for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches batches given an optional criteria list",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/batches/{id}": {
      "get": {
        "description": "Show a batch by given ID",
        "operationId": "Wms.Inventory.BatchController.show",
        "parameters": [
          {
            "description": "Batch ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a batch by given ID",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "Update fields of batch by given ID",
        "operationId": "Wms.Inventory.BatchController.update",
        "parameters": [
          {
            "description": "Batch ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Alphanumerical number of batch",
            "in": "form_data",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of batch `lot`, `serial`, `none`",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Expiration Date of batch, Format YYYY-MM-DD",
            "in": "form_data",
            "name": "expiration_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Client Identifier associated to batch",
            "in": "form_data",
            "name": "client_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Supplier ID for the batch",
            "in": "form_data",
            "name": "third_party_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Update fields of batch by given ID",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/categories": {
      "get": {
        "description": "Lists the product_categories",
        "operationId": "Wms.Inventory.ProductCategoryController.search",
        "parameters": [
          {
            "description": "ID of product category",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Code of product category",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of product category",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_ProductCategory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the product_categories",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Creates and shows the new product_category according to given params",
        "operationId": "Wms.Inventory.ProductCategoryController.create",
        "parameters": [
          {
            "description": "Product category body request",
            "in": "body",
            "name": "product_category",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductCategory"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProductCategory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates and shows the new product_category according to given params",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/categories/{id}": {
      "delete": {
        "description": "Deletes a product_category by given id",
        "operationId": "Wms.Inventory.ProductCategoryController.delete",
        "parameters": [
          {
            "description": "ID of product category",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a product_category by given id",
        "tags": [
          "Inventory"
        ]
      },
      "get": {
        "description": "Shows a product category by given ID",
        "operationId": "Wms.Inventory.ProductCategoryController.show",
        "parameters": [
          {
            "description": "ID of product category",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductCategory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows a product category by given ID",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "Updates fields of product_category by given id",
        "operationId": "Wms.Inventory.ProductCategoryController.update",
        "parameters": [
          {
            "description": "ID of product category to edit",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product category body request",
            "in": "body",
            "name": "product_category",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductCategory"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductCategory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates fields of product_category by given id",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/open": {
      "get": {
        "description": "Searches a list of products given a product params (open mode)\nThe parameters are optional",
        "operationId": "Wms.Inventory.ProductController.o_search",
        "parameters": [
          {
            "description": "Product ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product SKU",
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product Barcode",
            "in": "query",
            "name": "barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product Name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Description of product",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of management `serial`, `lot` or `none`",
            "in": "query",
            "name": "management_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Third party unique ID",
            "in": "query",
            "name": "third_party_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Merchant unique ID",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a product is active or not",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Delivery date of related orders of products. Available filters are `gte:date`, `gt:date`, `lte:date`, `lt:date`, `between:date1,date2` or `date`\n `gte: grater than or equal`, gt: `greater than`, lte: `less than or equal`, lt: `less than`",
            "in": "query",
            "name": "related_orders_delivery_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of related orders of products",
            "in": "query",
            "name": "related_orders_state",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Product"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of products given a product params (open mode)\nThe parameters are optional",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/osearch": {
      "post": {
        "description": "Searches a list of products given a product params (open mode)",
        "operationId": "Wms.Inventory.ProductController.post_osearch",
        "parameters": [
          {
            "description": "Product ID",
            "in": "form_data",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product SKU",
            "in": "form_data",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product Barcode",
            "in": "form_data",
            "name": "barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product Name",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Description of product",
            "in": "form_data",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of management `serial`, `lot` or `none`",
            "in": "form_data",
            "name": "management_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a product is active or not",
            "in": "form_data",
            "name": "active",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Product"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of products given a product params (open mode)",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/search": {
      "post": {
        "description": "Searches a list of products given a product params\nThe parameters are optional",
        "operationId": "Wms.Inventory.ProductController.post_search",
        "parameters": [
          {
            "description": "Product ID",
            "in": "form_data",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product SKU",
            "in": "form_data",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product Barcode",
            "in": "form_data",
            "name": "barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product Name",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Description of product",
            "in": "form_data",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of management `serial`, `lot` or `none`",
            "in": "form_data",
            "name": "management_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Third party unique ID",
            "in": "form_data",
            "name": "third_party_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a product is active or not",
            "in": "form_data",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Delivery date of related orders of products. Available filters are `gte:date`, `gt:date`, `lte:date`, `lt:date`, `between:date1,date2` or `date`\n `gte: grater than or equal`, gt: `greater than`, lte: `less than or equal`, lt: `less than`",
            "in": "query",
            "name": "related_orders_delivery_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of related orders of products",
            "in": "query",
            "name": "related_orders_state",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Product"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of products given a product params\nThe parameters are optional",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/trace": {
      "get": {
        "description": "Show incoming/outgoing movements resume.",
        "operationId": "Wms.Inventory.StockController.incoming_outgoing",
        "parameters": [
          {
            "description": "Product ID filter",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Date filter",
            "in": "form_data",
            "name": "date",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show incoming/outgoing movements resume.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/upload": {
      "post": {
        "description": "Create multiple products from a CSV file",
        "operationId": "Wms.Inventory.ProductController.upload",
        "parameters": [
          {
            "description": "Path to CSV file",
            "in": "form_data",
            "name": "file",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create multiple products from a CSV file",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/{id}": {
      "delete": {
        "description": "Delete a product by given ID",
        "operationId": "Wms.Inventory.ProductController.delete",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete a product by given ID",
        "tags": [
          "Inventory"
        ]
      },
      "get": {
        "description": "Fetch a product",
        "operationId": "Wms.Inventory.ProductController.show",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch a product",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "Updates a product",
        "operationId": "Wms.Inventory.ProductController.update",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product to update",
            "in": "body",
            "name": "product",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a product",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/{id}/attach": {
      "post": {
        "description": "Attach a document with a product",
        "operationId": "Wms.Inventory.ProductController.attach",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Path to document file",
            "in": "form_data",
            "name": "attachment",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of the attachment",
            "in": "form_data",
            "name": "filename",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the attachment",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Attach a document with a product",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/{id}/batches": {
      "get": {
        "description": "Searches a list of batches given a product id",
        "operationId": "Wms.Inventory.BatchController.search_by_product",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Alphanumerical number of batch",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of batch `lot`, `serial`, `none`",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Expiration Date of batch, Format YYYY-MM-DD",
            "in": "query",
            "name": "expiration_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Client Identifier associated to batch",
            "in": "query",
            "name": "client_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit number for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset number for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of batches given a product id",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Creates a batch",
        "operationId": "Wms.Inventory.BatchController.create",
        "parameters": [
          {
            "description": "Alphanumerical number of batch",
            "in": "form_data",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of batch `lot`, `serial`, `none`",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Expiration Date of batch, Format YYYY-MM-DD",
            "in": "form_data",
            "name": "expiration_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Client Identifier associated to batch",
            "in": "form_data",
            "name": "client_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Supplier ID for the batch",
            "in": "form_data",
            "name": "third_party_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a batch",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/{id}/skus": {
      "get": {
        "description": "Searches a list of product skus given a product id",
        "operationId": "Wms.Inventory.ProductSkuController.search",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The state of the product",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Default state of the product sku",
            "in": "query",
            "name": "is_default",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The product sku",
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "description": "Supplier product ID",
            "in": "query",
            "name": "supplier_product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Name of the product sku",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Description of the product sku",
            "in": "query",
            "name": "desciption",
            "required": false,
            "type": "string"
          },
          {
            "description": "Third party ID",
            "in": "query",
            "name": "third_party_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit number for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset number for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of product skus given a product id",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Creates a new product sku",
        "operationId": "Wms.Inventory.ProductSkuController.create",
        "parameters": [
          {
            "description": "Product sku body request",
            "in": "body",
            "name": "product_sku",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductSku"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProductSku"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a new product sku",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/products/{id}/skus/{sku_id}": {
      "delete": {
        "description": "Deletes a product sku",
        "operationId": "Wms.Inventory.ProductSkuController.delete",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product sku ID",
            "in": "path",
            "name": "sku_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductSku"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a product sku",
        "tags": [
          "Inventory"
        ]
      },
      "get": {
        "description": "Gets a SKU of a product",
        "operationId": "Wms.Inventory.ProductSkuController.show",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "SKU ID",
            "in": "path",
            "name": "sku_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductSku"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Gets a SKU of a product",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "Updates a product sku",
        "operationId": "Wms.Inventory.ProductSkuController.update",
        "parameters": [
          {
            "description": "Product ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product sku ID",
            "in": "path",
            "name": "sku_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product sku body request",
            "in": "body",
            "name": "product_sku",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductSku"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductSku"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a product sku",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks": {
      "get": {
        "description": "Lists the stocks according the given parameters.",
        "operationId": "Wms.Inventory.StockController.index",
        "parameters": [
          {
            "description": "Product ID of stock",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID of stock",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Batch ID of stock",
            "in": "query",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Zone ID of stock",
            "in": "query",
            "name": "zone_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Rack ID of stock",
            "in": "query",
            "name": "rack_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location Type ID",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Stock State ID",
            "in": "query",
            "name": "stock_state_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Hallway of the location",
            "in": "query",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row of the location",
            "in": "query",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module of the location",
            "in": "query",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level of the location",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product barcodes of stock",
            "in": "query",
            "name": "product_barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Position of the location",
            "in": "query",
            "name": "position",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Stock"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the stocks according the given parameters.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/add": {
      "post": {
        "description": "Adds a stock quantity.",
        "operationId": "Wms.Inventory.StockController.add",
        "parameters": [
          {
            "description": "Quantity to add",
            "in": "form_data",
            "name": "quantity",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location of stock",
            "in": "form_data",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product of stock",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Batch of stock",
            "in": "form_data",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Adds a stock quantity.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/alerts": {
      "get": {
        "description": "Lists the product_quantity_alerts according the given parameters",
        "operationId": "Wms.Inventory.ProductQuantityAlertController.index",
        "parameters": [
          {
            "description": "User ID",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product ID",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the product_quantity_alerts according the given parameters",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Creates or updates a product_quantity_alert",
        "operationId": "Wms.Inventory.ProductQuantityAlertController.create",
        "parameters": [
          {
            "description": "User ID",
            "in": "form_data",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product ID",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID",
            "in": "form_data",
            "name": "location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates or updates a product_quantity_alert",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/alerts/{id}": {
      "delete": {
        "description": "Deletes a product_quantity_alert by id",
        "operationId": "Wms.Inventory.ProductQuantityAlertController.delete",
        "parameters": [
          {
            "description": "Product quantity alert ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a product_quantity_alert by id",
        "tags": [
          "Inventory"
        ]
      },
      "get": {
        "description": "Gets a product_quantity_alert by id",
        "operationId": "Wms.Inventory.ProductQuantityAlertController.show",
        "parameters": [
          {
            "description": "Product quantity alert ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Gets a product_quantity_alert by id",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/availability": {
      "get": {
        "description": "Lists the availability of a given product ID list\nProduct availability is the stock quantity (for only picking type locations) minus the quantity in sales order accepted.\nCan receive a list in the query params",
        "operationId": "Wms.Inventory.StockController.availability",
        "parameters": [
          {
            "description": "List of product IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of warehouse IDs",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Availability"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the availability of a given product ID list\nProduct availability is the stock quantity (for only picking type locations) minus the quantity in sales order accepted.\nCan receive a list in the query params",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/availability/products/batches": {
      "get": {
        "description": "Lists the batch availability of a given product ID",
        "operationId": "Wms.Inventory.StockController.stock_availability_batch",
        "parameters": [
          {
            "description": "list of product IDs",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "list of warehouse IDs",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AvailabilityBatch_ResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the batch availability of a given product ID",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/availability/products/{id}/batches": {
      "get": {
        "description": "Lists the batch availability of a given product ID",
        "operationId": "Wms.Inventory.StockController.availability_batches",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the batch availability of a given product ID",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/availability/search": {
      "post": {
        "description": "Lists the availability of a given product ID list, Product availability is the stock quantity (for only picking type locations) minus the quantity in sales order accepted. Can receive a list in the query params",
        "operationId": "Wms.Inventory.StockController.post_availability",
        "parameters": [
          {
            "description": "list of product IDs",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "list of warehouse IDs",
            "in": "path",
            "name": "warehouse_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Availability"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the availability of a given product ID list, Product availability is the stock quantity (for only picking type locations) minus the quantity in sales order accepted. Can receive a list in the query params",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/correct": {
      "post": {
        "description": "Corrects the stock of a product in an specific location in the given warehouse",
        "operationId": "Wms.Inventory.StockController.correct",
        "parameters": [
          {
            "description": "Stock Correction body request",
            "in": "body",
            "name": "stock_correction_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StockCorrectionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/StockCorrection"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Corrects the stock of a product in an specific location in the given warehouse",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/corrections": {
      "get": {
        "description": "Lists stock corrections filtering by following params",
        "operationId": "Wms.Inventory.StockController.search_stock_corrections",
        "parameters": [
          {
            "description": "Product name of the stock correction",
            "in": "query",
            "name": "product_sku",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product sku of the stock correction",
            "in": "query",
            "name": "product_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Location code of the stock correction",
            "in": "query",
            "name": "location_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_StockCorrection"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists stock corrections filtering by following params",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/count": {
      "get": {
        "description": "Totalize the stocks according the given parameters",
        "operationId": "Wms.Inventory.StockController.count",
        "parameters": [
          {
            "description": "Product ID of stock",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID of stock",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Zone ID of stock",
            "in": "query",
            "name": "zone_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location Type ID",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Stock State ID",
            "in": "query",
            "name": "stock_state_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Batch ID of stock",
            "in": "query",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Totalize the stocks according the given parameters",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/expiring": {
      "get": {
        "description": "Lists the stocks with expiring date ascendant according to the given\nparameters.",
        "operationId": "Wms.Inventory.StockController.expiring",
        "parameters": [
          {
            "description": "Product ID of stock",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID of stock",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Zone ID of stock",
            "in": "query",
            "name": "zone_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location Type ID",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Stock State ID",
            "in": "query",
            "name": "stock_state_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Batch ID of stock",
            "in": "query",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the stocks with expiring date ascendant according to the given\nparameters.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/historical": {
      "get": {
        "description": "Lists a historical of stocks transactions filtered by user's tenant.",
        "operationId": "Wms.Inventory.StockHistoryController.historical_data",
        "parameters": [
          {
            "description": "Product SKU of stock",
            "in": "query",
            "name": "product_sku",
            "required": false,
            "type": "string"
          },
          {
            "description": "Location Code of stock",
            "in": "query",
            "name": "location_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product ID of stock",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID of stock",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "operated_at",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Warehouse of the stock",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User which made the stock transaction",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Origin of the transaction, available types are:\n `picking packing shipping movement counting kitting incoming_good stock_mod initial_stock`",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_StockRecord"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists a historical of stocks transactions filtered by user's tenant.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/historical/reports": {
      "get": {
        "description": "Responses a CSV with a historical of stocks transactions filtered by user's tenant.",
        "operationId": "Wms.Inventory.StockHistoryController.historical_data_csv",
        "parameters": [
          {
            "description": "Product ID of stock",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID of stock",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "operated_at",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Warehouse of the stock",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "User which made the stock transaction",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Origin of the transaction, available types are:\n `picking packing shipping movement counting kitting incoming_good stock_mod initial_stock`",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Responses a CSV with a historical of stocks transactions filtered by user's tenant.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/move": {
      "post": {
        "description": "Moves a stock quantity from origin_location to destination_location",
        "operationId": "Wms.Inventory.StockController.move",
        "parameters": [
          {
            "description": "Origin location ID",
            "in": "form_data",
            "name": "origin_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Destination Location ID",
            "in": "form_data",
            "name": "destination_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Quantity to move",
            "in": "form_data",
            "name": "quantity",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Moves a stock quantity from origin_location to destination_location",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/occupied_locations": {
      "get": {
        "description": "Report occupied positions tock according to given ID",
        "operationId": "Wms.Inventory.StockController.occupied_locations",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Report occupied positions tock according to given ID",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/products/locations": {
      "get": {
        "description": "Lists the stocks grouped by product and location according to the given params",
        "operationId": "Wms.Inventory.StockController.search_by_product_and_location",
        "parameters": [
          {
            "description": "Product ID of stock",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID of stock",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Batch ID of stock",
            "in": "query",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location Type ID",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Stock State ID",
            "in": "query",
            "name": "stock_state_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product name of stock",
            "in": "query",
            "name": "product_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product barcodes of stock",
            "in": "query",
            "name": "product_barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product sku of stock",
            "in": "query",
            "name": "product_sku",
            "required": false,
            "type": "string"
          },
          {
            "description": "Location code of stock",
            "in": "query",
            "name": "location_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Stock"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the stocks grouped by product and location according to the given params",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/remove": {
      "post": {
        "description": "Removes a stock quantity",
        "operationId": "Wms.Inventory.StockController.remove",
        "parameters": [
          {
            "description": "Quantity to remove",
            "in": "form_data",
            "name": "quantity",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location of stock",
            "in": "form_data",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product of stock",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Batch of stock",
            "in": "form_data",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Removes a stock quantity",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/report": {
      "get": {
        "description": "Responses a CSV with the summary stock according to given list of\nwarehouse IDs and list of product IDs\nif product IDs are not provided, it returns all products\nif warehouse IDs are not provided, it returns all warehouses",
        "operationId": "Wms.Inventory.StockController.summary_stock_csv",
        "parameters": [
          {
            "description": "list of product IDs",
            "in": "path",
            "name": "product_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "list of warehouse IDs",
            "in": "path",
            "name": "warehouse_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Responses a CSV with the summary stock according to given list of\nwarehouse IDs and list of product IDs\nif product IDs are not provided, it returns all products\nif warehouse IDs are not provided, it returns all warehouses",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/search": {
      "post": {
        "description": "Lists the stocks according the given parameters.",
        "operationId": "Wms.Inventory.StockController.search",
        "parameters": [
          {
            "description": "Product ID of stock",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID of stock",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Zone ID of stock",
            "in": "query",
            "name": "zone_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location Type ID",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Stock State ID",
            "in": "query",
            "name": "stock_state_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Batch ID of stock",
            "in": "query",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the stocks according the given parameters.",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/states": {
      "get": {
        "description": "Lists the stock states according the given parameters",
        "operationId": "Wms.Inventory.StockStateController.index",
        "parameters": [
          {
            "description": "Name of stock state",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Availability of stock state",
            "in": "query",
            "name": "available",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Warehouse ID of stock state",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the stock states according the given parameters",
        "tags": [
          "Inventory"
        ]
      },
      "post": {
        "description": "Creates a new stock state",
        "operationId": "Wms.Inventory.StockStateController.create",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a new stock state",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/states/{id}": {
      "get": {
        "description": "Fetch a stock state with by given id",
        "operationId": "Wms.Inventory.StockStateController.show",
        "parameters": [
          {
            "description": "Stock state ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch a stock state with by given id",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/summary": {
      "get": {
        "description": "Returns a stock summary grouped by products\nCan be filter by an specific list of warehouses and products",
        "operationId": "Wms.Inventory.StockController.summary_stock",
        "parameters": [
          {
            "description": "list of product IDs",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "list of warehouse IDs",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StockSummary_ResponseList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Returns a stock summary grouped by products\nCan be filter by an specific list of warehouses and products",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/thresholds": {
      "get": {
        "description": "Lists the stock_thresholds according the given parameters",
        "operationId": "Wms.Inventory.StockThresholdController.index",
        "parameters": [
          {
            "description": "Product ID",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Receives a string with the search syntax allowing the model's fields plus product_name, product_sku and location_code",
            "in": "query",
            "name": "__search",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the stock_thresholds according the given parameters",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "Creates or updates a stock threshold. For updating the id of the existing stock threshold must be sent. Product id and location id must be unique per stock threshold",
        "operationId": "Wms.Inventory.StockThresholdController.merge",
        "parameters": [
          {
            "description": "Id of the stock threshold - for updating",
            "in": "form_data",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum quantity allowed in location",
            "in": "form_data",
            "name": "max",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Minimum quantity allowed in location",
            "in": "form_data",
            "name": "min",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Round option for replenishment quantities based on units_per_purchase_package of the product. Valid options are `exact`, `round_up` and `round_down`",
            "in": "form_data",
            "name": "round_option",
            "required": false,
            "type": "string"
          },
          {
            "description": "Product ID",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Location ID",
            "in": "form_data",
            "name": "location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates or updates a stock threshold. For updating the id of the existing stock threshold must be sent. Product id and location id must be unique per stock threshold",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/thresholds/replenish": {
      "get": {
        "description": "Calculates replenishment items according to given params",
        "operationId": "Wms.Inventory.StockThresholdController.replenish",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Calculates replenishment items according to given params",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/thresholds/{id}": {
      "delete": {
        "description": "Deletes a stock_threshold by ID",
        "operationId": "Wms.Inventory.StockThresholdController.delete",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a stock_threshold by ID",
        "tags": [
          "Inventory"
        ]
      },
      "get": {
        "description": "Gets a stock_threshold by id",
        "operationId": "Wms.Inventory.StockThresholdController.show",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Gets a stock_threshold by id",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/stocks/{id}": {
      "patch": {
        "description": "Updates a specific field on stock controller",
        "operationId": "Wms.Inventory.StockController.update_field",
        "parameters": [
          {
            "description": "replace",
            "in": "form_data",
            "name": "op",
            "required": false,
            "type": "string"
          },
          {
            "description": "/stock_state_id",
            "in": "form_data",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "Value of stock state ID",
            "in": "form_data",
            "name": "value",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a specific field on stock controller",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/{id}": {
      "delete": {
        "description": "Delete a inventory given Id",
        "operationId": "Wms.Inventory.InventoryController.delete",
        "parameters": [
          {
            "description": "Inventory ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete a inventory given Id",
        "tags": [
          "Inventory"
        ]
      },
      "get": {
        "description": "Show a inventory given ID",
        "operationId": "Wms.Inventory.InventoryController.show",
        "parameters": [
          {
            "description": "Inventory ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a inventory given ID",
        "tags": [
          "Inventory"
        ]
      },
      "put": {
        "description": "update a inventory given ID",
        "operationId": "Wms.Inventory.InventoryController.update",
        "parameters": [
          {
            "description": "Inventory ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Title of Inventory",
            "in": "form_data",
            "name": "title",
            "required": false,
            "type": "string"
          },
          {
            "description": "Note of inventory",
            "in": "form_data",
            "name": "notes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start date of inventory in YYYY-MM-DD",
            "in": "form_data",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "End Date of inventory in YYYY-MM-DD",
            "in": "form_data",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of the inventory `queue`, `in_progress`, `finished`",
            "in": "form_data",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "ID of the Owner of inventory",
            "in": "form_data",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "update a inventory given ID",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/kitting/tasks": {
      "get": {
        "description": "Searches a list of kitting tasks",
        "operationId": "Wms.Kitting.KittingTaskController.search",
        "parameters": [
          {
            "description": "Kitting task ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Consecutive number of task",
            "in": "query",
            "name": "sequence_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Task state",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of kitting tasks",
        "tags": [
          "Kitting"
        ]
      },
      "post": {
        "description": "Creates a Kitting task",
        "operationId": "Wms.Kitting.KittingTaskController.create",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Owner ID",
            "in": "form_data",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Destination Location ID",
            "in": "form_data",
            "name": "destination_location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a Kitting task",
        "tags": [
          "Kitting"
        ]
      }
    },
    "/kitting/tasks/{id}": {
      "get": {
        "description": "Fetch a kitting task by given id",
        "operationId": "Wms.Kitting.KittingTaskController.show",
        "parameters": [
          {
            "description": "Kitting task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch a kitting task by given id",
        "tags": [
          "Kitting"
        ]
      },
      "put": {
        "description": "update a kit given ID",
        "operationId": "Wms.Kitting.KittingTaskController.update",
        "parameters": [
          {
            "description": "Kit ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "update a kit given ID",
        "tags": [
          "Kitting"
        ]
      }
    },
    "/kitting/tasks/{id}/cancel": {
      "post": {
        "description": "Cancels a kitting task",
        "operationId": "Wms.Kitting.KittingTaskController.cancel",
        "parameters": [
          {
            "description": "Kitting Task ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Cancels a kitting task",
        "tags": [
          "Kitting"
        ]
      }
    },
    "/merchants/": {
      "get": {
        "description": " Searches a list of merchants by given parameters. The parameters are optional",
        "operationId": "Wms.Merchant.MerchantController.search",
        "parameters": [
          {
            "description": "ID of the merchants, to filter for multiple merchant ids: `id:to_list:1,2,3`",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Name of the merchant",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Full name of the merchant",
            "in": "query",
            "name": "full_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Phone number of the merchant",
            "in": "query",
            "name": "phone_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Email of the merchant",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a merchant is default or not",
            "in": "query",
            "name": "is_default",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Whether a merchant is active or not",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "City of the merchant",
            "in": "query",
            "name": "city",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of the merchant",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country code of the merchant",
            "in": "query",
            "name": "country_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Site of the merchant",
            "in": "query",
            "name": "site",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fulfillment warehouse of the merchant",
            "in": "query",
            "name": "fulfillment_warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Priority of the merchant",
            "in": "query",
            "name": "priority",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Merchant"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Searches a list of merchants by given parameters. The parameters are optional",
        "tags": [
          "Merchant"
        ]
      },
      "post": {
        "description": "Create a Merchant",
        "operationId": "Wms.Merchant.MerchantController.create",
        "parameters": [
          {
            "description": "Merchant",
            "in": "body",
            "name": "merchant",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create a Merchant",
        "tags": [
          "Merchant"
        ]
      }
    },
    "/merchants/{id}": {
      "get": {
        "description": " Get a single Merchant",
        "operationId": "Wms.Merchant.MerchantController.show",
        "parameters": [
          {
            "description": "Merchant ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Get a single Merchant",
        "tags": [
          "Merchant"
        ]
      },
      "put": {
        "description": "Updates a merchant by a given ID",
        "operationId": "Wms.Merchant.MerchantController.update",
        "parameters": [
          {
            "description": "Merchant ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Merchant body request",
            "in": "body",
            "name": "merchant",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a merchant by a given ID",
        "tags": [
          "Merchant"
        ]
      }
    },
    "/merchants/{id}/channels": {
      "get": {
        "description": "Searches a list of channels by given parameters. The parameters are optional",
        "operationId": "Wms.Merchant.ChannelController.search",
        "parameters": [
          {
            "description": "ID of the channels, to filter for multiple channel ids: `id:to_list:1,2,3`",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Name of the channel",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Full name of the channel",
            "in": "query",
            "name": "full_name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether a channel is default or not",
            "in": "query",
            "name": "is_default",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Whether a channel is active or not",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "City of the channel",
            "in": "query",
            "name": "city",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of the channel",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country code of the channel",
            "in": "query",
            "name": "country_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Site of the channel",
            "in": "query",
            "name": "site",
            "required": false,
            "type": "string"
          },
          {
            "description": "Line address of the channel",
            "in": "query",
            "name": "line1",
            "required": false,
            "type": "string"
          },
          {
            "description": "Line address of the channel",
            "in": "query",
            "name": "line2",
            "required": false,
            "type": "string"
          },
          {
            "description": "Postal code of the channel",
            "in": "query",
            "name": "zip_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Priority of the channel",
            "in": "query",
            "name": "priority",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Channel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of channels by given parameters. The parameters are optional",
        "tags": [
          "Merchant"
        ]
      },
      "post": {
        "description": "Create a Channel",
        "operationId": "Wms.Merchant.ChannelController.create",
        "parameters": [
          {
            "description": "Channel",
            "in": "body",
            "name": "channel",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create a Channel",
        "tags": [
          "Merchant"
        ]
      }
    },
    "/merchants/{id}/channels/{channel_id}": {
      "get": {
        "description": " Get the channel",
        "operationId": "Wms.Merchant.ChannelController.get_channel",
        "parameters": [
          {
            "description": "Merchant ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Channel ID",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Get the channel",
        "tags": [
          "Merchant"
        ]
      },
      "put": {
        "description": " Update the merchant channel",
        "operationId": "Wms.Merchant.ChannelController.update_channel",
        "parameters": [
          {
            "description": "Merchant ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Channel ID",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Channel",
            "in": "body",
            "name": "channel",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Update the merchant channel",
        "tags": [
          "Merchant"
        ]
      }
    },
    "/notification/": {
      "get": {
        "description": "Searches a list of notifications according to given params",
        "operationId": "Wms.Notification.NotificationController.index",
        "parameters": [
          {
            "description": "Event of Message",
            "in": "query",
            "name": "event",
            "required": false,
            "type": "string"
          },
          {
            "description": "Event of Message",
            "in": "query",
            "name": "checked",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Content of Message (json)",
            "in": "query",
            "name": "body",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of notifications according to given params",
        "tags": [
          "Notification"
        ]
      }
    },
    "/notification/{id}": {
      "delete": {
        "description": "Deletes a notification by given id",
        "operationId": "Wms.Notification.NotificationController.delete",
        "parameters": [
          {
            "description": "Message ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a notification by given id",
        "tags": [
          "Notification"
        ]
      },
      "get": {
        "description": "Shows a notification by given id",
        "operationId": "Wms.Notification.NotificationController.show",
        "parameters": [
          {
            "description": "Message ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows a notification by given id",
        "tags": [
          "Notification"
        ]
      },
      "put": {
        "description": "Updates a notification by given ID",
        "operationId": "Wms.Notification.NotificationController.update",
        "parameters": [
          {
            "description": "Event of Message",
            "in": "form_data",
            "name": "event",
            "required": false,
            "type": "string"
          },
          {
            "description": "Event of Message",
            "in": "form_data",
            "name": "checked",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Content of Message",
            "in": "form_data",
            "name": "body",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a notification by given ID",
        "tags": [
          "Notification"
        ]
      }
    },
    "/packing/boxes": {
      "get": {
        "description": "Searches a list of shipment box given params",
        "operationId": "Wms.Packing.ShipmentBoxTemplateController.search",
        "parameters": [
          {
            "description": "Box Name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Weight of an empty shipment box",
            "in": "query",
            "name": "weight",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Height of shipment box",
            "in": "query",
            "name": "height",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Width of shipment box",
            "in": "query",
            "name": "width",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Lenght of shipment box",
            "in": "query",
            "name": "length",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Warehouse ID",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of shipment box given params",
        "tags": [
          "Packing"
        ]
      },
      "post": {
        "description": "Creates a shipment box template definition",
        "operationId": "Wms.Packing.ShipmentBoxTemplateController.create",
        "parameters": [
          {
            "description": "Box Name",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Weight of an empty shipment box",
            "in": "form_data",
            "name": "weight",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Height of shipment box",
            "in": "form_data",
            "name": "height",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Width of shipment box",
            "in": "form_data",
            "name": "width",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Lenght of shipment box",
            "in": "form_data",
            "name": "length",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a shipment box template definition",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/boxes/attachments": {
      "post": {
        "description": "Fetches attachments from a list of packing box IDs",
        "operationId": "Wms.Packing.PackingBoxController.fetch_attachments",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttachmentResponseList"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetches attachments from a list of packing box IDs",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/boxes/bulk/attachments": {
      "post": {
        "description": "Register file metadata from s3 response in bulk for packing boxes",
        "operationId": "Wms.Packing.PackingBoxController.register_attachment_in_bulk",
        "parameters": [
          {
            "description": "Bulk packing boxes attachments metadata request",
            "in": "body",
            "name": "bulk_attachment_metadata_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkAttachmentMetadataRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_PackingBox"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Register file metadata from s3 response in bulk for packing boxes",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/boxes/{id}": {
      "delete": {
        "description": "Deletes a shipment box data according to the given id",
        "operationId": "Wms.Packing.ShipmentBoxTemplateController.delete",
        "parameters": [
          {
            "description": "Shipment box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a shipment box data according to the given id",
        "tags": [
          "Packing"
        ]
      },
      "get": {
        "description": "Show shipment box data according to the given id",
        "operationId": "Wms.Packing.ShipmentBoxTemplateController.show",
        "parameters": [
          {
            "description": "Shipment box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show shipment box data according to the given id",
        "tags": [
          "Packing"
        ]
      },
      "put": {
        "description": "updates a shipment box given ID",
        "operationId": "Wms.Packing.ShipmentBoxTemplateController.update",
        "parameters": [
          {
            "description": "Shipment Box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "updates a shipment box given ID",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/locations": {
      "get": {
        "description": "List the available packing locations for a picking task",
        "operationId": "Wms.Packing.PackingOrderController.packing_locations",
        "parameters": [
          {
            "description": "Fulfillment Order ID",
            "in": "query",
            "name": "fulfillment_order_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "List the available packing locations for a picking task",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders": {
      "get": {
        "description": "Searches a list of packing orders given a packing order params",
        "operationId": "Wms.Packing.PackingOrderController.search",
        "parameters": [
          {
            "description": "Sales order ID associated to the packing",
            "in": "query",
            "name": "sales_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Unique ID of the warehouse",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "State of packing order, the states available are `queue`, `taken`, `ended`, `closed`, `locked`, `cancelled`, `draft`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Owner's ID of the packing order",
            "in": "query",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Merchant's ID of the sales order associated to the packing",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Channel's ID of the sales order associated to the packing",
            "in": "query",
            "name": "merchant_channel_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of attributes separated by `,` to show in the response. An empty string shows all attributes. e.g.: *id,sequence_number,state*",
            "in": "query",
            "name": "view_attributes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Packing location ID",
            "in": "query",
            "name": "origin_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Shipping location id associated to the packing",
            "in": "query",
            "name": "destination_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Packing location code associated to the packing",
            "in": "query",
            "name": "origin_location_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start date in format YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "End date in format YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Creation date in format YYYY-MM-DD",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Date of last update YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_PackingOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of packing orders given a packing order params",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/boxes/bulk/shipment_tracking": {
      "post": {
        "description": "This endpoint works as bulk, it means that if any shipment trackings creation or update fails it will continue with the others until the end.",
        "operationId": "Wms.Packing.ShipmentTrackingController.bulk_actions",
        "parameters": [
          {
            "description": "List of shipment tracking maps to be created or updated",
            "in": "body",
            "name": "shipment_tracking_request_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ShipmentTracking"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_ShipmentTracking"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Operate create and update actions over Shipment Trackings.",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/boxes/search": {
      "get": {
        "description": "Searches a list of packing boxes. Can paginate, sending the query parameters: limit and offset, otherwise the\ndefault limit and offset are 0 and 10",
        "operationId": "Wms.Packing.PackingBoxController.index",
        "parameters": [
          {
            "description": "Box number",
            "in": "query",
            "name": "box_number",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Box name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ID of the product packed in box",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Shipment tracking code",
            "in": "query",
            "name": "tracking_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Shipping location of the packing box",
            "in": "query",
            "name": "shipping_location_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID where the packing box belongs",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Merchant ID where the packing box belongs",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Channel ID where the packing box belongs",
            "in": "query",
            "name": "merchant_channel_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_PackingBox"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of packing boxes. Can paginate, sending the query parameters: limit and offset, otherwise the\ndefault limit and offset are 0 and 10",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/bulk": {
      "post": {
        "description": "Operate actions over packing orders",
        "operationId": "Wms.Packing.PackingOrderController.bulk_actions",
        "parameters": [
          {
            "description": "Bulk Packing Actions Request",
            "in": "body",
            "name": "bulk_packing_actions_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkPackingActionsRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkPackingResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/BulkErrorsPackingResponse"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Operate actions over packing orders",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/search": {
      "post": {
        "description": "Searches a list of packing orders given a packing order params",
        "operationId": "Wms.Packing.PackingOrderController.post_search",
        "parameters": [
          {
            "description": "Sales order ID associated to the packing",
            "in": "query",
            "name": "sales_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Unique ID of the warehouse",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "State of packing order, the states available are `queue`, `taken`, `ended`, `closed`, `locked`, `cancelled`, `draft`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Owner's ID of the packing order",
            "in": "query",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Merchant's ID of the sales order associated to the packing",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Channel's ID of the sales order associated to the packing",
            "in": "query",
            "name": "merchant_channel_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of attributes separated by `,` to show in the response. An empty string shows all attributes. e.g.: *id,sequence_number,state*",
            "in": "query",
            "name": "view_attributes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Packing location ID",
            "in": "query",
            "name": "origin_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Shipping location id associated to the packing",
            "in": "query",
            "name": "destination_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Start date in format YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "End date in format YYYY-MM-DD hh:mm:ss between:date1,date2",
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Creation date in format YYYY-MM-DD between:date1,date2",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Date of last update YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_PackingOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of packing orders given a packing order params",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}": {
      "get": {
        "description": "Shows a packing order by given ID",
        "operationId": "Wms.Packing.PackingOrderController.show",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackingOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows a packing order by given ID",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}/accept": {
      "post": {
        "description": "Assign a packing order to a user",
        "operationId": "Wms.Packing.PackingOrderController.accept",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a packing order to a user",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}/assign": {
      "post": {
        "description": "Assigns owner to packing order",
        "operationId": "Wms.Packing.PackingOrderController.assign",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Onwer ID",
            "in": "form_data",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assigns owner to packing order",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}/close": {
      "post": {
        "description": " Closes a packing order",
        "operationId": "Wms.Packing.PackingOrderController.close",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "shipping_location_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Closes a packing order",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}/finish": {
      "post": {
        "description": "Finishes a packing order",
        "operationId": "Wms.Packing.PackingOrderController.finish",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Finishes a packing order",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}/lock": {
      "post": {
        "description": " Locks a packing order",
        "operationId": "Wms.Packing.PackingOrderController.lock",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Locks a packing order",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}/missing": {
      "post": {
        "description": "Reports missing quantities for an apparently good finished packing order",
        "operationId": "Wms.Packing.PackingOrderController.missing",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing Item ID",
            "in": "form_data",
            "name": "packing_item_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Product ID",
            "in": "form_data",
            "name": "batch_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Missing quantity",
            "in": "form_data",
            "name": "missing_quantity",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Reports missing quantities for an apparently good finished packing order",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}/shipping_locations": {
      "get": {
        "description": "List the available shipping locations for a packing task",
        "operationId": "Wms.Packing.PackingOrderController.shipping_locations",
        "parameters": [
          {
            "description": "Packing Order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "List the available shipping locations for a packing task",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{id}/unlock": {
      "post": {
        "description": "Unlocks a packing order",
        "operationId": "Wms.Packing.PackingOrderController.unlock",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Unlocks a packing order",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{packing_order_id}/box": {
      "post": {
        "description": "creates a packing box according to the given params in\nrequest_params",
        "operationId": "Wms.Packing.PackingBoxController.create_box",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product ID in the box",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Represent the number of ",
            "in": "form_data",
            "name": "box_number",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Quantity of products in Box",
            "in": "form_data",
            "name": "quantity",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PackingBox"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "creates a packing box according to the given params in\nrequest_params",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{packing_order_id}/boxes": {
      "get": {
        "description": "Searches a list of packing boxes given a packing order ID. Can paginate, sending the query parameters: limit and offset, otherwise the\ndefault limit and offset are 0 and 10",
        "operationId": "Wms.Packing.PackingBoxController.search",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Box number",
            "in": "query",
            "name": "box_number",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Box name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ID of the product packed in box",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Shipment tracking code",
            "in": "query",
            "name": "tracking_code",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_PackingBox"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of packing boxes given a packing order ID. Can paginate, sending the query parameters: limit and offset, otherwise the\ndefault limit and offset are 0 and 10",
        "tags": [
          "Packing"
        ]
      },
      "post": {
        "description": "creates a list of packing boxes according to the given params in\nrequest_params",
        "operationId": "Wms.Packing.PackingBoxController.create",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product ID in the box",
            "in": "form_data",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Represent the number of ",
            "in": "form_data",
            "name": "box_number",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Quantity of products in Box",
            "in": "form_data",
            "name": "quantity",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PackingBox"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "creates a list of packing boxes according to the given params in\nrequest_params",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{packing_order_id}/boxes/{box_id}": {
      "get": {
        "description": "Show packing box data according to the given id",
        "operationId": "Wms.Packing.PackingBoxController.show",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackingOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show packing box data according to the given id",
        "tags": [
          "Packing"
        ]
      },
      "put": {
        "description": "Updates packing box according to the given id\nUpdatable fields in packing boxes are: attributes",
        "operationId": "Wms.Packing.PackingBoxController.update",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Attributes for the packing box",
            "in": "form_data",
            "name": "attributes",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackingBox"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates packing box according to the given id\nUpdatable fields in packing boxes are: attributes",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{packing_order_id}/boxes/{box_id}/attach": {
      "post": {
        "description": "Attach a document with a packing box",
        "operationId": "Wms.Packing.PackingBoxController.upload_attachment",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Attachment request",
            "in": "body",
            "name": "attachment_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AttachmentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_PackingBox"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Attach a document with a packing box",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{packing_order_id}/boxes/{box_id}/attachment": {
      "post": {
        "description": "Register file metadata from s3 response",
        "operationId": "Wms.Packing.PackingBoxController.register_attachment",
        "parameters": [
          {
            "description": "Packing order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The file S3 ID",
            "in": "form_data",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User file name",
            "in": "form_data",
            "name": "filename",
            "required": false,
            "type": "string"
          },
          {
            "description": "File type",
            "in": "form_data",
            "name": "file_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "What the type of the attachment eg - label",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "file extention ie, pdf",
            "in": "form_data",
            "name": "extension",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PackingBox"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Register file metadata from s3 response",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{packing_order_id}/boxes/{box_id}/shipment_tracking": {
      "get": {
        "description": "Searches shipment trackings given a packing box ID",
        "operationId": "Wms.Packing.ShipmentTrackingController.search",
        "parameters": [
          {
            "description": "Packing Order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing Box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_ShipmentTracking"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches shipment trackings given a packing box ID",
        "tags": [
          "Packing"
        ]
      },
      "post": {
        "description": "Creates shipment tracking information for a packing box according to the given ID,\nwhich will be related to its attachment information",
        "operationId": "Wms.Packing.ShipmentTrackingController.create",
        "parameters": [
          {
            "description": "Packing Order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing Box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Shipment tracking body request",
            "in": "body",
            "name": "shipment_tracking",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ShipmentTracking"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ShipmentTracking"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates shipment tracking information for a packing box according to the given ID,\nwhich will be related to its attachment information",
        "tags": [
          "Packing"
        ]
      }
    },
    "/packing/orders/{packing_order_id}/boxes/{box_id}/shipment_tracking/{tracking_id}": {
      "delete": {
        "description": "Deletes a shipment tracking data according to the given id",
        "operationId": "Wms.Packing.ShipmentTrackingController.delete",
        "parameters": [
          {
            "description": "Packing Order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing Box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Shipment tracking ID",
            "in": "path",
            "name": "tracking_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a shipment tracking data according to the given id",
        "tags": [
          "Packing"
        ]
      },
      "get": {
        "description": "Shows a shipment tracking data according to the given ID",
        "operationId": "Wms.Packing.ShipmentTrackingController.show",
        "parameters": [
          {
            "description": "Packing Order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing Box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Shipment tracking ID",
            "in": "path",
            "name": "tracking_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ShipmentTracking"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows a shipment tracking data according to the given ID",
        "tags": [
          "Packing"
        ]
      },
      "put": {
        "description": "Updates field of a shipment tracking by a given ID",
        "operationId": "Wms.Packing.ShipmentTrackingController.update",
        "parameters": [
          {
            "description": "Packing Order ID",
            "in": "path",
            "name": "packing_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing Box ID",
            "in": "path",
            "name": "box_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Shipment tracking ID",
            "in": "path",
            "name": "tracking_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Shipment tracking body request",
            "in": "body",
            "name": "shipment_tracking",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ShipmentTracking"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ShipmentTracking"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates field of a shipment tracking by a given ID",
        "tags": [
          "Packing"
        ]
      }
    },
    "/picking/bulk/orders": {
      "post": {
        "description": "Creates a list of picking orders according to the given params, this endpoint works as bulk, it\nmeans that if any picking creation fails it will continue with the others until the end.",
        "operationId": "Wms.Picking.Bulk.BulkPickingOrderController.bulk_create",
        "parameters": [
          {
            "description": "Bulk Picking Request",
            "in": "body",
            "name": "bulk_picking_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkPickingRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkPickingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkErrorsPickingResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a list of picking orders according to the given params, this endpoint works as bulk, it\nmeans that if any picking creation fails it will continue with the others until the end.",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/bulk/orders/turbo": {
      "post": {
        "description": "Creates a list of picking orders according to the given params, this endpoint works as bulk, it\nmeans that if any picking creation fails it will continue with the others until the end.\nThis endpoint works asynchronously and returns 204 No content",
        "operationId": "Wms.Picking.Bulk.BulkPickingOrderController.bulk_turbo_create",
        "parameters": [
          {
            "description": "Bulk Picking Request",
            "in": "body",
            "name": "bulk_picking_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkPickingRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a list of picking orders according to the given params, this endpoint works as bulk, it\nmeans that if any picking creation fails it will continue with the others until the end.\nThis endpoint works asynchronously and returns 204 No content",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/cartboxes": {
      "get": {
        "description": "Searches a list of cart box given params",
        "operationId": "Wms.Picking.CartBoxController.search",
        "parameters": [
          {
            "description": "Barcode printed in box",
            "in": "query",
            "name": "barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales order ID",
            "in": "query",
            "name": "sales_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Fulfillment order ID",
            "in": "query",
            "name": "fulfillment_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If the cart box is occupied in sales order or not",
            "in": "query",
            "name": "occupied",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Warehouse ID",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of cart box given params",
        "tags": [
          "Picking"
        ]
      },
      "post": {
        "description": "Creates a cart box template definition",
        "operationId": "Wms.Picking.CartBoxController.create",
        "parameters": [
          {
            "description": "Barcode printed in box",
            "in": "form_data",
            "name": "barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales order ID",
            "in": "form_data",
            "name": "sales_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a cart box template definition",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/cartboxes/assign": {
      "post": {
        "description": "Assign a cart box with a sales order, if the cart box does not exist,\nthis process creates a new one\nAssign a cartbox with a sales order according the given barcode",
        "operationId": "Wms.Picking.CartBoxController.assign_cartbox",
        "parameters": [
          {
            "description": "Sales Order ID",
            "in": "form_data",
            "name": "sales_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "optional Barcode of cart box",
            "in": "form_data",
            "name": "barcode",
            "required": false,
            "type": "string"
          },
          {
            "description": "optional Fulfillment Order ID",
            "in": "form_data",
            "name": "fulfillment_order_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a cart box with a sales order, if the cart box does not exist,\nthis process creates a new one\nAssign a cartbox with a sales order according the given barcode",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/cartboxes/{id}": {
      "get": {
        "description": "Show cart box data according to the given id",
        "operationId": "Wms.Picking.CartBoxController.show",
        "parameters": [
          {
            "description": "Cartbox box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show cart box data according to the given id",
        "tags": [
          "Picking"
        ]
      },
      "put": {
        "description": "updates a cart box given ID",
        "operationId": "Wms.Picking.CartBoxController.update",
        "parameters": [
          {
            "description": "Cartbox Box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "updates a cart box given ID",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders": {
      "get": {
        "description": "Searches a list of picking orders given a picking order params.",
        "operationId": "Wms.Picking.PickingOrderController.search",
        "parameters": [
          {
            "description": "ID of the picking orders, to filter for multiple picking orders: `id:to_list:1,2,3`",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of picking order, the states available are `queue`, `taken`, `ended`, `locked`, `cancelled`, `mixed`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start date of picking tasks in format YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "End date of picking tasks in format YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Inserted at of picking tasks in format YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Owner's ID of the picking order",
            "in": "query",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sales order id which the picking belongs",
            "in": "query",
            "name": "sales_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Unique ID of the warehouse",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Unique ID of the merchant",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Unique ID of the merchant channel",
            "in": "query",
            "name": "merchant_channel_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Packing location id associated to the packing",
            "in": "query",
            "name": "destination_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Categories matching products inside the picking orders ",
            "in": "query",
            "name": "match_categories",
            "required": false,
            "type": "string"
          },
          {
            "description": "Categories matching products inside the picking orders ",
            "in": "query",
            "name": "match_categories",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Date of last update YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_PickingOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of picking orders given a picking order params.",
        "tags": [
          "Picking"
        ]
      },
      "post": {
        "description": "creates a list of picking orders according to the given params",
        "operationId": "Wms.Picking.PickingOrderController.create",
        "parameters": [
          {
            "description": "List of sales order ids that will be passed to picking",
            "in": "form_data",
            "name": "sales_orders",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of picking orders that will be created",
            "in": "form_data",
            "name": "picking_orders",
            "required": false,
            "type": "string"
          },
          {
            "description": "Amount of picking orders that will be created, it will split the given sales orders in\n picking orders with the same amount of items",
            "in": "form_data",
            "name": "orders_count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "If this is sent as true it will create a draft packing order and 1 packing box for each\n product unit, then it will attach a shipment label to each box",
            "in": "form_data",
            "name": "turbo_label",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If this is sent as true it will mark all sales orders with is_cart=true",
            "in": "form_data",
            "name": "cart",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "creates a list of picking orders according to the given params",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/turbo": {
      "post": {
        "description": "creates a list of turbo label picking orders according to the given params.\nThis endpoint works asynchronously and returns 204 No content",
        "operationId": "Wms.Picking.PickingOrderController.turbo_create",
        "parameters": [
          {
            "description": "List of sales order ids that will be passed to picking",
            "in": "form_data",
            "name": "sales_orders",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of picking orders that will be created",
            "in": "form_data",
            "name": "picking_orders",
            "required": false,
            "type": "string"
          },
          {
            "description": "Amount of picking orders that will be created, it will split the given sales orders in\n picking orders with the same amount of items",
            "in": "form_data",
            "name": "orders_count",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "creates a list of turbo label picking orders according to the given params.\nThis endpoint works asynchronously and returns 204 No content",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}": {
      "delete": {
        "description": "Deletes a picking order\n",
        "operationId": "Wms.Picking.PickingOrderController.delete",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a picking order\n",
        "tags": [
          "Picking"
        ]
      },
      "get": {
        "description": "Show a picking order by given id.\n",
        "operationId": "Wms.Picking.PickingOrderController.show",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a picking order by given id.\n",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/accept": {
      "post": {
        "description": "Assign a picking order to a user and set the state to \"taken\"\n",
        "operationId": "Wms.Picking.PickingOrderController.accept",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a picking order to a user and set the state to \"taken\"\n",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/assign": {
      "post": {
        "description": "Assign a picking order with state \"queue\" to a user\n",
        "operationId": "Wms.Picking.PickingOrderController.assign",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a picking order with state \"queue\" to a user\n",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/finish": {
      "post": {
        "description": "changes the status of sales order and moves the stock from the user to packing location.\nIf all picking orders associated to sales order were ended then creates a packing order.",
        "operationId": "Wms.Picking.PickingOrderController.finish",
        "parameters": [
          {
            "description": "Packing location where picking order will be moved",
            "in": "query",
            "name": "packing_location_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Shipping location where picking order will be moved when using turbo packing",
            "in": "query",
            "name": "shipping_location_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of sales_order_id and packing_order_id maps",
            "in": "body",
            "name": "finish_picking_request_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/FinishPickingRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Finishes a picking order.",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/finish_early": {
      "post": {
        "description": "moves the stock from the user to packing location.",
        "operationId": "Wms.Picking.PickingOrderController.finish_partial",
        "parameters": [
          {
            "description": "Packing location where picking order will be moved",
            "in": "query",
            "name": "packing_location_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of sales_order_id and packing_order_id maps",
            "in": "body",
            "name": "finish_picking_request_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/FinishPickingRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Finishes a picking order partially.",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/pick": {
      "post": {
        "description": "Picks a list of picking item batches\n",
        "operationId": "Wms.Picking.PickingOrderController.pick",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Picks a list of picking item batches\n",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/route": {
      "post": {
        "description": "Creates a list of route items based the given picking order, By default\nthe route item algorithm is based in near locations except when the product is\nlot type\n",
        "operationId": "Wms.Picking.PickingOrderController.create_route",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a list of route items based the given picking order, By default\nthe route item algorithm is based in near locations except when the product is\nlot type\n",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/route_location": {
      "post": {
        "description": "Creates a list of route items based the given picking order, The route item\nalgorithm is based in near locations.\n",
        "operationId": "Wms.Picking.PickingOrderController.create_location_route",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a list of route items based the given picking order, The route item\nalgorithm is based in near locations.\n",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/split": {
      "post": {
        "description": "Split a list of picking orders according to the given params\n",
        "operationId": "Wms.Picking.PickingOrderController.split",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Split a list of picking orders according to the given params\n",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/unassign": {
      "post": {
        "description": "Unassign a picking order from a user and set the state to \"queue\"\n",
        "operationId": "Wms.Picking.PickingOrderController.unassign",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Unassign a picking order from a user and set the state to \"queue\"\n",
        "tags": [
          "Picking"
        ]
      }
    },
    "/picking/orders/{id}/unlock": {
      "post": {
        "description": "Unlocks a picking order. Sets the state to `queue`",
        "operationId": "Wms.Picking.PickingOrderController.unlock",
        "parameters": [
          {
            "description": "Picking order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PickingOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Unlocks a picking order. Sets the state to `queue`",
        "tags": [
          "Picking"
        ]
      }
    },
    "/reasons/": {
      "get": {
        "description": "List reason codes",
        "operationId": "Wms.Reason.ReasonCodeController.search",
        "parameters": [
          {
            "description": "The reason code",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the reason",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of the reason",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The process name",
            "in": "query",
            "name": "process_name",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_ReasonCode"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "List reason codes",
        "tags": [
          "Reason"
        ]
      },
      "post": {
        "description": "Creates new reason codes according to given params",
        "operationId": "Wms.Reason.ReasonCodeController.create",
        "parameters": [
          {
            "description": "Reason code body request",
            "in": "body",
            "name": "reason_code",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReasonCode"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ReasonCode"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates new reason codes according to given params",
        "tags": [
          "Reason"
        ]
      }
    },
    "/reasons/{id}": {
      "put": {
        "description": "Updates a reason code by a given ID",
        "operationId": "Wms.Reason.ReasonCodeController.update",
        "parameters": [
          {
            "description": "Reason Code ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Reason code body request",
            "in": "body",
            "name": "reason_code",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReasonCode"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReasonCode"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a reason code by a given ID",
        "tags": [
          "Reason"
        ]
      }
    },
    "/reception/bulk/purchase_orders": {
      "post": {
        "description": "This endpoint works as bulk, it means that if any purchase order creation fails it will continue with the others until the end.",
        "operationId": "Wms.Reception.Bulk.BulkPurchaseOrderController.bulk_create",
        "parameters": [
          {
            "description": "List of purchase orders maps to be created",
            "in": "body",
            "name": "purchase_order_request_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PurchaseOrder"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkPurchaseOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkErrorsPurchaseOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create purchase orders in bulk.",
        "tags": [
          "Reception"
        ]
      },
      "put": {
        "description": "This endpoint works as bulk, it means that if any Purchase order update fails it will continue with the others until the end.",
        "operationId": "Wms.Reception.Bulk.BulkPurchaseOrderController.bulk_update",
        "parameters": [
          {
            "description": "List of purchase orders maps to be updated",
            "in": "body",
            "name": "purchase_order_request_list",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PurchaseOrder"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkUpdatePurchaseOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkUpdateErrorsPurchaseOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Update Purchase orders in bulk.",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/incoming_goods": {
      "get": {
        "description": "Search incoming goods according to params",
        "operationId": "Wms.Reception.IncomingGoodController.search",
        "parameters": [
          {
            "description": "Purchase order ID",
            "in": "query",
            "name": "purchase_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "User ID that Incoming belongs",
            "in": "query",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Document type, the available types are `none`, `purchase_order` or `return`",
            "in": "query",
            "name": "document_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sequence number of incoming good",
            "in": "query",
            "name": "sequence_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "One of the user`s merchants id",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Search incoming goods according to params",
        "tags": [
          "Reception"
        ]
      },
      "post": {
        "description": "creates an incoming good according to given params",
        "operationId": "Wms.Reception.IncomingGoodController.create",
        "parameters": [
          {
            "description": "Purchase order ID",
            "in": "form_data",
            "name": "purchase_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Associated sales order ID",
            "in": "form_data",
            "name": "sales_order_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Document type, the available types are `none`, `purchase_order` or `return`",
            "in": "form_data",
            "name": "document_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "form_data",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "form_data",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "User ID that Incoming belongs",
            "in": "form_data",
            "name": "owner_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The third party ID to which incoming good belongs",
            "in": "form_data",
            "name": "third_party_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The warehouse id to which incoming good belongs",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "creates an incoming good according to given params",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/incoming_goods/turbo_reception": {
      "post": {
        "description": "creates an incoming good according to a purchase order",
        "operationId": "Wms.Reception.IncomingGoodController.turbo_reception",
        "parameters": [
          {
            "description": "Purchase order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Destination location ID",
            "in": "query",
            "name": "destination_location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "creates an incoming good according to a purchase order",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/incoming_goods/{id}": {
      "get": {
        "description": "Search an Incoming good document by valid id",
        "operationId": "Wms.Reception.IncomingGoodController.show",
        "parameters": [
          {
            "description": "Incoming good ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Search an Incoming good document by valid id",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/incoming_goods/{id}/items/{item_id}/attach": {
      "post": {
        "description": "Attach a document with an Incoming Good Item",
        "operationId": "Wms.Reception.IncomingGoodController.upload_item_attachment",
        "parameters": [
          {
            "description": "Incoming Good ID",
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Incoming Good Item ID",
            "in": "path",
            "name": "item_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Path to document file",
            "in": "form_data",
            "name": "attachment",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of the attachment",
            "in": "form_data",
            "name": "filename",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the attachment",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Attach a document with an Incoming Good Item",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/purchase_orders": {
      "get": {
        "description": "Searches a list of purchase orders given a purchase order params",
        "operationId": "Wms.Reception.PurchaseOrderController.search",
        "parameters": [
          {
            "description": "Purchase order id",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Delivery date in format YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "delivery_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of creation in format YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique identifier for Sales Order",
            "in": "query",
            "name": "order_num",
            "required": false,
            "type": "string"
          },
          {
            "description": "State for purchase orders, available states are `queue`, `checking` or `closed`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Supplier of the purchase order",
            "in": "query",
            "name": "supplier_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_PurchaseOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of purchase orders given a purchase order params",
        "tags": [
          "Reception"
        ]
      },
      "post": {
        "description": "Create a purchase order",
        "operationId": "Wms.Reception.PurchaseOrderController.create",
        "parameters": [
          {
            "description": "Purchase order body request",
            "in": "body",
            "name": "purchase_order",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create a purchase order",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/purchase_orders/upload": {
      "post": {
        "description": "Create multiple purchase orders from a CSV file",
        "operationId": "Wms.Reception.PurchaseOrderController.upload",
        "parameters": [
          {
            "description": "Path to CSV file",
            "in": "form_data",
            "name": "file",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID to which purchase\n order belongs",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create multiple purchase orders from a CSV file",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/purchase_orders/{id}": {
      "delete": {
        "description": "Delete a purchase order by given id",
        "operationId": "Wms.Reception.PurchaseOrderController.delete",
        "parameters": [
          {
            "description": "Purchase order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete a purchase order by given id",
        "tags": [
          "Reception"
        ]
      },
      "get": {
        "description": "Show a purchase order by given id",
        "operationId": "Wms.Reception.PurchaseOrderController.show",
        "parameters": [
          {
            "description": "Purchase order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a purchase order by given id",
        "tags": [
          "Reception"
        ]
      },
      "patch": {
        "description": "Updates a specific field on purchase order",
        "operationId": "Wms.Reception.PurchaseOrderController.update_field",
        "parameters": [
          {
            "description": "replace",
            "in": "form_data",
            "name": "op",
            "required": false,
            "type": "string"
          },
          {
            "description": "/order_state_id",
            "in": "form_data",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "State string to replace",
            "in": "form_data",
            "name": "value",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a specific field on purchase order",
        "tags": [
          "Reception"
        ]
      },
      "put": {
        "description": "Updates a purchase order",
        "operationId": "Wms.Reception.PurchaseOrderController.update",
        "parameters": [
          {
            "description": "Purchase order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Items to be updated",
            "in": "form_data",
            "name": "items",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a purchase order",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/purchase_orders/{id}/attach": {
      "post": {
        "description": "Attach a document with a purchase order",
        "operationId": "Wms.Reception.PurchaseOrderController.upload_attachment",
        "parameters": [
          {
            "description": "Purchase Order ID",
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Path to document file",
            "in": "form_data",
            "name": "attachment",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of the attachment",
            "in": "form_data",
            "name": "filename",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the attachment",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Attach a document with a purchase order",
        "tags": [
          "Reception"
        ]
      }
    },
    "/reception/purchase_orders/{id}/attachments/{attachment_id}": {
      "delete": {
        "description": "Delete attachments",
        "operationId": "Wms.Reception.PurchaseOrderController.delete_attachment",
        "parameters": [
          {
            "description": "purchase order id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete attachments",
        "tags": [
          "Reception"
        ]
      }
    },
    "/replenishment/orders": {
      "get": {
        "description": "Searches a list of replenishment orders",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.search",
        "parameters": [
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of Replenishment `queue`, `taken",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of Replenishment `manual`, `incoming_goods`, `supply`, `sales_order_cancelled`, `return`",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "User ID that replenishment belongs",
            "in": "query",
            "name": "owner_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of replenishment orders",
        "tags": [
          "Replenishment"
        ]
      },
      "post": {
        "description": "Creates a manual replenishment order according to given params",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.create",
        "parameters": [
          {
            "description": "Date in format YYYY-MM-DD",
            "in": "form_data",
            "name": "end_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "State of Replenishment `queue`, `taken",
            "in": "form_data",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of Replenishment `manual`, `incoming_goods`, `supply`, `sales_order_cancelled`, `return`",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a manual replenishment order according to given params",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/alerts": {
      "post": {
        "description": "Create replenishment order based on product quantity alert ids",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.alerts",
        "parameters": [
          {
            "description": "Product quantity alert",
            "in": "form_data",
            "name": "product_quantity_alert_ids",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create replenishment order based on product quantity alert ids",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/merge": {
      "post": {
        "description": "Merges a list of replenishment orders into one",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.merge_orders",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Merges a list of replenishment orders into one",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}": {
      "get": {
        "description": "Gets a replenishment order by id",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.show",
        "parameters": [
          {
            "description": "Replenishment order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Gets a replenishment order by id",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}/accept": {
      "post": {
        "description": "Assign a replenishment order to a user and set the state to `taken`",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.accept",
        "parameters": [
          {
            "description": "Replenishment order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assign a replenishment order to a user and set the state to `taken`",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}/assign": {
      "post": {
        "description": "Updates the owner_id from a replenishment order",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.update_owner",
        "parameters": [
          {
            "description": "Replenishment order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates the owner_id from a replenishment order",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}/cancel": {
      "post": {
        "description": "Cancels a replenishment order to a user",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.cancel",
        "parameters": [
          {
            "description": "Replenishment order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Cancels a replenishment order to a user",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}/finish": {
      "post": {
        "description": "Ends a replenishment order",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.finish",
        "parameters": [
          {
            "description": "Replenishment order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Ends a replenishment order",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}/items": {
      "post": {
        "description": "Moves a list of items from a location to another location",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.items",
        "parameters": [
          {
            "description": "Replenishment order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Moves a list of items from a location to another location",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}/pick_item": {
      "post": {
        "description": "Picks an item in the replenishment order",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.pick_item",
        "parameters": [
          {
            "description": "Replenishment order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Picks an item in the replenishment order",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}/route": {
      "post": {
        "description": "Creates a list of replenishment route items",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.create_route",
        "parameters": [
          {
            "description": "Replenishment order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a list of replenishment route items",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{id}/split": {
      "post": {
        "description": "Split a replenishment order according to the given params\n",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.split_order",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Split a replenishment order according to the given params\n",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/replenishment/orders/{replenishment_order_id}/split_item/{id}": {
      "post": {
        "description": "Splits a replenishment item when the destination location change",
        "operationId": "Wms.Replenishment.ReplenishmentOrderController.split_item",
        "parameters": [
          {
            "description": "Replenishment item ID",
            "in": "form_data",
            "name": "replenishment_item_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of json with location_id and quantity",
            "in": "form_data",
            "name": "splits",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Splits a replenishment item when the destination location change",
        "tags": [
          "Replenishment"
        ]
      }
    },
    "/sales/bulk/orders": {
      "post": {
        "description": "This endpoint works as bulk, it means that if any sales order creation fails it will continue with the others until the end.",
        "operationId": "Wms.Sales.Bulk.BulkSalesOrderController.bulk_create",
        "parameters": [
          {
            "description": "List of sales orders maps to be created",
            "in": "body",
            "name": "sales_order_body_request_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderBodyRequestList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkSalesOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkErrorsSalesOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Create sales orders in bulk.",
        "tags": [
          "Sales"
        ]
      },
      "put": {
        "description": "This endpoint works as bulk, it means that if any sales order update fails it will continue with the others until the end.",
        "operationId": "Wms.Sales.Bulk.BulkSalesOrderController.bulk_update",
        "parameters": [
          {
            "description": "List of sales orders maps to be updated",
            "in": "body",
            "name": "sales_order_body_request_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderBodyRequestList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkUpdateSalesOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkUpdateErrorsSalesOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Update sales orders in bulk.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/bulk/orders/cancel": {
      "post": {
        "description": "Cancel payload have multiple formats due to different ways to specify which sales orders should be deleted:\n* A list of structs with order_num: E.G. `[%{order_num: \"order_num1\"}, ...]`\n* A list of order_nums: E.G. `[\"order_num1\", ...]`\n* A list of structs with id: E.G. `[%{id: 1}, ...]`\n* A list of ids: E.G. `[1, ...]`",
        "operationId": "Wms.Sales.Bulk.BulkSalesOrderController.bulk_cancel",
        "parameters": [
          {
            "description": "sales order reference structs",
            "in": "body",
            "name": "sales_order_reference_struct_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceStructList"
            }
          },
          {
            "description": "ids list",
            "in": "body",
            "name": "sales_order_reference_id_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceIdList"
            }
          },
          {
            "description": "order_nums list",
            "in": "body",
            "name": "sales_order_reference_order_num_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceOrderNumList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Cancel sales orders in bulk.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/bulk/orders/fulfillments/pause": {
      "post": {
        "description": "Pause payload have multiple formats due to different ways to specify which fulfillment orders should be paused:\n* A list of structs with id: E.G. `[%{id: 1}, ...]`\n* A list of ids: E.G. `[1, ...]`",
        "operationId": "Wms.Sales.Bulk.BulkFulfillmentOrderController.bulk_pause",
        "parameters": [
          {
            "description": "sales order reference structs",
            "in": "body",
            "name": "sales_order_reference_struct_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceStructList"
            }
          },
          {
            "description": "ids list",
            "in": "body",
            "name": "sales_order_reference_id_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceIdList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Pause fulfillment orders in bulk.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/bulk/orders/fulfillments/resume": {
      "post": {
        "description": "Resume payload have multiple formats due to different ways to specify which fulfillment orders should be resumed:\n* A list of structs with order_num: E.G. `[%{order_num: \"order_num1\"}, ...]`\n* A list of order_nums: E.G. `[\"order_num1\", ...]`\n* A list of structs with id: E.G. `[%{id: 1}, ...]`\n* A list of ids: E.G. `[1, ...]`",
        "operationId": "Wms.Sales.Bulk.BulkFulfillmentOrderController.bulk_resume",
        "parameters": [
          {
            "description": "sales order reference structs",
            "in": "body",
            "name": "sales_order_reference_struct_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceStructList"
            }
          },
          {
            "description": "ids list",
            "in": "body",
            "name": "sales_order_reference_id_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceIdList"
            }
          },
          {
            "description": "order_nums list",
            "in": "body",
            "name": "sales_order_reference_order_num_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceOrderNumList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Resume fulfillment orders in bulk.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/bulk/orders/pause": {
      "post": {
        "description": "Pause payload have multiple formats due to different ways to specify which sales orders should be deleted:\n* A list of structs with order_num: E.G. `[%{order_num: \"order_num1\"}, ...]`\n* A list of order_nums: E.G. `[\"order_num1\", ...]`\n* A list of structs with id: E.G. `[%{id: 1}, ...]`\n* A list of ids: E.G. `[1, ...]`",
        "operationId": "Wms.Sales.Bulk.BulkSalesOrderController.bulk_pause",
        "parameters": [
          {
            "description": "sales order reference structs",
            "in": "body",
            "name": "sales_order_reference_struct_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceStructList"
            }
          },
          {
            "description": "ids list",
            "in": "body",
            "name": "sales_order_reference_id_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceIdList"
            }
          },
          {
            "description": "order_nums list",
            "in": "body",
            "name": "sales_order_reference_order_num_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceOrderNumList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Pause sales orders in bulk.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/bulk/orders/quick": {
      "post": {
        "description": "This endpoint works as bulk, it means that if any sales order creation fails it will continue with the others until the end.",
        "operationId": "Wms.Sales.Bulk.BulkSalesOrderController.bulk_quick_create",
        "parameters": [
          {
            "description": "List of sales orders maps to be created",
            "in": "body",
            "name": "sales_order_body_request_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderBodyRequestList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkSalesOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkErrorsSalesOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Create quick orders in bulk.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/bulk/orders/resume": {
      "post": {
        "description": "Resume payload have multiple formats due to different ways to specify which sales orders should be resumed:\n* A list of structs with order_num: E.G. `[%{order_num: \"order_num1\"}, ...]`\n* A list of order_nums: E.G. `[\"order_num1\", ...]`\n* A list of structs with id: E.G. `[%{id: 1}, ...]`\n* A list of ids: E.G. `[1, ...]`",
        "operationId": "Wms.Sales.Bulk.BulkSalesOrderController.bulk_resume",
        "parameters": [
          {
            "description": "sales order reference structs",
            "in": "body",
            "name": "sales_order_reference_struct_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceStructList"
            }
          },
          {
            "description": "ids list",
            "in": "body",
            "name": "sales_order_reference_id_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceIdList"
            }
          },
          {
            "description": "order_nums list",
            "in": "body",
            "name": "sales_order_reference_order_num_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReferenceOrderNumList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkUpdateSalesOrderResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkUpdateErrorsSalesOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Resume sales orders in bulk.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/bulk/orders/return_labels": {
      "post": {
        "description": "Bulk attach return labels to sales_orders requires two parameters\n* A list of sales order ids: E.G. `[1, ...]`\n* A list of return labels codes",
        "operationId": "Wms.Sales.Bulk.BulkSalesOrderController.bulk_attach_return_labels",
        "parameters": [
          {
            "description": "input for bulk inserting return labels",
            "in": "body",
            "name": "sales_order_return_label_reference_struct_list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderReturnLabelReferenceStructList"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Bulk attach return labels to sales_orders",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders": {
      "get": {
        "description": "Search Sales Orders, searches a list of existing sales orders given some of the following params",
        "operationId": "Wms.Sales.SalesOrderController.search",
        "parameters": [
          {
            "description": "Customer ID to which are sold the items",
            "in": "query",
            "name": "client_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique Identifier for Sales Order",
            "in": "query",
            "name": "order_num",
            "required": false,
            "type": "string"
          },
          {
            "description": "The available states are `queue`, `picking`, `packing`, `ended`, `cancelled`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of attributes to show in the response. No associations supported. An empty list shows all attributes",
            "in": "query",
            "name": "view_attributes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total number of sales items per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "order_items_count",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total volume of products in the sales items per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "estimated_total_volume",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total weight of products in the sales items per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "estimated_total_weight",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total number of products per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value`, `between:min_value,max_value` or `value` (for exact value)",
            "in": "query",
            "name": "order_products_qty",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of creation YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of last update YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "unique ID of the sales order",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of delivery YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "delivery_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique ID of the third party",
            "in": "query",
            "name": "third_party_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique ID of the warehouse",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return label code",
            "in": "query",
            "name": "return_label",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders that contains the product ID. For and search use: includes:product_id_lists",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders that NOT contains the product ID",
            "in": "query",
            "name": "not_product_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders channel",
            "in": "query",
            "name": "channel",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders priority, you can search a list by using to_list:",
            "in": "query",
            "name": "priority",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders criterium you can search a list by using to_list:",
            "in": "query",
            "name": "criterium",
            "required": false,
            "type": "string"
          },
          {
            "description": "Products inside sales order matching given product categories. Available filters are `includes_all:value` , `includes_some:value`, `includes_only:value`, `includes_none:value`",
            "in": "query",
            "name": "product_category_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_SalesOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Search Sales Orders, searches a list of existing sales orders given some of the following params",
        "tags": [
          "Sales"
        ]
      },
      "post": {
        "description": "Create and show the new sales order according to given params",
        "operationId": "Wms.Sales.SalesOrderController.create",
        "parameters": [
          {
            "description": "Sales order body request",
            "in": "body",
            "name": "sales_order_body_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderBodyRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create and show the new sales order according to given params",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/criteria": {
      "get": {
        "description": "Search a list of sales orders according to given criteria",
        "operationId": "Wms.Sales.SalesOrderController.filter_criteria",
        "parameters": [
          {
            "description": "Criteria",
            "in": "query",
            "name": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Search a list of sales orders according to given criteria",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/fulfillments": {
      "get": {
        "description": "Search Fulfillment Orders, searches a list of existing fulfillment orders given some of the following params",
        "operationId": "Wms.Sales.FulfillmentOrderController.search",
        "parameters": [
          {
            "description": "Customer ID to which are sold the items",
            "in": "query",
            "name": "client_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique Identifier for Fulfillment Order",
            "in": "query",
            "name": "order_num",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sequence number of the fulfillment order",
            "in": "query",
            "name": "sequence_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Origin sales order ID of the fulfillment order",
            "in": "query",
            "name": "sales_order_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "The available states are `queue`, `picking`, `packing`, `ended`, `cancelled`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of attributes to show in the response. No associations supported. An empty list shows all attributes",
            "in": "query",
            "name": "view_attributes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total number of sales items per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "order_items_count",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total number of products per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value`, `between:min_value,max_value` or `value` (for exact value)",
            "in": "query",
            "name": "order_products_qty",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of creation YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of last update YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "unique ID of the sales order",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of delivery YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "delivery_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique ID of the third party",
            "in": "query",
            "name": "third_party_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique ID of the warehouse",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return label code from origin sales order",
            "in": "query",
            "name": "return_label",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders that contains the product ID. For and search use: includes:product_id_lists",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders that NOT contains the product ID",
            "in": "query",
            "name": "not_product_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders channel",
            "in": "query",
            "name": "channel",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders priority, you can search a list by using to_list:",
            "in": "query",
            "name": "priority",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders criterium you can search a list by using to_list:",
            "in": "query",
            "name": "criterium",
            "required": false,
            "type": "string"
          },
          {
            "description": "Products inside sales order matching given product categories. Available filters are `includes_all:value` , `includes_some:value`, `includes_only:value`, `includes_none:value`",
            "in": "query",
            "name": "product_category_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total volume of products in the sales items per fulfillment order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "estimated_total_volume",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total weight of products in the sales items per fulfillment order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "estimated_total_weight",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_FulfillmentOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Search Fulfillment Orders, searches a list of existing fulfillment orders given some of the following params",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/products_summary": {
      "get": {
        "description": "",
        "operationId": "Wms.Sales.SalesOrderController.products_summary",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/quick": {
      "post": {
        "description": "Create quick sales order\nCreates a sales orders ended with a picking, a packing and a stock movement\nNo webhooks are triggered in this process",
        "operationId": "Wms.Sales.SalesOrderController.create_quick_sales",
        "parameters": [
          {
            "description": "Sales order body request",
            "in": "body",
            "name": "sales_order_body_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderBodyRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create quick sales order\nCreates a sales orders ended with a picking, a packing and a stock movement\nNo webhooks are triggered in this process",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/search": {
      "post": {
        "description": "Search Sales Orders, searches a list of existing sales orders given some of the following params",
        "operationId": "Wms.Sales.SalesOrderController.post_search",
        "parameters": [
          {
            "description": "Sales order body search",
            "in": "body",
            "name": "sales_order_post_search",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderPostSearch"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_SalesOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Search Sales Orders, searches a list of existing sales orders given some of the following params",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/upload": {
      "post": {
        "description": "Create multiple sales orders from a CSV file",
        "operationId": "Wms.Sales.SalesOrderController.upload",
        "parameters": [
          {
            "description": "Path to CSV file",
            "in": "form_data",
            "name": "file",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID to which sales order belongs",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create multiple sales orders from a CSV file",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}": {
      "get": {
        "description": "Searches a sales orders by id",
        "operationId": "Wms.Sales.SalesOrderController.show",
        "parameters": [
          {
            "description": "Sales order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a sales orders by id",
        "tags": [
          "Sales"
        ]
      },
      "patch": {
        "description": "Update a field in Sales Order\nUpdates priority or is_cart field on sales order",
        "operationId": "Wms.Sales.SalesOrderController.update_field",
        "parameters": [
          {
            "description": "Id of Sales Order",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "replace",
            "in": "form_data",
            "name": "op",
            "required": false,
            "type": "string"
          },
          {
            "description": "Field to be changed, can be `/priority` or is `/ship_to`",
            "in": "form_data",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "Value to replace",
            "in": "form_data",
            "name": "value",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Update a field in Sales Order\nUpdates priority or is_cart field on sales order",
        "tags": [
          "Sales"
        ]
      },
      "put": {
        "description": "Updates a sales order given Id.",
        "operationId": "Wms.Sales.SalesOrderController.update",
        "parameters": [
          {
            "description": "Sales Order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Sales order body request",
            "in": "body",
            "name": "sales_order_body_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesOrderBodyRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a sales order given Id.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/attach": {
      "post": {
        "description": "Attach a document with a sales order according to the given ID",
        "operationId": "Wms.Sales.SalesOrderController.upload_attachment",
        "parameters": [
          {
            "description": "Sales Order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Path to document file",
            "in": "form_data",
            "name": "attachment",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of the attachment",
            "in": "form_data",
            "name": "filename",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of the attachment, supported types are `document`, `label`, `photo` or `undefined`",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Attach a document with a sales order according to the given ID",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/attachment": {
      "post": {
        "description": "Register file metadata from s3 response",
        "operationId": "Wms.Sales.SalesOrderController.register_attachment",
        "parameters": [
          {
            "description": "Sales Order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The file S3 ID",
            "in": "form_data",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User file name",
            "in": "form_data",
            "name": "filename",
            "required": false,
            "type": "string"
          },
          {
            "description": "File type",
            "in": "form_data",
            "name": "file_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "What the type of the attachment eg - label",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "file extention ie, pdf",
            "in": "form_data",
            "name": "extension",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Register file metadata from s3 response",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/attachments/{attachment_id}": {
      "delete": {
        "description": "Delete attachments",
        "operationId": "Wms.Sales.SalesOrderController.delete_attachment",
        "parameters": [
          {
            "description": "sales order id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete attachments",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/cancel": {
      "post": {
        "description": "Cancels a sales order\nOrders in state ended can not be cancelled, neither orders in state picking when there are no available packing locations.\nThe result action depends of the sales order's state.",
        "operationId": "Wms.Sales.SalesOrderController.cancel",
        "parameters": [
          {
            "description": "Sales Order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Cancels a sales order\nOrders in state ended can not be cancelled, neither orders in state picking when there are no available packing locations.\nThe result action depends of the sales order's state.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/dispatched": {
      "get": {
        "description": "Searches sales orders dispatched data by id",
        "operationId": "Wms.Sales.SalesOrderController.dispatched",
        "parameters": [
          {
            "description": "Sales order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches sales orders dispatched data by id",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/pause": {
      "post": {
        "description": "Pauses a sales orders by id, Just orders in state queue can be paused",
        "operationId": "Wms.Sales.SalesOrderController.pause",
        "parameters": [
          {
            "description": "Sales order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Pauses a sales orders by id, Just orders in state queue can be paused",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/resume": {
      "post": {
        "description": "Resumes a sales order\nOrders in state `paused` can be resumed and changes its status to `queue`\nThe result action depends of the sales order's state.",
        "operationId": "Wms.Sales.SalesOrderController.resume",
        "parameters": [
          {
            "description": "Sales Order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Resumes a sales order\nOrders in state `paused` can be resumed and changes its status to `queue`\nThe result action depends of the sales order's state.",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/return_labels": {
      "post": {
        "description": "Attach a list of return labels on sales order of any status",
        "operationId": "Wms.Sales.SalesOrderController.attach_return_labels",
        "parameters": [
          {
            "description": "return label codes",
            "in": "body",
            "name": "return_label_codes",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReturnLabelCodes"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Attach a list of return labels on sales order of any status",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{id}/returns": {
      "get": {
        "description": "Get returned data given a sales order",
        "operationId": "Wms.Sales.SalesOrderController.get_return_data",
        "parameters": [
          {
            "description": "Sales order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Get returned data given a sales order",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{sales_order_id}/fulfillments": {
      "get": {
        "description": "Search Fulfillment Orders from a specific sales order, searches a list of existing fulfillment orders given some of the following params",
        "operationId": "Wms.Sales.FulfillmentOrderController.search_by_sales_order_id",
        "parameters": [
          {
            "description": "Sales order ID which the fulfillment belongs to",
            "in": "path",
            "name": "sales_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Customer ID to which are sold the items",
            "in": "query",
            "name": "client_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique Identifier for Fulfillment Order",
            "in": "query",
            "name": "order_num",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sequence number of the fulfillment order",
            "in": "query",
            "name": "sequence_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Origin sales order ID of the fulfillment order",
            "in": "query",
            "name": "sales_order_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "The available states are `queue`, `picking`, `packing`, `ended`, `cancelled`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of attributes to show in the response. No associations supported. An empty list shows all attributes",
            "in": "query",
            "name": "view_attributes",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total number of sales items per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "order_items_count",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total number of products per sales order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value`, `between:min_value,max_value` or `value` (for exact value)",
            "in": "query",
            "name": "order_products_qty",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of creation YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of last update YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "unique ID of the sales order",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Date of delivery YYYY-MM-DD hh:mm:ss",
            "in": "query",
            "name": "delivery_date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique ID of the third party",
            "in": "query",
            "name": "third_party_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Unique ID of the warehouse",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Return label code from origin sales order",
            "in": "query",
            "name": "return_label",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders that contains the product ID. For and search use: includes:product_id_lists",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders that NOT contains the product ID",
            "in": "query",
            "name": "not_product_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders channel",
            "in": "query",
            "name": "channel",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders priority, you can search a list by using to_list:",
            "in": "query",
            "name": "priority",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales orders criterium you can search a list by using to_list:",
            "in": "query",
            "name": "criterium",
            "required": false,
            "type": "string"
          },
          {
            "description": "Products inside sales order matching given product categories. Available filters are `includes_all:value` , `includes_some:value`, `includes_only:value`, `includes_none:value`",
            "in": "query",
            "name": "product_category_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total volume of products in the sales items per fulfillment order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "estimated_total_volume",
            "required": false,
            "type": "string"
          },
          {
            "description": "Total weight of products in the sales items per fulfillment order. Available filters are `gte:value` , `gt:value`, `lte:value`, `lt:value` or `value`",
            "in": "query",
            "name": "estimated_total_weight",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_FulfillmentOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Search Fulfillment Orders from a specific sales order, searches a list of existing fulfillment orders given some of the following params",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{sales_order_id}/fulfillments/{fulfillment_order_id}": {
      "get": {
        "description": "Searches a fulfillment order by id",
        "operationId": "Wms.Sales.FulfillmentOrderController.show",
        "parameters": [
          {
            "description": "Sales order ID which the fulfillment belongs to",
            "in": "path",
            "name": "sales_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fulfillment order ID",
            "in": "path",
            "name": "fulfillment_order_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FulfillmentOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a fulfillment order by id",
        "tags": [
          "Sales"
        ]
      },
      "patch": {
        "description": "Update a field in Fulfillment Order\nUpdates priority or is_cart field on Fulfillment order",
        "operationId": "Wms.Sales.FulfillmentOrderController.update_field",
        "parameters": [
          {
            "description": "Id of Sales Order",
            "in": "path",
            "name": "sales_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Id of Fulfillment Order",
            "in": "path",
            "name": "fulfillment_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "replace",
            "in": "form_data",
            "name": "op",
            "required": false,
            "type": "string"
          },
          {
            "description": "Field to be changed, can be `/priority` or is `/ship_to`",
            "in": "form_data",
            "name": "path",
            "required": false,
            "type": "string"
          },
          {
            "description": "Value to replace",
            "in": "form_data",
            "name": "value",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Update a field in Fulfillment Order\nUpdates priority or is_cart field on Fulfillment order",
        "tags": [
          "Sales"
        ]
      }
    },
    "/sales/orders/{sales_order_id}/fulfillments/{fulfillment_order_id}/custom_route": {
      "post": {
        "description": "Assigns a custom picking route rule to the fulfillment order\nIf the fulfillment order is picked, the given rule will have priority when calculating the route",
        "operationId": "Wms.Sales.FulfillmentOrderController.assign_custom_route_rule",
        "parameters": [
          {
            "description": "Id of Sales Order",
            "in": "path",
            "name": "sales_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Id of Fulfillment Order",
            "in": "path",
            "name": "fulfillment_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Type of the rule, can be by `/tag` or is `/zone_name`",
            "in": "form_data",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Value of the rule, if type tag should be an existing tag name assigned at least to one location, if type zone_name should be an existing zone name",
            "in": "form_data",
            "name": "value",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FulfillmentOrder"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assigns a custom picking route rule to the fulfillment order\nIf the fulfillment order is picked, the given rule will have priority when calculating the route",
        "tags": [
          "Sales"
        ]
      }
    },
    "/setting/": {
      "get": {
        "description": "Searches a list of settings given params",
        "operationId": "Wms.Setting.SettingController.search",
        "parameters": [
          {
            "description": "Setting ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Setting key",
            "in": "query",
            "name": "key",
            "required": false,
            "type": "string"
          },
          {
            "description": "Tenant ID",
            "in": "query",
            "name": "tenant_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "User ID",
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Enabled",
            "in": "query",
            "name": "enabled",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of settings given params",
        "tags": [
          "Setting"
        ]
      },
      "post": {
        "description": "## Create settings\nYou can create it by:\n* tenant_id\n* warehouse_id\n* user_id\n**Note:** *key should be unique in combination with tenant_id, warehouse_id or user_id*",
        "operationId": "Wms.Setting.SettingController.create",
        "parameters": [
          {
            "description": "A single setting create",
            "in": "body",
            "name": "setting",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Setting"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create a setting",
        "tags": [
          "Setting"
        ]
      }
    },
    "/setting/{id}": {
      "delete": {
        "description": "Delete an setting given ID",
        "operationId": "Wms.Setting.SettingController.delete",
        "parameters": [
          {
            "description": "Setting ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete an setting given ID",
        "tags": [
          "Setting"
        ]
      },
      "get": {
        "description": "Show an setting given ID",
        "operationId": "Wms.Setting.SettingController.show",
        "parameters": [
          {
            "description": "Setting ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show an setting given ID",
        "tags": [
          "Setting"
        ]
      },
      "put": {
        "description": "update a setting given ID",
        "operationId": "Wms.Setting.SettingController.update",
        "parameters": [
          {
            "description": "Setting ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A single setting create",
            "in": "body",
            "name": "setting",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Setting"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "update a setting given ID",
        "tags": [
          "Setting"
        ]
      }
    },
    "/shipping/bulk/shipping_methods": {
      "put": {
        "description": "Creates or updates a shipping method according to given params",
        "operationId": "Wms.Shipping.ShippingMethodController.bulk_upsert",
        "parameters": [
          {
            "description": "Shipping method name",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Shipping methd service",
            "in": "form_data",
            "name": "service",
            "required": false,
            "type": "string"
          },
          {
            "description": "Shipping method carrier",
            "in": "form_data",
            "name": "carrier",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates or updates a shipping method according to given params",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/loaded_shipping_boxes": {
      "get": {
        "description": "Searches Loaded shipping boxes given some of the following params",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.search",
        "parameters": [
          {
            "description": "The available states are `in_progress`, `paused`, `finished`",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Related packing orders sequence number of which items are from",
            "in": "query",
            "name": "packing_order_sequence_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Related sales order numbers of which items are from",
            "in": "query",
            "name": "sales_order_num",
            "required": false,
            "type": "string"
          },
          {
            "description": "Tracking codes of the items",
            "in": "query",
            "name": "packing_box_tracking_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_LoadedShippingBox"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches Loaded shipping boxes given some of the following params",
        "tags": [
          "Shipping"
        ]
      },
      "post": {
        "description": "Creates a Loaded Shipping Box according to given params",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.create",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Truck license plate",
            "in": "form_data",
            "name": "truck_license_plate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Additional information about the truck",
            "in": "form_data",
            "name": "truck_info",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a Loaded Shipping Box according to given params",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/loaded_shipping_boxes/{id}": {
      "delete": {
        "description": "Deletes a Loaded Shipping Box in progress",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.delete_loaded_shipping_box",
        "parameters": [
          {
            "description": "Loaded Shipping Box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a Loaded Shipping Box in progress",
        "tags": [
          "Shipping"
        ]
      },
      "get": {
        "description": "Shows a loaded shipping box data according to the given id",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.show",
        "parameters": [
          {
            "description": "Loaded shipping box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Shows a loaded shipping box data according to the given id",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/loaded_shipping_boxes/{id}/boxes/{box_id}": {
      "delete": {
        "description": "Deletes a packing box from a Loaded Shipping Box in progress",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.delete_box",
        "parameters": [
          {
            "description": "Loaded Shipping Box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Packing Box ID",
            "in": "form_data",
            "name": "box_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a packing box from a Loaded Shipping Box in progress",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/loaded_shipping_boxes/{id}/finish": {
      "post": {
        "description": "Finishes a loaded shipping box",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.finish",
        "parameters": [
          {
            "description": "Loaded Shipping Box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Finishes a loaded shipping box",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/loaded_shipping_boxes/{id}/finish_partial": {
      "post": {
        "description": "Finishes partially a loaded shipping box",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.finish_partial",
        "parameters": [
          {
            "description": "Loaded Shipping Box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of packing box ids to be loaded",
            "in": "form_data",
            "name": "packing_box_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Finishes partially a loaded shipping box",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/loaded_shipping_boxes/{id}/load": {
      "post": {
        "description": "Loads shipping boxes in a Loaded Shipping Box in progress",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.load_boxes",
        "parameters": [
          {
            "description": "Loaded Shipping Box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of packing box ids to be loaded",
            "in": "form_data",
            "name": "packing_box_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Loads shipping boxes in a Loaded Shipping Box in progress",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/loaded_shipping_boxes/{id}/reassign": {
      "post": {
        "description": "Re assign loaded shipping box to a new user",
        "operationId": "Wms.Shipping.LoadedShippingBoxController.reassign",
        "parameters": [
          {
            "description": "Loaded Shipping Box ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "New user ID",
            "in": "form_data",
            "name": "new_owner_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Re assign loaded shipping box to a new user",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/orders": {
      "get": {
        "description": "Searches a list of shipping orders given params",
        "operationId": "Wms.Shipping.ShippingOrderController.search",
        "parameters": [
          {
            "description": "Sequence number of shipping order",
            "in": "query",
            "name": "sequence_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sales order to which the shipping order is associated to",
            "in": "query",
            "name": "sales_order_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Location where the shipping is placed",
            "in": "query",
            "name": "shipping_location_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Datetime where shipping order was inserted",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Datetime where shipping order was updated last time",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of shipping orders given params",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/orders/{id}": {
      "get": {
        "description": "Show shipping order data according to the given id",
        "operationId": "Wms.Shipping.ShippingOrderController.show",
        "parameters": [
          {
            "description": "Shipping order ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show shipping order data according to the given id",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/orders/{id}/finish": {
      "post": {
        "description": "Finish a shipping order",
        "operationId": "Wms.Shipping.ShippingOrderController.finish",
        "parameters": [
          {
            "description": "Shipping order ID to be ended",
            "in": "path",
            "name": "shipping_order_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Finish a shipping order",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/orders/{id}/move": {
      "post": {
        "description": "Move a shipping order to another shipping location",
        "operationId": "Wms.Shipping.ShippingOrderController.move",
        "parameters": [
          {
            "description": "Shipping order ID to be moved",
            "in": "path",
            "name": "shipping_order_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Shipping location ID to be moved",
            "in": "form_data",
            "name": "shipping_location_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Move a shipping order to another shipping location",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/shipping_methods": {
      "get": {
        "description": "Searches a list of shipping_methods",
        "operationId": "Wms.Shipping.ShippingMethodController.search",
        "parameters": [
          {
            "description": "Shipping method Name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Shipping method Carrier",
            "in": "query",
            "name": "carrier",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of shipping_methods",
        "tags": [
          "Shipping"
        ]
      },
      "post": {
        "description": "Creates a Shipping method according to given params",
        "operationId": "Wms.Shipping.ShippingMethodController.create",
        "parameters": [
          {
            "description": "Shipping method name",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Shipping methd service",
            "in": "form_data",
            "name": "service",
            "required": false,
            "type": "string"
          },
          {
            "description": "Shipping method carrier",
            "in": "form_data",
            "name": "carrier",
            "required": false,
            "type": "string"
          },
          {
            "description": "Merchant ID",
            "in": "form_data",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Merchant Channel ID",
            "in": "form_data",
            "name": "merchant_channel_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a Shipping method according to given params",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/shipping/shipping_methods/{id}": {
      "delete": {
        "description": "Deletes a shipping_method by given id",
        "operationId": "Wms.Shipping.ShippingMethodController.delete",
        "parameters": [
          {
            "description": "ID of shipping method",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a shipping_method by given id",
        "tags": [
          "Shipping"
        ]
      },
      "get": {
        "description": "Fetch a shipping_method by given id",
        "operationId": "Wms.Shipping.ShippingMethodController.show",
        "parameters": [
          {
            "description": "Shipping method ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch a shipping_method by given id",
        "tags": [
          "Shipping"
        ]
      },
      "put": {
        "description": "update a shipping method given ID",
        "operationId": "Wms.Shipping.ShippingMethodController.update",
        "parameters": [
          {
            "description": "Shipping item ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "update a shipping method given ID",
        "tags": [
          "Shipping"
        ]
      }
    },
    "/warehouses/": {
      "get": {
        "description": "Lists the warehouses from a user tenant",
        "operationId": "Wms.Warehouse.WarehouseController.index",
        "parameters": [
          {
            "description": "ID of the warehouse",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "City where is located the warehouse",
            "in": "query",
            "name": "city",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country where is located the warehouse",
            "in": "query",
            "name": "country",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fax number",
            "in": "query",
            "name": "fax",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Address line number",
            "in": "query",
            "name": "line1",
            "required": false,
            "type": "string"
          },
          {
            "description": "Address line number",
            "in": "query",
            "name": "line2",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse Name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Phone number of the warehouse",
            "in": "query",
            "name": "phone",
            "required": false,
            "type": "string"
          },
          {
            "description": "Email of the warehouse",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Test state",
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Zip code number",
            "in": "query",
            "name": "zip_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Whether or not a warehouse is active",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "string"
          },
          {
            "description": "Address in a warehouse site",
            "in": "query",
            "name": "site",
            "required": false,
            "type": "string"
          },
          {
            "description": "Priority of a warehouse in a site",
            "in": "query",
            "name": "priority",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Warehouse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the warehouses from a user tenant",
        "tags": [
          "Warehouse"
        ]
      },
      "post": {
        "description": "Creates a new warehouse by passing the following fields:\n* **name:** The string with the name of the warehouse\n* **active:** Receives *true* or *false* and determines when a warehouse is enabled in a tenant\n* **line1:** The string with address information\n* **line2:** The string with aditional address information\n* **city:** The string with the City where is located the warehouse\n* **state:** The string with the State where is located the warehouse\n* **country_code:** The string with the Country code where is located the warehouse\n* **zip_code:** The string with the zipcode\n* **phone:** The string with the phone number of warehouse\n* **fax:** The string with the fax number of warehouse\n* **tenant:** The tenant to which warehouse belongs\n* **site:** The physical address which one or multiple warehouses can be located. This field is optional\n* **priority:** The order of importance of a warehouse when it shares the same site with other warehouses. A priority can not be repeated for the same site. This field is optional\n* **company_name:** The warehouse company name\n* **email:** The warehouse email",
        "operationId": "Wms.Warehouse.WarehouseController.create",
        "parameters": [
          {
            "description": "Warehouse body request",
            "in": "body",
            "name": "warehouse",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a new warehouse",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/connections": {
      "delete": {
        "description": "Updates a list of connection",
        "operationId": "Wms.Warehouse.ConnectionController.batch_delete",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a list of connection",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Searches a list of connections.\nCan paginate, sending the query parameters: limit and offset, otherwise the\ndefault limit and offset are 0 and 10.",
        "operationId": "Wms.Warehouse.ConnectionController.search",
        "parameters": [
          {
            "description": "ID of the connection",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Zone id of the origin or destination location",
            "in": "query",
            "name": "zone_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Origin location id of the connection",
            "in": "query",
            "name": "origin_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ID for origin or destination location",
            "in": "query",
            "name": "location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of connections.\nCan paginate, sending the query parameters: limit and offset, otherwise the\ndefault limit and offset are 0 and 10.",
        "tags": [
          "Warehouse"
        ]
      },
      "post": {
        "description": "Creates a connection. The changeset validates that the `connection code` is unique before insert.",
        "operationId": "Wms.Warehouse.ConnectionController.create",
        "parameters": [
          {
            "description": "Connection body request",
            "in": "body",
            "name": "connection",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a connection. The changeset validates that the `connection code` is unique before insert.",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Updates a list of connection",
        "operationId": "Wms.Warehouse.ConnectionController.batch_update",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a list of connection",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/connections/{id}": {
      "delete": {
        "description": "Updates a connection",
        "operationId": "Wms.Warehouse.ConnectionController.delete",
        "parameters": [
          {
            "description": "Connection ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a connection",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Show a connection by given id. The function validates whether the id is valid or not",
        "operationId": "Wms.Warehouse.ConnectionController.show",
        "parameters": [
          {
            "description": "Connection ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a connection by given id. The function validates whether the id is valid or not",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Updates a connection",
        "operationId": "Wms.Warehouse.ConnectionController.update",
        "parameters": [
          {
            "description": "Connection ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Origin location ID",
            "in": "form_data",
            "name": "origin_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Destination Location ID",
            "in": "form_data",
            "name": "destination_location_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Weight of connection",
            "in": "form_data",
            "name": "weight",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a connection",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/location_types": {
      "get": {
        "description": "Searches a list of location types given an id(s), name(s)",
        "operationId": "Wms.Warehouse.LocationTypeController.search",
        "parameters": [
          {
            "description": "Limit value for pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of location types given an id(s), name(s)",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/location_types/{id}": {
      "get": {
        "description": "Show a location type data from given ID",
        "operationId": "Wms.Warehouse.LocationTypeController.show",
        "parameters": [
          {
            "description": "Location type ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a location type data from given ID",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/locations": {
      "delete": {
        "description": "Deletes a list of locations",
        "operationId": "Wms.Warehouse.LocationController.batch_delete",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a list of locations",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Lists the locations. Filtered according the given fields in params",
        "operationId": "Wms.Warehouse.LocationController.index",
        "parameters": [
          {
            "description": "Alphanumerical code for location",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Location zone ID",
            "in": "query",
            "name": "zone_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Hallway coordinate in location",
            "in": "query",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row coordinate in location",
            "in": "query",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module coordinate in location",
            "in": "query",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level coordinate in location",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position coordinate in location",
            "in": "query",
            "name": "position",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether the location has stock or not",
            "in": "query",
            "name": "stock_loaded",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Location type id",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ID of the product to search stock in",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Rack ID of the location",
            "in": "query",
            "name": "rack_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Location"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the locations. Filtered according the given fields in params",
        "tags": [
          "Warehouse"
        ]
      },
      "post": {
        "description": "Creates a location. The changeset validates that the `location code` is unique before insert",
        "operationId": "Wms.Warehouse.LocationController.create",
        "parameters": [
          {
            "description": "Location body request",
            "in": "body",
            "name": "location",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a location. The changeset validates that the `location code` is unique before insert",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Updates a list of locations",
        "operationId": "Wms.Warehouse.LocationController.batch_update",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a list of locations",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/locations/bulk/stocks/states": {
      "post": {
        "description": "Controls the inventory in locations, blocking or unblocking the stocks according the given params",
        "operationId": "Wms.Warehouse.LocationController.assign_stock_states",
        "parameters": [
          {
            "description": "Assign stock state request",
            "in": "body",
            "name": "assign_stock_state_request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AssignStockStateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/BulkUpdateLocationsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BulkUpdateLocationsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Controls the inventory in locations, blocking or unblocking the stocks according the given params",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/locations/categories/assign": {
      "post": {
        "description": "Assigns multiple product categories with multiple locations",
        "operationId": "Wms.Warehouse.LocationController.assign_tags",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Assigns multiple product categories with multiple locations",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/locations/search": {
      "post": {
        "description": "Lists the locations",
        "operationId": "Wms.Warehouse.LocationController.post_index",
        "parameters": [
          {
            "description": "Hallway coordenate in location",
            "in": "query",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row coordenate in location",
            "in": "query",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module coordenate in location",
            "in": "query",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level coordenate in location",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position coordenate in location",
            "in": "query",
            "name": "position",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical code for location",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wheter or not a location is volume",
            "in": "query",
            "name": "is_volume",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Location type id",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the locations",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/locations/{id}": {
      "delete": {
        "description": "Deletes a location by given id",
        "operationId": "Wms.Warehouse.LocationController.delete",
        "parameters": [
          {
            "description": "Location ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a location by given id",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Show a location by given id. The function validates if the id is valid or not",
        "operationId": "Wms.Warehouse.LocationController.show",
        "parameters": [
          {
            "description": "Location ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a location by given id. The function validates if the id is valid or not",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Update fields of location by given id",
        "operationId": "Wms.Warehouse.LocationController.update",
        "parameters": [
          {
            "description": "Location ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hallway coordinate in location",
            "in": "form_data",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row coordinate in location",
            "in": "form_data",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module coordinate in location",
            "in": "form_data",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level coordinate in location",
            "in": "form_data",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position coordinate in location",
            "in": "form_data",
            "name": "position",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical code for location",
            "in": "form_data",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wether or not a location is volume",
            "in": "form_data",
            "name": "is_volume",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Location type id",
            "in": "form_data",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Zone ID of location",
            "in": "form_data",
            "name": "zone_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Update fields of location by given id",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/locations/{id}/connection/{destination_location_id}": {
      "delete": {
        "description": "Delete a connection between two given location ids",
        "operationId": "Wms.Warehouse.ConnectionController.delete_by_locations",
        "parameters": [
          {
            "description": "Location ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Destination Location ID",
            "in": "path",
            "name": "destination_location_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete a connection between two given location ids",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Searches a connection between two given location ids",
        "operationId": "Wms.Warehouse.ConnectionController.search_by_locations",
        "parameters": [
          {
            "description": "Location ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Destination Location ID",
            "in": "path",
            "name": "destination_location_id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a connection between two given location ids",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/racks": {
      "delete": {
        "description": "Deletes a list of rack according to theirs ids, if one deletion fail all transaction will fail one deletion fail all transaction will fail",
        "operationId": "Wms.Warehouse.RackController.batch_delete",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a list of rack according to theirs ids, if one deletion fail all transaction will fail one deletion fail all transaction will fail",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Searches a list of racks given filter params",
        "operationId": "Wms.Warehouse.RackController.search",
        "parameters": [
          {
            "description": "The integer id of the rack.",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Zone ID of the rack.",
            "in": "query",
            "name": "zone_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Says if the rack is already defined and ready to be used.",
            "in": "query",
            "name": "is_defined",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Position x with respect to the zone layout.",
            "in": "query",
            "name": "position_left",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position y with respect to the zone layout.",
            "in": "query",
            "name": "position_top",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Width of the rack seen from above.",
            "in": "query",
            "name": "position_width",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Height of the rack seen from above.",
            "in": "query",
            "name": "position_height",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Defines if locations in the rack has stock.",
            "in": "query",
            "name": "stock_loaded",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Product categories of the rack locations.",
            "in": "query",
            "name": "product_categories",
            "required": false,
            "type": "string"
          },
          {
            "description": "Products ids to have with stock in the rack.",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Rack"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of racks given filter params",
        "tags": [
          "Warehouse"
        ]
      },
      "post": {
        "description": "Creates a rack",
        "operationId": "Wms.Warehouse.RackController.create",
        "parameters": [
          {
            "description": "Rack",
            "in": "body",
            "name": "rack",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Rack"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Rack"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a rack",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Updates a list of racks",
        "operationId": "Wms.Warehouse.RackController.batch_update",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a list of racks",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/racks/{id}": {
      "delete": {
        "description": "Deletes a rack by id",
        "operationId": "Wms.Warehouse.RackController.delete",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a rack by id",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Show a rack by given id",
        "operationId": "Wms.Warehouse.RackController.show",
        "parameters": [
          {
            "description": "Rack ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Rack"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a rack by given id",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Updates a rack",
        "operationId": "Wms.Warehouse.RackController.update",
        "parameters": [
          {
            "description": "Rack ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Rack",
            "in": "body",
            "name": "single_rack",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Rack"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Rack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a rack",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/zones": {
      "delete": {
        "description": "Deletes a list of locations",
        "operationId": "Wms.Warehouse.ZoneController.batch_delete",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a list of locations",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Searches a list of zones given filter params",
        "operationId": "Wms.Warehouse.ZoneController.search",
        "parameters": [
          {
            "description": "ID of the zone",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Code of the zone",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of the zone",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Priority assigned to the zone",
            "in": "query",
            "name": "priority",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Equivalent zone in client ERP system",
            "in": "query",
            "name": "client_zone",
            "required": false,
            "type": "string"
          },
          {
            "description": "ID of the warehouse which zone belongs to",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Whether the zone is already draw in the wizard or not",
            "in": "query",
            "name": "is_defined",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Limit value to pagination",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Offset value to pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Zone"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of zones given filter params",
        "tags": [
          "Warehouse"
        ]
      },
      "post": {
        "description": "Creates a warehouse zone",
        "operationId": "Wms.Warehouse.ZoneController.create",
        "parameters": [
          {
            "description": "Zone body request",
            "in": "body",
            "name": "zone",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Creates a warehouse zone",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Updates a list of zones",
        "operationId": "Wms.Warehouse.ZoneController.batch_update",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {},
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a list of zones",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/zones/{id}": {
      "delete": {
        "description": "Deletes a zone by id",
        "operationId": "Wms.Warehouse.ZoneController.delete",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a zone by id",
        "tags": [
          "Warehouse"
        ]
      },
      "get": {
        "description": "Show a zone by given id",
        "operationId": "Wms.Warehouse.ZoneController.show",
        "parameters": [
          {
            "description": "Zone ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a zone by given id",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Updates a zone",
        "operationId": "Wms.Warehouse.ZoneController.update",
        "parameters": [
          {
            "description": "Zone ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Name of zone",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Priority of zone",
            "in": "form_data",
            "name": "priority",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Client zone name",
            "in": "form_data",
            "name": "client_zone",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse ID",
            "in": "form_data",
            "name": "warehouse_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a zone",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/zones/{id}/list": {
      "get": {
        "description": "Lists the locations by zone",
        "operationId": "Wms.Warehouse.LocationController.index_by_zone",
        "parameters": [
          {
            "description": "Zone ID of location",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hallway coordenate in location",
            "in": "query",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row coordenate in location",
            "in": "query",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module coordenate in location",
            "in": "query",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level coordenate in location",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position coordenate in location",
            "in": "query",
            "name": "position",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical code for location",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wheter or not a location is volume",
            "in": "query",
            "name": "is_volume",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Location type id",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the locations by zone",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/zones/{id}/list/{hallway}": {
      "get": {
        "description": "Lists the locations by zone",
        "operationId": "Wms.Warehouse.LocationController.index_by_zone",
        "parameters": [
          {
            "description": "Zone ID of location",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hallway coordenate in location",
            "in": "query",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row coordenate in location",
            "in": "query",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module coordenate in location",
            "in": "query",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level coordenate in location",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position coordenate in location",
            "in": "query",
            "name": "position",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical code for location",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wheter or not a location is volume",
            "in": "query",
            "name": "is_volume",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Location type id",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the locations by zone",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/zones/{id}/list/{hallway}/{row}": {
      "get": {
        "description": "Lists the locations by zone",
        "operationId": "Wms.Warehouse.LocationController.index_by_zone",
        "parameters": [
          {
            "description": "Zone ID of location",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hallway coordenate in location",
            "in": "query",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row coordenate in location",
            "in": "query",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module coordenate in location",
            "in": "query",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level coordenate in location",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position coordenate in location",
            "in": "query",
            "name": "position",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical code for location",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wheter or not a location is volume",
            "in": "query",
            "name": "is_volume",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Location type id",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the locations by zone",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/zones/{id}/list/{hallway}/{row}/{module}": {
      "get": {
        "description": "Lists the locations by zone",
        "operationId": "Wms.Warehouse.LocationController.index_by_zone",
        "parameters": [
          {
            "description": "Zone ID of location",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hallway coordenate in location",
            "in": "query",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row coordenate in location",
            "in": "query",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module coordenate in location",
            "in": "query",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level coordenate in location",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position coordenate in location",
            "in": "query",
            "name": "position",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical code for location",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wheter or not a location is volume",
            "in": "query",
            "name": "is_volume",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Location type id",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the locations by zone",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/zones/{id}/list/{hallway}/{row}/{module}/{level}": {
      "get": {
        "description": "Lists the locations by zone",
        "operationId": "Wms.Warehouse.LocationController.index_by_zone",
        "parameters": [
          {
            "description": "Zone ID of location",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Hallway coordenate in location",
            "in": "query",
            "name": "hallway",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Row coordenate in location",
            "in": "query",
            "name": "row",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Module coordenate in location",
            "in": "query",
            "name": "module",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Level coordenate in location",
            "in": "query",
            "name": "level",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Position coordenate in location",
            "in": "query",
            "name": "position",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Alphanumerical code for location",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wheter or not a location is volume",
            "in": "query",
            "name": "is_volume",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Location type id",
            "in": "query",
            "name": "location_type_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the locations by zone",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/{id}": {
      "get": {
        "description": "Fetch a warehouse by given id",
        "operationId": "Wms.Warehouse.WarehouseController.show",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch a warehouse by given id",
        "tags": [
          "Warehouse"
        ]
      },
      "put": {
        "description": "Update fields of warehouse by given id",
        "operationId": "Wms.Warehouse.WarehouseController.update",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "City where is located the warehouse",
            "in": "form_data",
            "name": "city",
            "required": false,
            "type": "string"
          },
          {
            "description": "Country where is located the warehouse",
            "in": "form_data",
            "name": "country",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fax number",
            "in": "form_data",
            "name": "fax",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Address line number",
            "in": "form_data",
            "name": "line1",
            "required": false,
            "type": "string"
          },
          {
            "description": "Address line number",
            "in": "form_data",
            "name": "line2",
            "required": false,
            "type": "string"
          },
          {
            "description": "Warehouse Name",
            "in": "form_data",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Phone number of the warehouse",
            "in": "form_data",
            "name": "phone",
            "required": false,
            "type": "string"
          },
          {
            "description": "Email of the warehouse",
            "in": "form_data",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Test state",
            "in": "form_data",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "description": "Zip code number",
            "in": "form_data",
            "name": "zip_code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Address in a warehouse site",
            "in": "form_data",
            "name": "site",
            "required": false,
            "type": "string"
          },
          {
            "description": "Priority of a warehouse in a site",
            "in": "form_data",
            "name": "priority",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Update fields of warehouse by given id",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/{id}/empty_locations": {
      "post": {
        "description": " Receives a list of location ids from a given warehouse\n and a list with each location and if its empty or not",
        "operationId": "Wms.Warehouse.WarehouseController.search_empty_locations",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of location ids to search (json)",
            "in": "form_data",
            "name": "location_ids",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyLocationsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Receives a list of location ids from a given warehouse\n and a list with each location and if its empty or not",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/{id}/locations": {
      "get": {
        "description": "Fetch locations associated to a warehouse given id",
        "operationId": "Wms.Warehouse.WarehouseController.get_locations",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch locations associated to a warehouse given id",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/{id}/locations/download_priorities": {
      "get": {
        "description": "Returns a CSV with storage and cross docking locations\naccording to the given warehouse ID",
        "operationId": "Wms.Warehouse.WarehouseController.download_priorities_csv_template",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Returns a CSV with storage and cross docking locations\naccording to the given warehouse ID",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/{id}/locations/suggestion": {
      "get": {
        "description": "Fetch locations associated to a warehouse given id and according to setting direct_storing_enabled.",
        "operationId": "Wms.Warehouse.WarehouseController.get_suggested_locations",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Product id",
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch locations associated to a warehouse given id and according to setting direct_storing_enabled.",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/{id}/locations/upload_priorities": {
      "post": {
        "description": "Updates warehousing location priorities",
        "operationId": "Wms.Warehouse.WarehouseController.upload_location_priorities",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Path to CSV file",
            "in": "form_data",
            "name": "file",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates warehousing location priorities",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/warehouses/{w_id}/locations/search": {
      "post": {
        "description": "Fetch locations associated to a warehouse given id",
        "operationId": "Wms.Warehouse.WarehouseController.post_get_locations",
        "parameters": [
          {
            "description": "Warehouse ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Fetch locations associated to a warehouse given id",
        "tags": [
          "Warehouse"
        ]
      }
    },
    "/webhook/": {
      "get": {
        "description": "Searches a list of webhooks given params",
        "operationId": "Wms.Webhook.WebhookController.search",
        "parameters": [
          {
            "description": "Webhook ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Webhook URL",
            "in": "query",
            "name": "url",
            "required": false,
            "type": "string"
          },
          {
            "description": "Webhook method",
            "in": "query",
            "name": "method",
            "required": false,
            "type": "string"
          },
          {
            "description": "Webhook enabled",
            "in": "query",
            "name": "enabled",
            "required": false,
            "type": "string"
          },
          {
            "description": "Webhook warehouse ID",
            "in": "query",
            "name": "warehouse_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Webhook merchant ID",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Webhook merchant channel ID",
            "in": "query",
            "name": "merchant_channel_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of webhooks given params",
        "tags": [
          "Webhook"
        ]
      },
      "post": {
        "description": "Allow a warehouse to pass data to another APIs through remote calls when an event is triggered.\nWhen an event triggers a webhook, this is sent with an specific payload to the target endpoint according the event\nallowed type. In this way, allowed_types values are going to send the data of the entity from the origin event\n(See models section at the end of this page to see the structure for each one)\nFollowing fields must by passed:\n* **url:** Target endpoint to send/retrieve data\n* **method:** Request method: *GET, POST*\n* **allowed_types:** List of events to trigger this webhook. Currently supports:\n*sales_order_created\nsales_order_cancelled\nsales_order_updated\nsales_order_finished\npicking_order_created\npicking_order_finished\npicking_order_cancelled\npacking_order_created\npacking_order_finished\npacking_order_finished\npacking_order_cancelled\nturbo_label_packing_created\npacking_box_closed\nincoming_good_created\npurchase_order_created\npurchase_order_updated\npurchase_order_deleted\npurchase_order_finished\nreplenishment_order_created\nreplenishment_order_cancelled\nreplenishment_order_finished\nshipment_tracking_updated\ncounting_task_created\ncounting_task_finished\ncounting_task_cancelled\ncounting_task_closed*\n* **enabled:** enable or disable this webhook\n* **request_module:** Request serialize module. Currently supports: *default*. This field is **not required**\n* **response_module:** Response serialize module. Currently supports: *default* This field is **not required**\n* **warehouse_id:** Warehouse to listen events defined in allowed types field",
        "operationId": "Wms.Webhook.WebhookController.create",
        "parameters": [
          {
            "description": "Single webhook to create",
            "in": "body",
            "name": "single_webhook",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResponseList_Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Create a webhook",
        "tags": [
          "Webhook"
        ]
      }
    },
    "/webhook/clients": {
      "get": {
        "description": "Searches a list of webhook clients by the given params",
        "operationId": "Wms.Webhook.WebhookClientController.search",
        "parameters": [
          {
            "description": "Webhook Client ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Webhook Client name",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Webhook Client type",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Webhook Client merchant ID",
            "in": "query",
            "name": "merchant_id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Webhook Client merchant channel ID",
            "in": "query",
            "name": "merchant_channel_id",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_WebhookClient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Searches a list of webhook clients by the given params",
        "tags": [
          "Webhook"
        ]
      },
      "post": {
        "description": " Create a webhook client which can be attached to webhooks to authenticate their calls on trigger",
        "operationId": "Wms.Webhook.WebhookClientController.create",
        "parameters": [
          {
            "description": "Webhook client to create",
            "in": "body",
            "name": "webhook_client",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WebhookClient"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResponseList_WebhookClient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthError"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": " Create a webhook client which can be attached to webhooks to authenticate their calls on trigger",
        "tags": [
          "Webhook"
        ]
      }
    },
    "/webhook/clients/{id}": {
      "delete": {
        "description": "Deletes a Webhook Client",
        "operationId": "Wms.Webhook.WebhookClientController.delete",
        "parameters": [
          {
            "description": "Webhook Client Id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Deletes a Webhook Client",
        "tags": [
          "Webhook"
        ]
      },
      "get": {
        "description": "Show a webhook given ID",
        "operationId": "Wms.Webhook.WebhookClientController.show",
        "parameters": [
          {
            "description": "Webhook client ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookClient"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a webhook given ID",
        "tags": [
          "Webhook"
        ]
      },
      "put": {
        "description": "Updates a Webhook Client by the given ID",
        "operationId": "Wms.Webhook.WebhookClientController.update",
        "parameters": [
          {
            "description": "Webhook Client ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Webhook client to update",
            "in": "body",
            "name": "webhook_client",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WebhookClient"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookClient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Updates a Webhook Client by the given ID",
        "tags": [
          "Webhook"
        ]
      }
    },
    "/webhook/logs": {
      "get": {
        "description": "Lists the event logs from a tenant",
        "operationId": "Wms.Webhook.EventLogController.search",
        "parameters": [
          {
            "description": "See EventLog model",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "See EventLog model",
            "in": "query",
            "name": "response",
            "required": false,
            "type": "string"
          },
          {
            "description": "See Event model",
            "in": "query",
            "name": "event_status",
            "required": false,
            "type": "string"
          },
          {
            "description": "See Event model",
            "in": "query",
            "name": "event_type",
            "required": false,
            "type": "string"
          },
          {
            "description": "See Event model",
            "in": "query",
            "name": "event_task_number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Timestamp",
            "in": "query",
            "name": "updated_at",
            "required": false,
            "type": "string"
          },
          {
            "description": "Records per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Page offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseList_EventLog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Lists the event logs from a tenant",
        "tags": [
          "Webhook"
        ]
      }
    },
    "/webhook/logs/{id}": {
      "get": {
        "description": "Gets a specific log event\n",
        "operationId": "Wms.Webhook.EventLogController.show",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Gets a specific log event\n",
        "tags": [
          "Webhook"
        ]
      }
    },
    "/webhook/retry": {
      "post": {
        "description": "",
        "operationId": "Wms.Webhook.WebhookController.retry",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "",
        "tags": [
          "Webhook"
        ]
      }
    },
    "/webhook/{id}": {
      "delete": {
        "description": "Delete a webhook given ID",
        "operationId": "Wms.Webhook.WebhookController.delete",
        "parameters": [
          {
            "description": "Webhook ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Delete a webhook given ID",
        "tags": [
          "Webhook"
        ]
      },
      "get": {
        "description": "Show a webhook given ID",
        "operationId": "Wms.Webhook.WebhookController.show",
        "parameters": [
          {
            "description": "Webhook ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "Show a webhook given ID",
        "tags": [
          "Webhook"
        ]
      },
      "put": {
        "description": "update a webhook given ID",
        "operationId": "Wms.Webhook.WebhookController.update",
        "parameters": [
          {
            "description": "Webhook ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Single webhook to update",
            "in": "body",
            "name": "single_webhook",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorsList"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "general"
            ]
          }
        ],
        "summary": "update a webhook given ID",
        "tags": [
          "Webhook"
        ]
      }
    }
  },
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "oauth2": {
      "flow": "password",
      "scopes": {
        "general": "Pulpo WMS user scope"
      },
      "tokenUrl": "/api/v1/auth",
      "type": "oauth2"
    }
  },
  "swagger": "2.0"
}
